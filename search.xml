<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习路线整理</title>
    <url>/2023/04/12/Mysql%20%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Mysql-面试题"><a href="#Mysql-面试题" class="headerlink" title="Mysql 面试题"></a>Mysql 面试题</h1><table>
<thead>
<tr>
<th>InnoDb</th>
<th align="left">MySAM</th>
</tr>
</thead>
<tbody><tr>
<td>事务: 支持,强调的是保持数据一致</td>
<td align="left">不支持,强调的是性能,查询速度比InnoDB快</td>
</tr>
<tr>
<td>外键: 支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td>索引: 使用聚集索引,索引文件和数据文件绑定</td>
<td align="left">使用非聚集索引,索引文件和数据文件分开存储,索引中保存的是数据文件的指针</td>
</tr>
<tr>
<td>锁  支持表级锁、行级锁；行级锁粒度小，处理并发的能力更强</td>
<td align="left">支持表级锁，用户在执行insert&#x2F;update、select、delete时都会给表自动加锁，效率低</td>
</tr>
<tr>
<td>主键：表必须有唯一索引</td>
<td align="left">没有要求</td>
</tr>
<tr>
<td>存储文件： 在操作系统中的存储文件  .frm : 表定义文件  .ibd： 数据文件</td>
<td align="left">在操作系统中的存储文件： .frm : 表定义文件 .myd ：数据文件 .myi ： 索引文件</td>
</tr>
</tbody></table>
<p>在阐述完两种存储引擎的区别之后，在根据两者的特定，枚举一些使用场景：</p>
<ol>
<li>MyISAM 对于不支持事务并且存在大量 SELECT 的读场景比较合适；</li>
<li>如果业务代码中要支持事务，必须选择 InnoDB 存储引擎；</li>
<li>如果业务代码中要支持外键，必须选择 InnoDB 存储引擎；</li>
</ol>
]]></content>
      <categories>
        <category>面试宝典</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2023/04/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>测试博客搭建</p>
]]></content>
  </entry>
  <entry>
    <title>G1垃圾回收</title>
    <url>/2020/03/19/%E4%BB%8A%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面向多CPU的最新垃圾回收器-G1"><a href="#面向多CPU的最新垃圾回收器-G1" class="headerlink" title="面向多CPU的最新垃圾回收器-G1"></a>面向多CPU的最新垃圾回收器-G1</h1><h2 id="G1最大的特征"><a href="#G1最大的特征" class="headerlink" title="G1最大的特征"></a>G1最大的特征</h2><p>将大空间分成若干区域,能实现一些更复杂,更精细的的功能</p>
<h2 id="划分成小区域的好处"><a href="#划分成小区域的好处" class="headerlink" title="划分成小区域的好处"></a>划分成小区域的好处</h2><ol>
<li>垃圾回收线程和工作线程能够并行工作,避免”SWT”</li>
<li>不同区域可同时回收,并发性更高,更适合多核服务器</li>
<li>可以先回收一部分区域,回收更快</li>
<li>可以简历停顿预测模型,用户可以设定垃圾回收最长时间</li>
</ol>
<h2 id="Region划分原理"><a href="#Region划分原理" class="headerlink" title="Region划分原理"></a>Region划分原理</h2><ol>
<li>数量方面,region默认总个数为2048个</li>
<li>大小方面,默认是1MB,可以通过参数将其修改为2,4,8,16,32MB这几种</li>
</ol>
<h1 id="第一章总结思考"><a href="#第一章总结思考" class="headerlink" title="第一章总结思考"></a>第一章总结思考</h1><ol>
<li>每个区域该多大?总数为多少比较好</li>
<li>新生&#x2F;老年代区域比例该如何才能最优?</li>
<li>大对象该如何管理</li>
<li>处理YGC,还有几种类型,如何工作?</li>
</ol>
]]></content>
      <categories>
        <category>JVM垃圾回收机制</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2023/04/12/java/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />

<h1 id="1变量"><a href="#1变量" class="headerlink" title="1变量"></a>1变量</h1><h2 id="1-1-变量的声明"><a href="#1-1-变量的声明" class="headerlink" title="1.1 变量的声明"></a>1.1 变量的声明</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/2341325145112341234.png" alt="屏幕截图 2023-04-12 102646"></p>
<h2 id="1-2-变量的类型"><a href="#1-2-变量的类型" class="headerlink" title="1.2 变量的类型"></a>1.2 变量的类型</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-04-12%20102712.png" alt="屏幕截图 2023-04-12 102712"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672047188697.png" alt="1672047188697"></p>
<h3 id="1-3-基本数据类型"><a href="#1-3-基本数据类型" class="headerlink" title="1.3 基本数据类型"></a>1.3 基本数据类型</h3><p>byte short int long  (1,2,4,8)字节   整数型</p>
<p>float&#x2F;double              (4,8)字节        浮点型  （默认为double类型）</p>
<p>boolean（true&#x2F;false）                       1字节             布尔类型</p>
<p>char                                    2字节           字符型</p>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h3 id="String类型-x2F-对象类型"><a href="#String类型-x2F-对象类型" class="headerlink" title="String类型 &#x2F; 对象类型"></a>String类型 &#x2F; 对象类型</h3><h3 id="1-4-String内存"><a href="#1-4-String内存" class="headerlink" title="1.4 String内存"></a>1.4 String内存</h3><ol>
<li>String直接赋值的变量为字面量，其值被存储在方法区中，地址一样</li>
<li>通过new对象的方式创建的变量，其值被存储在堆内存中，地址不同</li>
<li>如果两个String常量拼接，其值仍存储在方法区中，如果有一个为变量的话，其值就存储在堆内存中。</li>
<li>如图所示：</li>
</ol>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672112069374.png" alt="1672112069374"></p>
<h3 id="1-5-类型转换"><a href="#1-5-类型转换" class="headerlink" title="1.5 类型转换"></a>1.5 类型转换</h3><h4 id="1-5-1-自动转换"><a href="#1-5-1-自动转换" class="headerlink" title="1.5.1 自动转换"></a>1.5.1 自动转换</h4><pre><code>1. 当小类型变量向大类型变量转换时，可以直接自动转换。

  	2. 如果计算中两个操作数有大小两个类型的话，为自动转换为较大类型
          	3. 当byte类型和short类型相加的时候，类型需提升为int类型。
</code></pre>
<h4 id="1-5-2-强制转换"><a href="#1-5-2-强制转换" class="headerlink" title="1.5.2 强制转换"></a>1.5.2 强制转换</h4><ol>
<li>当大类型转换为小类型时，需要强制类型转换</li>
<li>强制类型转换可能会造成数据溢出</li>
<li>如代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> (<span class="type">byte</span>)(b1+s1);</span><br></pre></td></tr></table></figure>

<h1 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h1><h2 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672126014917.png" alt="1672126014917"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+ - * / %</span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a1+a2=&quot;</span> + (a1 + a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1-a2=&quot;</span> + (a1 - a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1*a2=&quot;</span> + (a1 * a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1/a2=&quot;</span> + (a1 / a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1%a2=&quot;</span> + (a1 % a2));  </span><br></pre></td></tr></table></figure>

<h2 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672126854152-1672131194017.png" alt="1672126854152"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a+=b = &quot;</span>+ (a+=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a-=b = &quot;</span>+ (a-=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a*=b = &quot;</span>+ (a*=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a/=b = &quot;</span>+ (a/=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a%=b = &quot;</span>+ (a%=b));</span><br></pre></td></tr></table></figure>



<h2 id="2-3-自增自减运算符"><a href="#2-3-自增自减运算符" class="headerlink" title="2.3 自增自减运算符"></a>2.3 自增自减运算符</h2><h3 id="2-3-1-自增运算符"><a href="#2-3-1-自增运算符" class="headerlink" title="2.3.1 自增运算符"></a>2.3.1 自增运算符</h3><ul>
<li>a++, 先运算，后自增</li>
<li>++a 先自增， 后运算</li>
</ul>
<h3 id="2-3-2-自减运算符"><a href="#2-3-2-自减运算符" class="headerlink" title="2.3.2 自减运算符"></a>2.3.2 自减运算符</h3><ul>
<li>a–， 先运算，在自减</li>
<li>–a,   先自减，在运算</li>
</ul>
<h2 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;&amp;  || ! 与 或 非 三种逻辑运算符</span><br></pre></td></tr></table></figure>

<h3 id="2-4-1-逻辑与运算符"><a href="#2-4-1-逻辑与运算符" class="headerlink" title="2.4.1 逻辑与运算符"></a>2.4.1 逻辑与运算符</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672127681216.png" alt="1672127681216"></p>
<ul>
<li>如果第一个条件不符合，则直接返回false,后面的条件将不会执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">181</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">159</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> a&gt;<span class="number">180</span> &amp;&amp; b++ &lt; <span class="number">160</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-逻辑或运算符"><a href="#2-4-2-逻辑或运算符" class="headerlink" title="2.4.2 逻辑或运算符"></a>2.4.2 逻辑或运算符</h3><ul>
<li>如果第一个条件符合，则直接返回true,后面的条件将不会执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">159</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> a&gt;=<span class="number">180</span> || b++&lt;<span class="number">160</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-逻辑非运算符"><a href="#2-4-3-逻辑非运算符" class="headerlink" title="2.4.3 逻辑非运算符"></a>2.4.3 逻辑非运算符</h3><ul>
<li>逻辑非运算符：取相反值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s = !(a&gt;=<span class="number">180</span> || b++&lt;<span class="number">160</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<h1 id="3-条件分支语句"><a href="#3-条件分支语句" class="headerlink" title="3 条件分支语句"></a>3 条件分支语句</h1><h2 id="3-1-if-else-语句"><a href="#3-1-if-else-语句" class="headerlink" title="3.1 if-else 语句"></a>3.1 if-else 语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果条件为真，则执行相应的语句</span></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;已经成年了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;还没有成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-if-else-if-语句"><a href="#3-2-if-else-if-语句" class="headerlink" title="3.2 if-else-if 语句"></a>3.2 if-else-if 语句</h2><p>不推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">15</span> &amp;&amp;  age &lt;= <span class="number">25</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;青年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">25</span> &amp;&amp; age &lt;= <span class="number">40</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;壮年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">40</span> &amp;&amp; age &lt;= <span class="number">59</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">60</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;老年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-switch语句"><a href="#3-3-switch语句" class="headerlink" title="3.3 switch语句"></a>3.3 switch语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周二&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周三&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周四&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周五&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周六&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周日&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4.循环语句"></a>4.循环语句</h1><h2 id="4-1-for循环"><a href="#4-1-for循环" class="headerlink" title="4.1 for循环"></a>4.1 for循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//九九乘法表 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(i*j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2while循环"><a href="#4-2while循环" class="headerlink" title="4.2while循环"></a>4.2while循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算奇偶数之和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                o+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                j+=m;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶然和&quot;</span>+o);</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数和&quot;</span>+j);</span><br><span class="line">        System.out.println(o&gt;j?<span class="string">&quot;偶数大&quot;</span>:<span class="string">&quot;奇数大&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-3-do-while循环"><a href="#4-3-do-while循环" class="headerlink" title="4.3 do- while循环"></a>4.3 do- while循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">       <span class="keyword">do</span>&#123;</span><br><span class="line">           s--;</span><br><span class="line">           System.out.println(s);</span><br><span class="line">       &#125;<span class="keyword">while</span>(s &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h1 id="5-方法"><a href="#5-方法" class="headerlink" title="5 方法"></a>5 方法</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672295032734.png" alt="1672295032734"></p>
<h2 id="5-2-方法参数列表"><a href="#5-2-方法参数列表" class="headerlink" title="5.2 方法参数列表"></a>5.2 方法参数列表</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672296358783.png" alt="1672296358783"></p>
<h2 id="5-3-方法的返回值"><a href="#5-3-方法的返回值" class="headerlink" title="5.3 方法的返回值"></a>5.3 方法的返回值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672302900772.png" alt="1672302900772"></p>
<h2 id="5-4方法的重载"><a href="#5-4方法的重载" class="headerlink" title="5.4方法的重载"></a>5.4方法的重载</h2><blockquote>
<p>重载（Overload）:一个类中定义多个相同名称的方法</p>
<p>要求：</p>
<blockquote>
<p>方法名称相同。</p>
<p>参数列表不同（类型，个数，顺序）.</p>
<p>与防问修饰符、返回值类型无关</p>
<p>调用带有重载的方法时，需要根据传入的实参去找到与之匹配的方法。</p>
<p>好处：灵活、方便、屏蔽使用差异。</p>
</blockquote>
</blockquote>
<h2 id="5-5-方法的递归"><a href="#5-5-方法的递归" class="headerlink" title="5.5 方法的递归"></a>5.5 方法的递归</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672305027101.png" alt="1672305027101"></p>
<h1 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h1><h2 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672364098704.png" alt="1672364098704"></p>
<h2 id="6-2-内存结构"><a href="#6-2-内存结构" class="headerlink" title="6.2 内存结构"></a>6.2 内存结构</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672365189458.png" alt="1672365189458"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672365197447.png" alt="1672365197447"></p>
<h2 id="6-3-定义数组"><a href="#6-3-定义数组" class="headerlink" title="6.3 定义数组"></a>6.3 定义数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组的三种方式</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];    <span class="comment">//动态赋值</span></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>&#125;   <span class="comment">//静态赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="6-4-各个类型的默认值"><a href="#6-4-各个类型的默认值" class="headerlink" title="6.4 各个类型的默认值"></a>6.4 各个类型的默认值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/image-20221230104333576.png" alt="image-20221230104333576"></p>
<h2 id="6-5-数组的扩容（复制）"><a href="#6-5-数组的扩容（复制）" class="headerlink" title="6.5 数组的扩容（复制）"></a>6.5 数组的扩容（复制）</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672371639658.png" alt="1672371639658"></p>
<h3 id="6-5-1-System-arraycopy"><a href="#6-5-1-System-arraycopy" class="headerlink" title="6.5.1. System.arraycopy()"></a>6.5.1. System.arraycopy()</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672372182849.png" alt="1672372182849"></p>
<h4 id="6-5-1-1-示例代码"><a href="#6-5-1-1-示例代码" class="headerlink" title="6.5.1.1 示例代码"></a>6.5.1.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation1</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//System.arraycopy(来源数组，来源数组下标，目标数组，目标数组下标，复制的个数)</span></span><br><span class="line">    System.arraycopy(nums, <span class="number">0</span>, temp, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(temp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-5-2-Arrays-copyOf"><a href="#6-5-2-Arrays-copyOf" class="headerlink" title="6.5.2 Arrays.copyOf()"></a>6.5.2 Arrays.copyOf()</h3><h4 id="6-5-2-1-示例代码"><a href="#6-5-2-1-示例代码" class="headerlink" title="6.5.2.1 示例代码"></a>6.5.2.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation3</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.copyOf(来源数组,新数组长度)</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(nums, <span class="number">20</span>);</span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-3-Arrays-copyOfRange"><a href="#6-5-3-Arrays-copyOfRange" class="headerlink" title="6.5.3 Arrays.copyOfRange()"></a>6.5.3 Arrays.copyOfRange()</h3><h4 id="6-5-3-1-示例代码"><a href="#6-5-3-1-示例代码" class="headerlink" title="6.5.3.1 示例代码"></a>6.5.3.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.copyOfRange(来源数组，起始下标,复制几个元素)</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOfRange(nums, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-4-clone"><a href="#6-5-4-clone" class="headerlink" title="6.5.4 clone"></a>6.5.4 clone</h3><h4 id="6-5-4-1-示例代码"><a href="#6-5-4-1-示例代码" class="headerlink" title="6.5.4.1 示例代码"></a>6.5.4.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation4</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = nums.clone();</span><br><span class="line"><span class="comment">//        System.out.println(nums == temp);</span></span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-二维数组"><a href="#6-6-二维数组" class="headerlink" title="6.6 二维数组"></a>6.6 二维数组</h2><h3 id="6-6-1-定义方式："><a href="#6-6-1-定义方式：" class="headerlink" title="6.6.1 定义方式："></a>6.6.1 定义方式：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];  <span class="comment">// 二维数组的第二维可以省略不写</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-遍历二维数组"><a href="#6-6-2-遍历二维数组" class="headerlink" title="6.6.2 遍历二维数组"></a>6.6.2 遍历二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr1[i].length; j++) &#123;</span><br><span class="line">            System.out.print(arr1[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-排序"><a href="#7-排序" class="headerlink" title="7 排序"></a>7 排序</h1><h2 id="7-1-冒泡排序"><a href="#7-1-冒泡排序" class="headerlink" title="7.1 冒泡排序"></a>7.1 冒泡排序</h2><h3 id="7-1-2-概述"><a href="#7-1-2-概述" class="headerlink" title="7.1.2 概述"></a>7.1.2 概述</h3><p>冒泡排序： 相邻的两个数值比较大小,互换位置</p>
<h3 id="7-1-3-代码实现"><a href="#7-1-3-代码实现" class="headerlink" title="7.1.3 代码实现"></a>7.1.3 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] MaoPao(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                   nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                   nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-选择排序"><a href="#7-2-选择排序" class="headerlink" title="7.2 选择排序"></a>7.2 选择排序</h2><h3 id="7-2-1-概述"><a href="#7-2-1-概述" class="headerlink" title="7.2.1 概述"></a>7.2.1 概述</h3><p>固定值与其他值依次比较大小，互换位置</p>
<h3 id="7-2-2-代码实现"><a href="#7-2-2-代码实现" class="headerlink" title="7.2.2 代码实现"></a>7.2.2 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                   nums[i] = nums[j];</span><br><span class="line">                   nums[j] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8 面向对象"></a>8 面向对象</h1><ul>
<li>面向对象：面向具体事物（初步理解）</li>
<li>抽象事物在java中体现：类</li>
<li>具体食物在java中体现：对象，用类创建对象</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711203594-1672714024508.png" alt="1672711203594"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711176694-1672713913459.png" alt="1672711176694"></p>
<p><img src="F:\java学习\千峰\个人总结\java\java.assets\1672711184213-1672713917997.png" alt="1672711184213"></p>
<h2 id="8-1-对象属性赋值：-全局变量赋值"><a href="#8-1-对象属性赋值：-全局变量赋值" class="headerlink" title="8.1 对象属性赋值： 全局变量赋值"></a>8.1 对象属性赋值： 全局变量赋值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711333816.png" alt="1672711333816"></p>
<h2 id="8-2-第二种方式：-setXXX-getXXX"><a href="#8-2-第二种方式：-setXXX-getXXX" class="headerlink" title="8.2 第二种方式：  setXXX   getXXX"></a>8.2 第二种方式：  setXXX   getXXX</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXXX</span><span class="params">(String xxx)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.xxx = xxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取属性值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getXXX</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-面向对象三大特征"><a href="#9-面向对象三大特征" class="headerlink" title="9 面向对象三大特征"></a>9 面向对象三大特征</h1><h2 id="9-1-封装"><a href="#9-1-封装" class="headerlink" title="9.1 封装"></a>9.1 封装</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672795159881.png" alt="1672795159881"></p>
<h3 id="9-1-1-属性封装"><a href="#9-1-1-属性封装" class="headerlink" title="9.1.1 属性封装"></a>9.1.1 属性封装</h3><ul>
<li>private 修饰属性， 赋值： set 构造器赋值  取值： get</li>
<li>让用户只能在规定的方法内进行访问属性，保护类的内部结构，防止用户误操作导致系统出现错误。</li>
</ul>
<h3 id="9-1-2-类的封装"><a href="#9-1-2-类的封装" class="headerlink" title="9.1.2 类的封装"></a>9.1.2 类的封装</h3><ul>
<li>类里边的属性和方法：同属于一个类·</li>
<li>把属性类的：属性和方法集中封装到一起</li>
</ul>
<h3 id="9-1-3-方法的封装："><a href="#9-1-3-方法的封装：" class="headerlink" title="9.1.3 方法的封装："></a>9.1.3 方法的封装：</h3><ul>
<li>对功能的抽取</li>
<li>提高代码的可维护性和可复用性</li>
<li>提高代码的可阅读性</li>
</ul>
<h3 id="9-1-4-封装的作用"><a href="#9-1-4-封装的作用" class="headerlink" title="9.1.4 封装的作用"></a>9.1.4 封装的作用</h3><ol>
<li>概念：尽可能隐藏对象的内部实现细节，控制对象的修改及访问的权限</li>
<li>实现方式：提供公共访问方法，以保证数据的正常录入</li>
<li>通过对方法的封装可以提高代码的可复用性、可维护性以及可阅读性</li>
</ol>
<h2 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672796325270.png" alt="1672796325270"></p>
<h3 id="9-2-1-继承的作用"><a href="#9-2-1-继承的作用" class="headerlink" title="9.2.1 继承的作用"></a>9.2.1 继承的作用</h3><ol>
<li>概念：两个类之间的继承关系，必须满足“is a” 的关系  目的：抽取出共性的特征和行为，定义在父类中，实现重用</li>
<li>产生继承关系之后，子类可以使用父类中的属性和方法，也可定义子类独有的属性和方法</li>
<li>好处：既提高代码的可复用性，有提高代码的可扩展性</li>
</ol>
<h3 id="9-2-2-方法的重写"><a href="#9-2-2-方法的重写" class="headerlink" title="9.2.2 方法的重写"></a>9.2.2 方法的重写</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672804065806.png" alt="1672804065806"></p>
<ul>
<li>前提：当父类提供的方法无法满足子类需求时，可在子类中定义和父类相同的方法进行重写（Override）。</li>
<li>方法重写的执行：<ul>
<li>子类重写父类方法后，调用时优先执行子类重写后的方法</li>
</ul>
</li>
<li>方法重写规则：<ul>
<li>方法名称，参数列表，返回值类型必须与父类相同</li>
<li>访问修饰符可与父类相同或是比父类更广泛</li>
</ul>
</li>
</ul>
<h2 id="9-3-多态"><a href="#9-3-多态" class="headerlink" title="9.3 多态"></a>9.3 多态</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672819344954.png" alt="1672819344954"></p>
<ul>
<li>为什么存在：想要只访问父类的属性和方法，及重写方法</li>
<li>格式：1.有继承 2.有重写 3.父类 对象名 &#x3D; new 子类(); 父类的引用指向子类的对象</li>
<li>实际运行过程中，依旧遵循着重写原则，如果子类重写了父类中的方法，执行子类中重写后的方法，否则执行父类中的方法。</li>
<li>父类方法：父类方法的参数和返回值可以使用  父类对象</li>
<li>多态调用方法为子类中被重写的方法，调用属性为父类中的属性。</li>
</ul>
<h3 id="9-3-1-向上转型和向下转型"><a href="#9-3-1-向上转型和向下转型" class="headerlink" title="9.3.1 向上转型和向下转型"></a>9.3.1 向上转型和向下转型</h3><h4 id="9-3-1-1-向上转型"><a href="#9-3-1-1-向上转型" class="headerlink" title="9.3.1.1 向上转型"></a>9.3.1.1 向上转型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类 对象 = <span class="keyword">new</span> 子类();</span><br><span class="line">对象.方法()  <span class="comment">//调用的是子类中被重写的方法</span></span><br></pre></td></tr></table></figure>

<h4 id="9-3-1-2-向下转型"><a href="#9-3-1-2-向下转型" class="headerlink" title="9.3.1.2 向下转型"></a>9.3.1.2 向下转型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">instanceof</span> 关键字  </span><br><span class="line">对象 <span class="keyword">instanceof</span> 类 如果该对象是该类的子类或父类，代表可以转型</span><br><span class="line"> <span class="keyword">if</span>( s1 <span class="keyword">instanceof</span>  Dog) &#123;</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> (Dog)s1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>向下转型的前提是父类对象指向的是子类对象（也就是说，在向下转型之前，它得先向上转型）</li>
<li>向下转型只能转型为本类对象（猫是不能变成狗的）。</li>
</ul>
<h2 id="9-4-this-x2F-super"><a href="#9-4-this-x2F-super" class="headerlink" title="9.4 this&#x2F;super"></a>9.4 this&#x2F;super</h2><h3 id="9-4-1-this方法"><a href="#9-4-1-this方法" class="headerlink" title="9.4.1 this方法"></a>9.4.1 this方法</h3><ul>
<li>this:是在方法内部</li>
<li>this:指当前对象， this.属性 ， this.方法</li>
<li>this(xxx): 可以调用构造器，必须写在第一行</li>
</ul>
<h3 id="9-4-2-super-方法"><a href="#9-4-2-super-方法" class="headerlink" title="9.4.2 super()方法"></a>9.4.2 super()方法</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672818320628.png" alt="1672818320628"></p>
<ul>
<li>super: 子类的方法里边</li>
<li>super： super.父类属性  super.父类方法</li>
<li>子类重写父类里边的方法：</li>
<li>构造器： 调用类构造器：  必须写在第一行</li>
</ul>
<ol>
<li><p>必要性： 在子类中，可直接访问从父类继承到的属性和方法，但如果父子类的属性或方法存在重名(属性遮蔽、方法重写)时，需要加以区分，才可专项访问。</p>
</li>
<li><p>访问属性方法：super.属性   super.父类方法</p>
</li>
<li><ul>
<li><p>继承对象创建顺序: 在具有继承关系的对象创建中，构建子类队形会先构建父类对象</p>
</li>
<li><p>由父类的共性内容，叠加子类的独有内容，组合完成完整的子类对象</p>
</li>
</ul>
</li>
<li><p>调用父类构造器：在子类构造器中，super()调用父类空参构造器，super(xx,xx)调用父类有参构造器</p>
</li>
</ol>
<h3 id="9-4-3-super和this的区别"><a href="#9-4-3-super和this的区别" class="headerlink" title="9.4.3 super和this的区别"></a>9.4.3 super和this的区别</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672818537114.png" alt="1672818537114"></p>
<ul>
<li>this或super使用在构造方法时，都要求在首行</li>
<li>当子类构造中使用了this(实参),即不可再同时书写super()或super(实参),会由this()指向构造方法完成super()调用。</li>
</ul>
<h1 id="10-权限修饰符"><a href="#10-权限修饰符" class="headerlink" title="10 权限修饰符"></a>10 权限修饰符</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672802792755.png" alt="1672802792755"></p>
<ul>
<li>public修饰的成员，在同类，同包，子类（继承自本类），其他包中都可以访问</li>
<li>protected修饰的成员，在同类，同包、子类中可以访问，但是在其他包中不能访问</li>
<li>default修饰的成员，在同类，通报中可以访问，但是在其他包中不管是不是子类都不能访问</li>
<li>private修饰的成员，只能在同类中被访问，而在同包、子类和其他包中是不能访问的</li>
</ul>
<p><strong>注意：</strong><em><strong>子类在不同包中调用父类中被protected修饰的属性或方法时，只能通过子类对象来进行调用，父类对象在不同包下无权调用自己被protected修饰的成员或方法。</strong></em></p>
<h1 id="11-关键字"><a href="#11-关键字" class="headerlink" title="11 关键字"></a>11 关键字</h1><h2 id="11-1-abstract-关键字"><a href="#11-1-abstract-关键字" class="headerlink" title="11.1 abstract 关键字"></a>11.1 abstract 关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672881709758.png" alt="1672881709758"></p>
<ul>
<li>抽象类<ul>
<li>abstract修饰类，此类不能new对象<ul>
<li>倍abstract修饰的类，称为抽象类</li>
<li>抽象类意为不够完整的类，不够具体的类</li>
<li>抽象类无法独立存在，即不能new对象</li>
</ul>
</li>
<li>抽象类的作用：<ul>
<li>可被子类继承，提供共性属性和方法</li>
<li>可声明为引用，更自然地使用多态</li>
</ul>
</li>
</ul>
</li>
<li>抽象方法<ul>
<li>定义<ul>
<li>不该被实现的方法</li>
<li>方法声明必要，方法实现多余</li>
</ul>
</li>
<li>注意：<ul>
<li>抽象方法所属的类必须是抽象类</li>
<li>抽象类不一定有抽象方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="11-2-static关键字"><a href="#11-2-static关键字" class="headerlink" title="11.2 static关键字"></a>11.2 static关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672882758882.png" alt="1672882758882"></p>
<ul>
<li>静态属性<ul>
<li>static 属性类型 属性值</li>
<li>访问方式： 类名.属性名  不推荐使用对象来调用静态属性</li>
</ul>
</li>
<li>静态方法<ul>
<li>方法的返回值类型前边加static</li>
<li>访问方式：类名.方法 不可以使用对象来调用静态方法</li>
<li>一般用来做工具类中的方法</li>
<li>静态方法允许直接访问静态成员</li>
<li>静态方法不能直接访问非静态成员</li>
<li>静态方法中不允许使用this或是super关键字</li>
<li>静态方法可以继承，不能重写，没有多态</li>
</ul>
</li>
<li>静态代码块<ul>
<li>执行顺序 ： 初始化赋值 》 静态代码块赋值 》 代码块赋值 》 构造器赋值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    只执行一次</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态代码块<ul>
<li>创建对象时，触发动态代码块的执行。</li>
<li>执行地位：初始化属性之后，构造方法代码之前</li>
<li>作用：可为实例属性赋值，或必要的初始行为</li>
</ul>
</li>
</ul>
<h2 id="11-3-final关键字"><a href="#11-3-final关键字" class="headerlink" title="11.3 final关键字"></a>11.3 final关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672889388365.png" alt="1672889388365"></p>
<ul>
<li>final关键字<ul>
<li>概念：最后的，不可更改的</li>
<li>修饰类：final修饰类，此类蹦被继承</li>
<li>修饰方法：final修饰方法：此方法不能被重写</li>
<li>修饰变量： final修饰变量 ： 此变量不能被改变（常量）</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672890392223.png" alt="1672890392223"></p>
<ul>
<li>常量<ul>
<li>实例常量：实例常量不在提供默认值，必须手动赋予初始值。<ul>
<li>赋值时机：显示初始化、动态代码。</li>
</ul>
</li>
<li>静态常量：静态常量不在提供默认值，必须手动赋予初始值。<ul>
<li>赋值时机：显示初始化，静态代码块</li>
</ul>
</li>
<li>不同常量类的特点<ul>
<li>基本数据类型常量：值不可变</li>
<li>引用数据类型常量：地址不可变</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> AGE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String NAME;  <span class="comment">// 实例常量  只能在显示初始化 、动态代码块 、 构造器中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> sex;  <span class="comment">// 静态常量 只能在显示初始化 、静态代码块中赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">        NAME = <span class="string">&quot;张三&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FinalTest1</span><span class="params">(<span class="type">int</span> AGE)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.AGE = AGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-接口"><a href="#12-接口" class="headerlink" title="12 接口"></a>12 接口</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672903735937.png" alt="1672903735937"></p>
<ul>
<li><p>接口中的属性都是静态常量 public static final ,通常可默认不写</p>
</li>
<li><p>jdk1.8以前，接口中的方法都是使用abstract修饰的抽象方法</p>
<ul>
<li>使用abstract修饰，供子类实现使用，没有方法体</li>
<li>默认使用public abstract修饰，可省略不写</li>
</ul>
</li>
<li><p>jdk 1.8中，新增default修饰方法</p>
<ul>
<li>使用default修饰，不可省略，供子类调用或重写（只能通过最终实现类调用，不能通过抽象类调用）</li>
</ul>
</li>
<li><p>静态方法：jdk8</p>
<ul>
<li>用static修饰，供接口直接调用，只能通过接口名称调用，实现类不能重写或实现</li>
</ul>
</li>
<li><p>私有方法：jdk9</p>
<ul>
<li>用private修饰，只能在本类中使用</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>接口不能创建对象</li>
<li>接口的子类必须实现接口中所有的抽象方法</li>
<li>接口中没有构造方法，没有代码块</li>
</ul>
</li>
<li><p>函数式接口</p>
<ul>
<li>抽象方法只有一个</li>
<li>加个注解：@FunctionalInterface</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//该注解限制该抽象类中只能有一个抽象方法</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface IStudent &#123;</span><br><span class="line">    public void a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="13-设计模式"><a href="#13-设计模式" class="headerlink" title="13 设计模式"></a>13 设计模式</h1><h2 id="13-1-单例设计模式"><a href="#13-1-单例设计模式" class="headerlink" title="13.1 单例设计模式"></a>13.1 单例设计模式</h2><h3 id="13-1-1-饿汉式"><a href="#13-1-1-饿汉式" class="headerlink" title="13.1.1 饿汉式"></a>13.1.1 饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  实现序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        判断flag是否为true，如果为true，说明不是第一次访问，直接抛出异常，否则的话，说明第一次执行。</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不能创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    私有化对象，使用Volatile 使其可见，有序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span>  <span class="type">Singleton</span> <span class="variable">install</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="comment">//    公有方法，使外界可以通过该方法创建对象</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> install;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-1-2-懒汉式"><a href="#13-1-2-懒汉式" class="headerlink" title="13.1.2 懒汉式"></a>13.1.2 懒汉式</h3><h4 id="13-1-2-1-懒汉式-静态内部类"><a href="#13-1-2-1-懒汉式-静态内部类" class="headerlink" title="13.1.2.1 懒汉式-静态内部类"></a>13.1.2.1 懒汉式-静态内部类</h4><p>原理：由于JVM在加载外部类的过程中，是不会加载静态内部类的，<br>只有内部类的属性&#x2F;方法被调用时才会被加载，并初始化其静态属性。<br>静态属性由于被static修饰，保证只被实例化一次，并且严格保证实例化顺序</p>
<p> 说明：第一次加载Singleton类时不会初始化instance,只有第一次调用getInstance,<br> 虚拟机加载SingletonDemo并初始化instance,这样不仅能确保线程安全，<br> 也能保证Singleton的唯一性</p>
<p> 小结：静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的<br> 一种单例模式，在没有加任何锁的情况下，保证了多线程下的安全，并且<br> 没有任何性能影响和空间浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不可以创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton1</span> <span class="variable">install</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonDemo1.install;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    序列化时直接放回该对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonDemo1.install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="13-2-1-2-懒汉式-双重锁"><a href="#13-2-1-2-懒汉式-双重锁" class="headerlink" title="13.2.1.2 懒汉式-双重锁"></a>13.2.1.2 懒汉式-双重锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="comment">//    1.创建一个私有的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不可以创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    volatie 保证指令的可见性和有序性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">install</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Singleton.install;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        第一次判斷如果install的值不為null，不需要抢占锁，直接返回对象</span></span><br><span class="line">        <span class="keyword">if</span>(install == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="comment">//                第二次判断，判断install是否为null，如果</span></span><br><span class="line">                <span class="keyword">if</span> (install == <span class="literal">null</span>) &#123;</span><br><span class="line">                    install = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-1-3-枚举方式"><a href="#13-1-3-枚举方式" class="headerlink" title="13.1.3 枚举方式"></a>13.1.3 枚举方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> enmu Singleton&#123;</span><br><span class="line">    instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-2-模板设计"><a href="#13-2-模板设计" class="headerlink" title="13.2 模板设计"></a>13.2 模板设计</h2><h2 id="13-2-1-钩子模式"><a href="#13-2-1-钩子模式" class="headerlink" title="13.2.1 钩子模式"></a>13.2.1 钩子模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HookAbstract</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;装箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook1</span> <span class="keyword">extends</span> <span class="title class_">HookAbstract</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步，打开舱门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步，存放进去&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook2</span> <span class="keyword">extends</span> <span class="title class_">HookAbstract</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;剁成肉馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包入面团&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="14-内部类"><a href="#14-内部类" class="headerlink" title="14 内部类"></a>14 内部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 内部类</span></span><br><span class="line"><span class="comment">    * 定义：在一个类的内部在定义一个类</span></span><br><span class="line"><span class="comment">    * 特点：1.变异之后可以产生独立的字节码文件，.class文件</span></span><br><span class="line"><span class="comment">    *      2.内部类可以直接访问外部类的私有成员，而不破坏封装</span></span><br><span class="line"><span class="comment">    *      3.可为外部类提供必要的内部功能组件</span></span><br><span class="line"><span class="comment">    * 成员内部类:</span></span><br><span class="line"><span class="comment">    *              1.在类的内部定义，与实例变量，实例方法同级别的类</span></span><br><span class="line"><span class="comment">    *              2.外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象</span></span><br><span class="line"><span class="comment">    *              Outer out = new Outer();</span></span><br><span class="line"><span class="comment">    *              Outer.Inner in = out.new Inner();</span></span><br><span class="line"><span class="comment">    *              3.当外部类，内部类，存在重名属性时，会优先访问内部类属性</span></span><br><span class="line"><span class="comment">    *              4.成员内部类不能访问静态成员</span></span><br><span class="line"><span class="comment">    *  静态内部类：</span></span><br><span class="line"><span class="comment">    *              1. 不依赖外部对象，可直接创建或通过类名访问，可声明静态成员</span></span><br><span class="line"><span class="comment">    *              2.只能直接访问外部类的静态成员（实例成员需实例化外部对象）</span></span><br><span class="line"><span class="comment">    *              Outer.Inner inner = new Outer.Inner();</span></span><br><span class="line"><span class="comment">    *              Outer.Inner.show();</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 局部内部类： 1.定义在外部类方法中，作用范围和创建对象范围仅限于当前方法</span></span><br><span class="line"><span class="comment">    *                  也就是说只能在方法中new 对象</span></span><br><span class="line"><span class="comment">    *              2.局部内部类访问外部类当前方法中的局部变量时，无法保障变量的生命周期与自身相同</span></span><br><span class="line"><span class="comment">    *                  也就是说，局部类中使用方法的变量，生成的class文件会在变量前自动添加final,限制类的使用范围</span></span><br><span class="line"><span class="comment">    *                  也就是只能在方法内部使用</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 匿名内部类：1.没有类名的局部内部类(一切特征都与局部内部类相同)</span></span><br><span class="line"><span class="comment">    *             2.必须继承一个父类或者实现一个接口</span></span><br><span class="line"><span class="comment">    *             3.定义类、实现类、创建方法的语法合并，只能创建一个该类的对象</span></span><br><span class="line"><span class="comment">    *             4.优点：减少代码量</span></span><br><span class="line"><span class="comment">    *             5.缺点：可读性较差</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OutClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>();</span><br><span class="line"><span class="comment">//        OutClass.InnerClass in = out.new InnerClass();</span></span><br><span class="line"><span class="comment">//        in.aa();</span></span><br><span class="line"><span class="comment">//        InnerClass2.aa();</span></span><br><span class="line">        <span class="type">InnerClass2</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass2</span>();</span><br><span class="line">        OutClass.<span class="type">InnerClass2</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>.InnerClass2();</span><br><span class="line">        inner.aaa();</span><br><span class="line">        i2.aaa();</span><br><span class="line">        InnerClass2.aa();</span><br><span class="line">        <span class="type">IA</span> <span class="variable">c</span> <span class="operator">=</span> out.c();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass2</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> IA <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass3</span> <span class="keyword">implements</span> <span class="title class_">IA</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerClass3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="15-Object类"><a href="#15-Object类" class="headerlink" title="15 Object类"></a>15 Object类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 概述：  1.所有类的祖宗，自定义类乜有父类，那么直接继承Object,如果有父类，那么间接继承Object</span><br><span class="line"> *         2.Object多态：做方法参数或者返回值时，可以指向任何对象</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *  方法 ： 1.getClass  返回引用中存储的实际对象类型</span><br><span class="line"> *          2.hashCode: (1)返回该对象的十进制的哈希码值</span><br><span class="line"> *                      （2）哈希算法根据对象的地址或字符串或数字计算出来的int类型的数值</span><br><span class="line"> *                      （3）哈希码并不唯一，可保证相同对象返回相同哈希码，尽量保障不同对象返回不同哈希码</span><br><span class="line"> *          3.toString: (1)返回该对象的字符串表示（表现形式）</span><br><span class="line"> *                      （2）可以根据程序需求覆盖该方法，如：展示对象各个属性值</span><br><span class="line"> *          4.equals():   可以判断两个对象是否相同</span><br><span class="line"> *          5.finalize(): (1)当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象，进入回收队列</span><br><span class="line"> *          ·             （2）垃圾对象 --- 没有有效引用指向此对象时，即为垃圾对象</span><br><span class="line"> *                          （3）垃圾回收： 有GC销毁垃圾对象，释放数据存储空间</span><br><span class="line"> *                          （4）自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象</span><br><span class="line"> *                          （5）手动回收机制，使用System.gc()，通知JVM进行垃圾回收</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Object1 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws NoSuchFieldException &#123;</span><br><span class="line">        Object1 o1 = new Object1();</span><br><span class="line">        Class&lt;? extends Object1&gt; aClass = o1.getClass();</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">        String name = aClass.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String filedTypeName = aClass.getField(&quot;b&quot;).getType().getName();</span><br><span class="line">        System.out.println(&quot;b的类型&quot;+filedTypeName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void aa()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-1-应用的分类"><a href="#15-1-应用的分类" class="headerlink" title="15.1 应用的分类"></a>15.1 应用的分类</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672998345117.png" alt="1672998345117"></p>
<h2 id="15-2-x3D-x3D-与-equals的区别"><a href="#15-2-x3D-x3D-与-equals的区别" class="headerlink" title="15.2 &#x3D;&#x3D; 与 equals的区别"></a>15.2 &#x3D;&#x3D; 与 equals的区别</h2><ul>
<li>在Object底层中，&#x3D;&#x3D; 和 equals没有区别，都是使用&#x3D;&#x3D;进行判断，比较的是两个对象的地址值</li>
<li>在一些常用的类中，比如String等类，对equals进行了重写，之后equals比较的为实际值</li>
<li>如果自己定义的类，需要比较类中成员是否相等，需要对equals进行重写</li>
</ul>
<h1 id="16-包装类"><a href="#16-包装类" class="headerlink" title="16 包装类"></a>16 包装类</h1><ol>
<li>类 属性和方法 对象 调用方法 方法调用方法</li>
<li>继承 接口 多态</li>
<li>if for while</li>
<li>三层结构</li>
<li>dao  &#x3D;&#x3D;》 IO 文件</li>
<li>server</li>
<li>controller &#x3D;&#x3D;&gt; test测试</li>
</ol>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673227287802.png" alt="1673227287802"></p>
<ul>
<li><p>概念 </p>
<ul>
<li>基本数据类型所对应的引用数据类型</li>
<li>Object可统一所有数据，包装类的默认值是null</li>
</ul>
</li>
<li><p>装箱拆箱  </p>
<ul>
<li>JDK 5.0之后，自动装箱，拆箱，基本数据类型和包装类自动转换</li>
<li>如果有，可以采用parseXX和valueOf</li>
<li>注意，需保证类型兼容，否则抛出NumberFormatException异常</li>
<li>Java预先创建了256个常用的整数包装类型对象。（-128  ~ 127）的常数在实际应用当中，对已经创建的对象进行复用，节约内存效果明显。</li>
</ul>
</li>
<li><p>parseInt  将String类型转换为基本数据类型。</p>
</li>
<li><p>valueOf   将基本数据类型转换为String类型</p>
</li>
</ul>
<h1 id="17-String类"><a href="#17-String类" class="headerlink" title="17 String类"></a>17 String类</h1><h2 id="17-1-说明"><a href="#17-1-说明" class="headerlink" title="17.1 说明"></a>17.1 说明</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673244235423.png" alt="1673244235423"></p>
<h2 id="17-2-代码"><a href="#17-2-代码" class="headerlink" title="17.2 代码"></a>17.2 代码</h2><ul>
<li><ol>
<li>charAt() 根据下标获取字符</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//      1.  charAt()  根据下标获取字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span><span class="string">&quot;1ddg34tge4&quot;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str1.charAt(<span class="number">3</span>);</span><br><span class="line">        System.out.println(c);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>判断当前字符串是否包含str contains()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;345&quot;</span>;</span><br><span class="line">System.out.println(str1.contains(str2));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>将字符串转化为数组</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span>  <span class="operator">=</span> <span class="string">&quot;1fft356&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] array = str3.toCharArray();</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>查找str第一次出现的下标，存在，则返回该下标，否则，则返回-1</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查找str第一次出现的下标，存在，则返回该下标，否则，则返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;300dfgj2393&quot;</span>;</span><br><span class="line">        System.out.println(str4.indexOf(<span class="string">&quot;d34&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="5">
<li>返回字符串的长度 length()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回字符串的长度 length()</span></span><br><span class="line">str4.length();</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="6">
<li>去掉字符串前后的空格 trim</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        去掉字符串前后的空格</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot; dfas32 &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> str5.trim();</span><br><span class="line">        System.out.println(trim);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="7">
<li>将小写字母转换为大写字母</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        将小写转换成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="string">&quot;efsdt&quot;</span>;</span><br><span class="line">        System.out.println(str6.toUpperCase());</span><br><span class="line"><span class="comment">// 将大写字母转化为小写</span></span><br><span class="line">        str6.toLowerCase();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="8">
<li>判断是否以str开头  &#x2F;  是否以str结尾</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        是否以str开头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str7</span> <span class="operator">=</span> <span class="string">&quot;132fyerty&quot;</span>;</span><br><span class="line">        System.out.println(str7.startsWith(<span class="string">&quot;133e&quot;</span>));</span><br><span class="line"><span class="comment">//        是否以str结尾</span></span><br><span class="line">        System.out.println(str7.endsWith(<span class="string">&quot;y&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="9">
<li>将字符串替换为新字符串</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        将字符串替换为新字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str8</span> <span class="operator">=</span> <span class="string">&quot;1,t,6,rfey,7,ds&quot;</span>;</span><br><span class="line">        System.out.println(str8.replace(<span class="string">&quot;,6&quot;</span>, <span class="string">&quot;s&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="10">
<li>根据str做拆分</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        根据str做拆分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str9</span> <span class="operator">=</span> <span class="string">&quot;2/443/3/fad/3/d&quot;</span>;</span><br><span class="line">        String[] ss = str9.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(ss));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="11">
<li>在字符串中截取出来一个字符串</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    在字符串中截取出来一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str10</span> <span class="operator">=</span> <span class="string">&quot;er34t54rrf2&quot;</span>;</span><br><span class="line">        System.out.println(str10.substring(<span class="number">4</span>));</span><br><span class="line">        System.out.println(str10.substring(<span class="number">3</span>, <span class="number">8</span>));</span><br></pre></td></tr></table></figure>

<h1 id="18-可变字符串"><a href="#18-可变字符串" class="headerlink" title="18 可变字符串"></a>18 可变字符串</h1><h2 id="18-1-概念："><a href="#18-1-概念：" class="headerlink" title="18.1 概念："></a>18.1 概念：</h2><ul>
<li>可在内存中创建可变的缓存空间，存储频繁改变的字符串</li>
</ul>
<h2 id="18-2-两个类："><a href="#18-2-两个类：" class="headerlink" title="18.2 两个类："></a>18.2 两个类：</h2><ul>
<li><p>Java中提供了两个字符串类：</p>
<ul>
<li>StringBuilder：可变字符串，JDK 1.5提供，运行效率快，线程不安全</li>
<li>StringBuffer: 可变长字符串，JDK1.0提供，运行效率慢，线程安全</li>
<li>这两个类中方法和属性完全一致</li>
</ul>
</li>
<li><ol>
<li>追加内容 append()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//追加内容</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append();</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>将指定字符串插入此序列中</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将指定字符串插入此序列中</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.insert(插入的位置，插入的内容);  </span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>delete() 移出此序列的字符串中的字符</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移出此序列的字符串中的字符</span></span><br><span class="line"><span class="comment">// delete(开始下标，结束下标+1)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.delete()</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>replace() 使用给定字符串替换此序列的子字符串的字符，start开始位置，end结束位置</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); </span><br><span class="line">build.replace(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&quot;iii&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="5">
<li>返回长度（字符数）</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> build.length();</span><br></pre></td></tr></table></figure>

<h1 id="19-小数的计算"><a href="#19-小数的计算" class="headerlink" title="19 小数的计算"></a>19 小数的计算</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673253618875.png" alt="1673253618875"></p>
<ul>
<li>BigDeicmal<ul>
<li>位置：java.math包中</li>
<li>作用：精确计算浮点数</li>
<li>创建方式：BigDecimal bd &#x3D; new BigDecimal(“1.0”)。</li>
</ul>
</li>
<li>方法名：<ul>
<li>BigDecimal add(BigDecimal bd)      加</li>
<li>BigDecimal subtract(BigDecimal bd)      减</li>
<li>BigDecimal multiply(BigDecimal bd)    乘</li>
<li>BigDecimal divide(BigDecimal db)        除</li>
</ul>
</li>
<li>除法<ul>
<li>divide(BigDecimal bd,int scal,RoundingMode mode)。</li>
<li>参数scale: 指定精确到小数点后几位</li>
<li>参数mode:<ul>
<li>指定小数部分的取舍模式，通常采用四舍五入的模式</li>
<li>取值为BigDecimal.Round_HALE_UP</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="19-1-参数mode选择概述"><a href="#19-1-参数mode选择概述" class="headerlink" title="19.1 参数mode选择概述"></a>19.1 参数mode选择概述</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">八种舍入模式解释如下</span><br><span class="line">1、ROUND<span class="built_in">_</span>UP</span><br><span class="line"></span><br><span class="line">舍入远离零的舍入模式。</span><br><span class="line"></span><br><span class="line">在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会减少计算值的大小。</span><br><span class="line"></span><br><span class="line">2、ROUND<span class="built_in">_</span>DOWN</span><br><span class="line"></span><br><span class="line">接近零的舍入模式。</span><br><span class="line"></span><br><span class="line">在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会增加计算值的大小。</span><br><span class="line"></span><br><span class="line">3、ROUND<span class="built_in">_</span>CEILING</span><br><span class="line"></span><br><span class="line">接近正无穷大的舍入模式。</span><br><span class="line"></span><br><span class="line">如果 BigDecimal 为正，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;</span><br><span class="line"></span><br><span class="line">如果为负，则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会减少计算值。</span><br><span class="line"></span><br><span class="line">4、ROUND<span class="built_in">_</span>FLOOR</span><br><span class="line"></span><br><span class="line">接近负无穷大的舍入模式。</span><br><span class="line"></span><br><span class="line">如果 BigDecimal 为正，则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同;</span><br><span class="line"></span><br><span class="line">如果为负，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会增加计算值。</span><br><span class="line"></span><br><span class="line">5、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>UP</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class="line"></span><br><span class="line">如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;否则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</span><br><span class="line"></span><br><span class="line">6、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>DOWN</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。</span><br><span class="line"></span><br><span class="line">如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;否则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同(五舍六入)。</span><br><span class="line"></span><br><span class="line">7、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>EVEN</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</span><br><span class="line"></span><br><span class="line">如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>UP 相同;</span><br><span class="line"></span><br><span class="line">如果为偶数，则舍入行为与 ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。</span><br><span class="line"></span><br><span class="line">此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。</span><br><span class="line"></span><br><span class="line">如果前一位为奇数，则入位，否则舍去。</span><br><span class="line"></span><br><span class="line">以下例子为保留小数点1位，那么这种舍入方式下的结果。</span><br><span class="line"></span><br><span class="line">1.15&gt;1.2 1.25&gt;1.2</span><br><span class="line"></span><br><span class="line">8、ROUND<span class="built_in">_</span>UNNECESSARY</span><br><span class="line">断言请求的操作具有精确的结果，因此不需要舍入。</span><br><span class="line">如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自学部分！</span><br></pre></td></tr></table></figure>



<h1 id="20-日期类"><a href="#20-日期类" class="headerlink" title="20 日期类"></a>20 日期类</h1><h2 id="20-1-Date"><a href="#20-1-Date" class="headerlink" title="20.1 Date"></a>20.1 Date</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673254384462.png" alt="1673254384462"></p>
<ul>
<li><p>Date表示特定的瞬间，精确到毫秒</p>
</li>
<li><p>时间单位</p>
<ul>
<li>1秒：1000毫秒</li>
<li>1毫秒：1000徽章秒</li>
<li>1微秒：1000纳秒</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li>xx.getTime()              获取当前时间的毫秒数</li>
<li>new Date(毫秒数)      创建日期对象</li>
<li>date1.before(date2)   比较两个日期</li>
<li>date1.after(date2)     比较两个日期</li>
<li>date1.compareTo(date2)   比较两个日期</li>
<li>date1.equals(date2)      比较两个日期</li>
</ul>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        当前毫秒数</span></span><br><span class="line">System.out.println(currDate.getTime());</span><br><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line"><span class="comment">//        比较两个日期</span></span><br><span class="line">System.out.println(d1.before(d2));</span><br><span class="line">System.out.println(d1.after(d2));</span><br></pre></td></tr></table></figure>

<h2 id="20-2-Calendar"><a href="#20-2-Calendar" class="headerlink" title="20.2 Calendar"></a>20.2 Calendar</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673313213812.png" alt="1673313213812"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="comment">//        这是本周的第几天，周日为第一天</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是一周的第&quot;</span>+c.get(Calendar.DAY_OF_WEEK)+<span class="string">&quot;天&quot;</span>);</span><br><span class="line"><span class="comment">//        这是本月的第几天</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是一月的第&quot;</span>+c.get(Calendar.DAY_OF_MONTH)+<span class="string">&quot;天&quot;</span>);</span><br><span class="line"><span class="comment">//        获取是哪一年信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今年是&quot;</span>+c.get(Calendar.SUNDAY)+<span class="string">&quot;年&quot;</span>);</span><br><span class="line"><span class="comment">//        Calendaar.year  今年是哪一年</span></span><br><span class="line">        System.out.println(c.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">//        Calendar.Month   这是今年的第几个月，从0开始</span></span><br><span class="line">        System.out.println(c.get(Calendar.MONTH));</span><br><span class="line"><span class="comment">//        Calendar.Date    这是本月的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DATE));</span><br><span class="line"><span class="comment">//        Calendar.DAY_OF_MONTH  获取本月的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line"><span class="comment">//        Calendar.DAY_OF_WEEK   获取本周的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_WEEK));</span><br><span class="line"><span class="comment">//         Calendar.DAY_OF_WEEK_IN_MONTH  指示当前月中的第几个星期。</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_WEEK_IN_MONTH));</span><br><span class="line"><span class="comment">//      Calendar.DAY_OF_YEAR     表示一年中的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取前一天的信息</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======Calendar ======&gt;  Date==================&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">        System.out.println(time.toLocaleString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">		<span class="comment">//获取本月中前一天的信息</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.get(Calendar.DAY_OF_MONTH));</span><br><span class="line"></span><br><span class="line">·		<span class="comment">//获取本月中后一天·的信息</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取上个月的信息</span></span><br><span class="line">        c2.add(Calendar.MONTH,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line">       <span class="comment">//获取下个月的信息</span></span><br><span class="line">        c2.add(Calendar.YEAR,<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        30分钟后</span></span><br><span class="line">        c2.add(Calendar.MINUTE,<span class="number">30</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeInMillis</span> <span class="operator">=</span> c2.getTimeInMillis();</span><br><span class="line"><span class="comment">//        第一次getTime获取的是Date类型，第二次getTime获取的是long类型毫秒数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> c2.getTime().getTime();</span><br><span class="line">        System.out.println(timeInMillis == time1);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="20-3-SimpleDateFormat-格式化日期"><a href="#20-3-SimpleDateFormat-格式化日期" class="headerlink" title="20.3 SimpleDateFormat 格式化日期"></a>20.3 SimpleDateFormat 格式化日期</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673315018410.png" alt="1673315018410"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println(d1.toLocaleString());</span><br><span class="line"><span class="comment">//        指定日期格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        把日期对象 ==》 指定格式的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(d1);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        把字符串 == 》 Date  字符串满足格式要求</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-01-10 10:40:10&quot;</span>);</span><br><span class="line">        System.out.println(parse.toLocaleString());</span><br></pre></td></tr></table></figure>

<h1 id="21-System"><a href="#21-System" class="headerlink" title="21 System"></a>21 System</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673315501923.png" alt="1673315501923"></p>
<h1 id="22-集合-容器"><a href="#22-集合-容器" class="headerlink" title="22 集合 容器"></a>22 集合 容器</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321077517.png" alt="1673321077517"></p>
<h2 id="22-1-List"><a href="#22-1-List" class="headerlink" title="22.1 List"></a>22.1 List</h2><h3 id="22-1-1-ArrayList"><a href="#22-1-1-ArrayList" class="headerlink" title="22.1.1 ArrayList"></a>22.1.1 ArrayList</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321395522-1673330603391.png" alt="1673321395522"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321698758.png" alt="1673321698758"></p>
<h4 id="2-1-1-1-插入元素源码"><a href="#2-1-1-1-插入元素源码" class="headerlink" title="2.1.1.1 插入元素源码"></a>2.1.1.1 插入元素源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-2-删除元素源码"><a href="#2-1-1-2-删除元素源码" class="headerlink" title="2.1.1.2 删除元素源码"></a>2.1.1.2 删除元素源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">          System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                           numMoved);</span><br><span class="line">      elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>add()   添加一个对象数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">list.add(<span class="number">11</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li>addAll() 将一个集合中的所有对象添加到此集合汇总</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list1.add(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">list.addAll(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>clean()  清空此集合中的所有对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;========清除clear========&quot;</span>);</span><br><span class="line">list.clear();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<ul>
<li>contains()    检查此集合中是否包含o对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;contains&quot;</span>);</span><br><span class="line"><span class="type">String</span>  <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;yyy&quot;</span>;</span><br><span class="line">System.out.println(list1.contains(s));</span><br></pre></td></tr></table></figure>

<ul>
<li>equals()   比较此集合是否与对象相等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=========equals====&quot;</span>);</span><br><span class="line">System.out.println(list.equals(list1));</span><br></pre></td></tr></table></figure>

<ul>
<li>判断此集合是否为空</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;====isEmpty:是否为空&quot;</span>);</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> list1.isEmpty();</span><br><span class="line">       System.out.println(empty);</span><br></pre></td></tr></table></figure>

<ul>
<li>remove()   在此集合中移出o对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;====remove========&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">list4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(<span class="number">1</span>);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        System.out.println(list4);</span><br><span class="line"><span class="comment">//     删除指定的元素，只删除一个</span></span><br><span class="line">        list4.remove(ss);</span><br><span class="line">        System.out.println(list4);</span><br></pre></td></tr></table></figure>

<ul>
<li>size()   返回此集合中的元素个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.size();</span><br></pre></td></tr></table></figure>

<ul>
<li>将此集合转化成数组形式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] objects = list.toArray();</span><br></pre></td></tr></table></figure>

<h3 id="22-1-2-LinkedList"><a href="#22-1-2-LinkedList" class="headerlink" title="22.1.2 LinkedList"></a>22.1.2 LinkedList</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673336272586.png" alt="1673336272586"></p>
<h4 id="22-1-2-1代码实现"><a href="#22-1-2-1代码实现" class="headerlink" title="22.1.2.1代码实现"></a>22.1.2.1代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        list1.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        list1.add(<span class="number">11</span>);</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class="line">            System.out.println(list1.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        迭代器循环</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line"><span class="comment">//        插入</span></span><br><span class="line">        list1.add(<span class="number">1</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        长度</span></span><br><span class="line">        System.out.println(list1.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list1.remove()  删除</span></span><br><span class="line">        list1.remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================Vector&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br></pre></td></tr></table></figure>



<h3 id="22-1-3-Vector"><a href="#22-1-3-Vector" class="headerlink" title="22.1.3 Vector"></a>22.1.3 Vector</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673337193299.png" alt="1673337193299"></p>
<h3 id="22-1-4-ArrayList、LinkedList、Vector的优点和区别"><a href="#22-1-4-ArrayList、LinkedList、Vector的优点和区别" class="headerlink" title="22.1.4: ArrayList、LinkedList、Vector的优点和区别"></a>22.1.4: ArrayList、LinkedList、Vector的优点和区别</h3><h4 id="22-1-4-0-list"><a href="#22-1-4-0-list" class="headerlink" title="22.1.4.0 list"></a>22.1.4.0 list</h4><ul>
<li>可重复添加，有序</li>
</ul>
<h4 id="22-1-4-1-ArrayList的优缺点"><a href="#22-1-4-1-ArrayList的优缺点" class="headerlink" title="22.1.4.1 ArrayList的优缺点"></a>22.1.4.1 ArrayList的优缺点</h4><ul>
<li>数组结构，底层使用顺序表进行编写，</li>
<li>默认初始化长度为10，空间不够后，扩容为原来的1.5倍</li>
<li>查询快，增删慢</li>
<li>线程不安全</li>
</ul>
<h4 id="22-1-4-2-LinkedList的优缺点"><a href="#22-1-4-2-LinkedList的优缺点" class="headerlink" title="22.1.4.2 LinkedList的优缺点"></a>22.1.4.2 LinkedList的优缺点</h4><ul>
<li>底层使用链表结构实现</li>
<li>LinkedList使用双向链表实现，增加和删除较快，查询慢</li>
<li>可以有效利用内存空间</li>
<li>线程不安全</li>
</ul>
<h4 id="22-1-4-3-Vector的优缺点"><a href="#22-1-4-3-Vector的优缺点" class="headerlink" title="22.1.4.3 Vector的优缺点"></a>22.1.4.3 Vector的优缺点</h4><ul>
<li>线程安全，运行效率比ArrayList慢</li>
<li>默认初始化长度为10，默认扩容为原来的2倍，查询速度及慢</li>
<li>不常用</li>
</ul>
<h2 id="22-2-Set集合"><a href="#22-2-Set集合" class="headerlink" title="22.2 Set集合"></a>22.2 Set集合</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673343065185.png" alt="1673343065185"></p>
<h3 id="22-2-0-set"><a href="#22-2-0-set" class="headerlink" title="22.2.0 set()"></a>22.2.0 set()</h3><ul>
<li>没有下标，不能重复，无序</li>
</ul>
<h3 id="22-2-1-HashSet"><a href="#22-2-1-HashSet" class="headerlink" title="22.2.1 HashSet()"></a>22.2.1 HashSet()</h3><ul>
<li>基于HashCode实现元素不重复</li>
<li>当存入元素的哈希码相同时，会调用&#x3D;&#x3D;或equals进行确认，结果为true,拒绝猴子存入</li>
<li>采用的哈希表（散列表） 数组+链表+树</li>
</ul>
<ol>
<li>根据hashcode计算保存的位置，如果此位置为空，则直接保存，如果不为空，则执行第二步</li>
<li>在执行equals方法，如果equals方法为true,则认为是重复，否则，形成链表。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set : 没有下标， 无素不可重复， 没有顺序</span></span><br><span class="line">       <span class="comment">//1多态</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="number">1</span>);</span><br><span class="line">       set1.add(<span class="number">2</span>);</span><br><span class="line">       set1.add(<span class="number">3</span>);</span><br><span class="line">       set1.add(<span class="number">99</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line"></span><br><span class="line">       set1.remove(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line">       <span class="comment">//set1.clear();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//循环</span></span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set1.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       System.out.println( <span class="string">&quot;size=&quot;</span>+ set1.size());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object o : set1) &#123;</span><br><span class="line">           System.out.println(o);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="22-2-2-LinkedSet"><a href="#22-2-2-LinkedSet" class="headerlink" title="22.2.2 LinkedSet()"></a>22.2.2 LinkedSet()</h3><ul>
<li>链表实现的HashSet,根据链表进行存储，即可保留元素的插入顺序</li>
<li>set集合虽然无序，但是LinkedSet采用链表方式存储，保留了元素的插入顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">       set1.add(<span class="number">9</span>);</span><br><span class="line">       set1.add(<span class="number">90</span>);</span><br><span class="line">       set1.add(<span class="number">0</span>);</span><br><span class="line">       set1.add(<span class="number">11</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line">       <span class="keyword">for</span> (Integer integer : set1) &#123;</span><br><span class="line">           System.out.println(integer);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Iterator&lt;Integer&gt; iterator = set1.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="22-2-3-TreeSet"><a href="#22-2-3-TreeSet" class="headerlink" title="22.2.3 TreeSet()"></a>22.2.3 TreeSet()</h3><ul>
<li>基于排列实现元素不重复</li>
<li>实现了SortedSet接口，对集合元素自动排序</li>
<li>排序<ul>
<li>排序一：<ul>
<li>元素对象的类型必须实现Comparable接口，指定排序规则（自然排序）</li>
<li>通过CompareTo方法确定是否为重复元素</li>
</ul>
</li>
<li>排序二：<ul>
<li>Comparator接口：</li>
<li>比较器，实现定制比较</li>
<li>compare(o1,o2)方法的返回值0，表示重复</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;User&gt; ct1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> o1.id == o2.id ? <span class="number">0</span> : o1.id &gt; o2.id ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">18</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">9</span>);</span><br><span class="line">       <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(ct1);</span><br><span class="line">       set.add(u1);</span><br><span class="line">       set.add(u2);</span><br><span class="line">       set.add(u3);</span><br><span class="line">       System.out.println(set);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;User1&gt;  ct = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User1&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User1 o1, User1 o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>  o1.id &gt; o2.id ? <span class="number">1</span> : (o1.id==o2.id) ?<span class="number">0</span>: -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="22-3-Map集合"><a href="#22-3-Map集合" class="headerlink" title="22.3 Map集合"></a>22.3 Map集合</h2><ul>
<li>用于存储任意键值对（key - value）</li>
<li>键：无下标，不可以重复，唯一 ，使用set集合存储</li>
<li>值：无下标，可以重复</li>
<li>Map集合<ul>
<li>HashMap()集合</li>
<li>HashTable()集合<ul>
<li>Proerties()集合</li>
</ul>
</li>
<li>SortedMsp()集合<ul>
<li>TreeMpa()集合</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>	</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400164901.png" alt="1673400164901"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400217316.png" alt="1673400217316"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400228045.png" alt="1673400228045"></p>
<h3 id="22-3-1-HashMap"><a href="#22-3-1-HashMap" class="headerlink" title="22.3.1 HashMap()"></a>22.3.1 HashMap()</h3><ul>
<li>jkk1.2 版本，线程不安全，运行效率快</li>
<li>运行null,作为key或是value</li>
<li>存储结构：哈希表</li>
</ul>
<ol>
<li>添加： put(键，值)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">1001</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除：remove(键&#x2F;下标)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(键)    或者</span><br><span class="line">map.remove(键，值)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改： put(键，值)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果添加的键相同的话，执行的就是修改操作</span></span><br><span class="line">map.put(键，值);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>遍历</p>
<ol>
<li><p>获取key集合</p>
<ol>
<li><p>增强for循环遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">       <span class="keyword">for</span>(String key:keys)&#123;</span><br><span class="line">           System.out.println(map.get(key));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代器循环遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">Iterator&lt;String&gt; iterator = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hashNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>获取entry对象</p>
<ol>
<li><p>增强for循环</p>
<ol>
<li><pre><code class="java">Set&lt;Map.Entry&lt;String,String&gt;&gt; set = map.entrySet();
     for(Map.Entry&lt;String,String&gt; entry:set)&#123;
         System.out.println(entry.getKey());
         System.out.println(entry.getValue());
     &#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 迭代器循环</span><br><span class="line"></span><br><span class="line">   1. ```java</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator1 = set.iterator();</span><br><span class="line">            while (iterator1.hasNext())&#123;</span><br><span class="line">                Map.Entry&lt;String, String&gt; entry = iterator1.next();</span><br><span class="line">                System.out.println(entry.getKey());</span><br><span class="line">                System.out.println(entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
<li><p>可以获取所有值</p>
<ol>
<li><pre><code class="java">Collection&lt;String&gt; values = map.values();
       System.out.println(values);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 22.3.2 TreeMap()集合</span><br><span class="line"></span><br><span class="line">+ 和TreeSet类似,基于key值排列不重复</span><br><span class="line"></span><br><span class="line">+ 排序方法分为自然派系和定制排序</span><br><span class="line"></span><br><span class="line">+ 排序</span><br><span class="line"></span><br><span class="line">  + 自然排序：</span><br><span class="line">    + 元素对象的类型必须实现Comparable接口，指定排序规则（自然排序）</span><br><span class="line">    + 通过CompareTo方法确定是否为重复元素</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  //自然排序代码</span><br><span class="line">    @Override</span><br><span class="line">      public int compareTo(User u) &#123;</span><br><span class="line">          int name = this.name.compareTo(u.name);</span><br><span class="line">          int id = Integer.compare(this.id,u.id);</span><br><span class="line">          int age = Integer.compare(this.age,u.age);</span><br><span class="line">          if(id != 0)&#123;</span><br><span class="line">              return id;</span><br><span class="line">          &#125;else if(age != 0)&#123;</span><br><span class="line">              return age;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              return name;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;  </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li>定制排序：<ul>
<li>Comparator接口：</li>
<li>比较器，实现定制比较</li>
<li>compare(o1,o2)方法的返回值0，表示重复</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制排序代码</span></span><br><span class="line">    Comparator&lt;User&gt; ct = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> o1.name.compareTo(o2.name);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.compare(o1.age, o2.age);</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.compare(o1.id, o2.id);</span><br><span class="line">                <span class="keyword">if</span>(id != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> id;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> age;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>



<h3 id="22-3-3-HashTable-集合"><a href="#22-3-3-HashTable-集合" class="headerlink" title="22.3.3 HashTable() 集合"></a>22.3.3 HashTable() 集合</h3><ul>
<li>jdk1.0 版本,线程安全,运行效率慢,不允许null作为key或value</li>
</ul>
<h2 id="22-4-Collections-工具类"><a href="#22-4-Collections-工具类" class="headerlink" title="22.4 Collections 工具类"></a>22.4 Collections 工具类</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673342191449.png" alt="1673342191449"></p>
<ul>
<li>reverse(List&lt;?&gt; list)   反转集合中元素的顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        反转</span></span><br><span class="line">        Collections.reverse(list1);</span><br><span class="line">        System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>shuffle(List&lt;?&gt; list)    随机重置集合元素的顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.shuffle(list1);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>sort(List&lt;?&gt; list)    升序排序（元素类型必须实现comparable接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list1);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>binarySearch(list,T key)   二分查找</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(list1, <span class="number">299</span>);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure>



<h2 id="22-5-泛型"><a href="#22-5-泛型" class="headerlink" title="22.5 泛型"></a>22.5 泛型</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673337398781.png" alt="1673337398781"></p>
<ul>
<li>在类上用泛型： 属性，方法的参数和返回值都可以带上泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &lt;T,V&gt;&#123;</span><br><span class="line">    T a;</span><br><span class="line">    V b;</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">sout</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test1&lt;String,List&gt; t = <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        t.a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        t.list.add(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">yyy</span> <span class="operator">=</span> t.sout(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">a</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类实现被实现的类时，被实现类可以指定泛型类型，不指定的话，重写的方法类型默认为Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> <span class="keyword">implements</span> <span class="title class_">Test2</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果被实现类的泛型类型依然为泛型，那么实现类在重写被实现类的方法时，需要带上泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Test2</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">a</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test4&lt;Double&gt; d = <span class="keyword">new</span> <span class="title class_">Test4</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在方法上单独加泛型，必须要有指定的地方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;T <span class="title function_">a</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>泛型修饰集合</p>
<ul>
<li>参数化类型、类型安全的集合、强制集合元素的类型必须一致</li>
<li>特点<ul>
<li>编译时即可检查，而非运行时抛出异常</li>
<li>访问时，不必类型转换（拆箱）</li>
<li>不同泛型之间饮用不能相互赋值，泛型不存在多条</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="23-异常"><a href="#23-异常" class="headerlink" title="23 异常"></a>23 异常</h1><h2 id="23-1-异常的分类"><a href="#23-1-异常的分类" class="headerlink" title="23.1 异常的分类"></a>23.1 异常的分类</h2><ul>
<li>概念:<ul>
<li>程序在运行过程中出现的特殊情况</li>
</ul>
</li>
<li>必要性:<ul>
<li>任何程序都可能存在大量的位置问题,错误</li>
<li>如果不对这些额问题进行正确处理,则可能导致程序的中断,造成不必要的损失</li>
</ul>
</li>
<li>分类:<ul>
<li>错误<ul>
<li>Error:JVM  &#x2F; 硬件&#x2F;执行逻辑错误&#x2F;不能手动处理</li>
<li>常见错误: StackOverflowError&#x2F; OutOfMemoryError等</li>
<li>StackOverflowError: 如果是由于逻辑代码问题,需要改正,比如死循环</li>
</ul>
</li>
<li>异常:<ul>
<li>Exception:程序在运行和配置中产生的问题,可处理</li>
<li>RuntimeException: 运行时异常,可处理,可不处理</li>
<li>CheckedException: 检查时异常,必须处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667181501165.png" alt="1667181501165"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667184253962.png" alt="1667184253962"></p>
<h2 id="23-2-常见的异常举例"><a href="#23-2-常见的异常举例" class="headerlink" title="23.2 常见的异常举例"></a>23.2 常见的异常举例</h2><p><img src="F:\java学习\千峰\个人总结\java\java.assets\1667181560237.png" alt="1667181560237"></p>
<h1 id="24-IO流"><a href="#24-IO流" class="headerlink" title="24 IO流"></a>24 IO流</h1><ul>
<li><pre><code class="tex">1.对于文本文件（txt,.java,.c,.cpp），使用字符流处理
2.对于非文本文件（jpg,mp3,mp4,avi,doc,ppt,...）使用字节流处理
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  /*W</span><br><span class="line">  一：流的分类：</span><br><span class="line">  1.操作数据单位：字节流、字符流</span><br><span class="line">  2.数据的流行：输入流、输出流</span><br><span class="line">  3.流的角色：节点流和处理流</span><br><span class="line">  </span><br><span class="line">  二：流的体系结构：</span><br><span class="line">  抽象基类：               节点流(或文件流)                   缓冲流（或处理流的一种）</span><br><span class="line">  InputStream         FileInputStream                 BufferedInputStream</span><br><span class="line">  OutputStream        FileOutputStream                BufferedOutputStream</span><br><span class="line">  Reader              FileRead                        BufferedReader</span><br><span class="line">  Writer              FileWriter                      BufferedWriter</span><br><span class="line">   */</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667200569515.png" alt="1667200569515"></p>
<h2 id="24-1-字节流："><a href="#24-1-字节流：" class="headerlink" title="24.1 字节流："></a>24.1 字节流：</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667202757485.png" alt="1667202757485"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667203628884.png" alt="1667203628884"></p>
<h3 id="24-1-1-文件字节输入流FileInputStream"><a href="#24-1-1-文件字节输入流FileInputStream" class="headerlink" title="24.1.1 文件字节输入流FileInputStream"></a>24.1.1 文件字节输入流FileInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStream1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        a();</span></span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    字节输入流测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        1.多态字节流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.获取里面的内容  字节: === &gt; 数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//        一个字节一个字节的读,最后没有的时候返回-1</span></span><br><span class="line">        <span class="keyword">while</span> ((c = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-1-2-FileOutputStream-文件字节输出流"><a href="#24-1-2-FileOutputStream-文件字节输出流" class="headerlink" title="24.1.2 FileOutputStream 文件字节输出流"></a>24.1.2 FileOutputStream 文件字节输出流</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//            os.write(&#x27;c&#x27;);</span></span><br><span class="line"><span class="comment">//            os.write(&#x27;\n&#x27;);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello,worlf&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">            os.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            os.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-1-3-练习-完成文件的复制"><a href="#24-1-3-练习-完成文件的复制" class="headerlink" title="24.1.3 练习,完成文件的复制"></a>24.1.3 练习,完成文件的复制</h3><h4 id="24-1-3-1-复制一"><a href="#24-1-3-1-复制一" class="headerlink" title="24.1.3.1 复制一:"></a>24.1.3.1 复制一:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String url,String dUrl)</span>&#123;</span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(url);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dUrl);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!= -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer);</span><br><span class="line">                bos.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="24-1-3-2-final复制"><a href="#24-1-3-2-final复制" class="headerlink" title="24.1.3.2 final复制"></a>24.1.3.2 final复制</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667264546258.png" alt="1667264546258"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyImage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CopyImage</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyImage</span>();</span><br><span class="line">        System.out.println(c.copy(<span class="string">&quot;F:\\20.jpg&quot;</span>, <span class="string">&quot;F:\\1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Results <span class="title function_">copy</span><span class="params">(String url, String dUrl)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(url == <span class="literal">null</span> || dUrl == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">false</span>,<span class="number">1001</span>,<span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> url.substring(url.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> dUrl.substring(<span class="number">0</span>, dUrl.indexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.isEnd(url))&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">          <span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> s.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">          dUrl = substring+replace+<span class="string">&quot;_&quot;</span>+oldName;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            System.out.println(dUrl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            初始化</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(url);</span><br><span class="line">                bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">                os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dUrl);</span><br><span class="line">                bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">true</span>,<span class="number">1002</span>,<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis!= <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        os.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">false</span>,<span class="number">1003</span>,<span class="string">&quot;其他异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;jpg&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;png&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(str != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> str.substring(str.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (list.contains(substring)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-2-字符流-文本"><a href="#24-2-字符流-文本" class="headerlink" title="24.2 字符流(文本)"></a>24.2 字符流(文本)</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667272749316-1673672151203.png" alt="1667272749316"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667272739635-1673672151203.png" alt="1667272739635"></p>
<h3 id="24-2-1-最终版字符写流-重点"><a href="#24-2-1-最终版字符写流-重点" class="headerlink" title="24.2.1 最终版字符写流(重点)"></a>24.2.1 最终版字符写流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>();</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-2-2-最终版字符读流-重点"><a href="#24-2-2-最终版字符读流-重点" class="headerlink" title="24.2.2 最终版字符读流(重点)"></a>24.2.2 最终版字符读流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            char[] c = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(c))!= -1)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(new String(c,0,len));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">while</span> ((s =  br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-2-3-最终版字符写流-重点"><a href="#24-2-3-最终版字符写流-重点" class="headerlink" title="24.2.3 最终版字符写流(重点)"></a>24.2.3 最终版字符写流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;F:\\1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">            bw.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bw.write(<span class="string">&quot;你好,世界&quot;</span>);</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-3-对象字节流"><a href="#24-3-对象字节流" class="headerlink" title="24.3 对象字节流"></a>24.3 对象字节流</h2><h3 id="24-3-1-对象字节输入流-ObjectOutputStream"><a href="#24-3-1-对象字节输入流-ObjectOutputStream" class="headerlink" title="24.3.1 对象字节输入流 ObjectOutputStream"></a>24.3.1 对象字节输入流 ObjectOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTest</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        Io流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\2.bin&quot;</span>);</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     2.准备要写的对象</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1002</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-3-2-对象字节输出流-ObjectInputStream"><a href="#24-3-2-对象字节输出流-ObjectInputStream" class="headerlink" title="24.3.2 对象字节输出流 ObjectInputStream"></a>24.3.2 对象字节输出流 ObjectInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\2.bin&quot;</span>);</span><br><span class="line">           ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">           <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) o1;</span><br><span class="line">           <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) o2;</span><br><span class="line">           System.out.println(s1);</span><br><span class="line">           System.out.println(s2);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(ois != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   ois.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   is.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-4-转换流"><a href="#24-4-转换流" class="headerlink" title="24.4 转换流"></a>24.4 转换流</h2><h3 id="24-4-1-字符转换输出流-OutputStreamWriter"><a href="#24-4-1-字符转换输出流-OutputStreamWriter" class="headerlink" title="24.4.1 字符转换输出流 OutputStreamWriter"></a>24.4.1 字符转换输出流 OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">           osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">           bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">               bw.write(<span class="string">&quot;马上过年了&quot;</span>);</span><br><span class="line">              bw.newLine();</span><br><span class="line">              bw.flush();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   bw.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(osw != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   osw.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   os.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-4-2-字符转换输入流-OutputStreamReader"><a href="#24-4-2-字符转换输入流-OutputStreamReader" class="headerlink" title="24.4.2 字符转换输入流 OutputStreamReader"></a>24.4.2 字符转换输入流 OutputStreamReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"><span class="comment">//            char[] chars = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(chars))!= -1)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(new String(chars,0,len));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                isr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-5-打印流"><a href="#24-5-打印流" class="headerlink" title="24.5 打印流"></a>24.5 打印流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;我是xxx&quot;</span>);</span><br><span class="line">            pw.println(<span class="number">1</span>);</span><br><span class="line">            pw.print(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(pw != <span class="literal">null</span>)&#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="25-文件-x2F-目录的类File"><a href="#25-文件-x2F-目录的类File" class="headerlink" title="25 文件&#x2F;目录的类File"></a>25 文件&#x2F;目录的类File</h1><h2 id="25-1-常用方法-重点"><a href="#25-1-常用方法-重点" class="headerlink" title="25.1 常用方法(重点)"></a>25.1 常用方法(重点)</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667293437351-1673673624544.png" alt="1667293437351"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667293455938-1673673624544.png" alt="1667293455938"></p>
<h2 id="25-2-代码实现"><a href="#25-2-代码实现" class="headerlink" title="25.2 代码实现"></a>25.2 代码实现</h2><h3 id="25-2-1-文件操作"><a href="#25-2-1-文件操作" class="headerlink" title="25.2.1 文件操作"></a>25.2.1 文件操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建File对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\2.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        判断文件是否存在  file.exists();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在:&quot;</span>+file.exists());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        如果不存在</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                创建文件</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径：&quot;</span>+file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;路径：&quot;</span>+file.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名：&quot;</span>+file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;父目录：&quot;</span>+file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的长度:&quot;</span>+file.length());</span><br><span class="line"><span class="comment">//        文件的创建日期 file.lastModified()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的创建日期：&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否可写：&quot;</span>+file.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否可读：&quot;</span>+file.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否隐藏：&quot;</span>+file.isHidden());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是文件：&quot;</span>+file.isFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除文件 delete()</span></span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-2-2-目录操作"><a href="#25-2-2-目录操作" class="headerlink" title="25.2.2 目录操作"></a>25.2.2 目录操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\a\\b\\c&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在：&quot;</span>+file.exists());</span><br><span class="line"><span class="comment">//        mkdir 如果需要创建的目录，其父目录不在，则该目录也不会被创建</span></span><br><span class="line"><span class="comment">//        mkdirs 如果需要创建的目录，其父目录不在，则会连同父目录一块创建</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">           file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否是目录&quot;</span>+file.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是文件&quot;</span>+file.isFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        delete()  删除文件或空目录</span></span><br><span class="line"><span class="comment">//        file.delete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="25-3-递归实现-获取文件目录"><a href="#25-3-递归实现-获取文件目录" class="headerlink" title="25.3 递归实现 获取文件目录"></a>25.3 递归实现 获取文件目录</h2><h3 id="25-3-1-方法一"><a href="#25-3-1-方法一" class="headerlink" title="25.3.1 方法一:"></a>25.3.1 方法一:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    用来展示目录下的所有东西</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">showFile</span><span class="params">(String  path)</span>&#123;</span><br><span class="line">        str+=<span class="string">&quot;--&quot;</span>;</span><br><span class="line"><span class="comment">//        1.file</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="comment">//        拿到当前目录下的所有东西： 目录 + 文件</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line"><span class="comment">//        String str = &quot;&quot;;</span></span><br><span class="line">        <span class="keyword">for</span>(File file1: files)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">              showFile(file1.getPath());</span><br><span class="line">          &#125;</span><br><span class="line">            System.out.println(str+file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-3-2-方法二"><a href="#25-3-2-方法二" class="headerlink" title="25.3.2 方法二:"></a>25.3.2 方法二:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFile1</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file1:files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">                showFile1(file1.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str+file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str = str.substring(<span class="number">0</span>,str.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-3-3-方法三"><a href="#25-3-3-方法三" class="headerlink" title="25.3.3 方法三"></a>25.3.3 方法三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFile2</span><span class="params">(String path,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">       str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level ; i++)&#123;</span><br><span class="line">           str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       File[] files = file.listFiles();</span><br><span class="line">       <span class="keyword">for</span>(File file1 : files)&#123;</span><br><span class="line">           <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">               showFile2(file1.getAbsolutePath(),++level);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(str+file1.getName());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="25-4-过滤器-FileFilter-次重点"><a href="#25-4-过滤器-FileFilter-次重点" class="headerlink" title="25.4 过滤器 FileFilter(次重点)"></a>25.4 过滤器 FileFilter(次重点)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilleterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        筛选File</span></span><br><span class="line">        <span class="type">FileFilter</span> <span class="variable">fileFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(pathname.isDirectory())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\a&quot;</span>);</span><br><span class="line">        File[] files = file.listFiles(fileFilter);</span><br><span class="line">        <span class="keyword">for</span>(File file1 : files)&#123;</span><br><span class="line">            System.out.println(file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="25-5-Properties-读取方式"><a href="#25-5-Properties-读取方式" class="headerlink" title="25.5 Properties  读取方式"></a>25.5 Properties  读取方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day13_file&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//        1.创建对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//       2.加载io流</span></span><br><span class="line">           is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day13_file\\QQ.properties&quot;</span>);</span><br><span class="line">           reader = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            pro.load(reader);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            3.获取元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            System.out.println(user+<span class="string">&quot;=&quot;</span>+pass);</span><br><span class="line"></span><br><span class="line">            Set&lt;Object&gt; set = pro.keySet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//            以下为写入</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(str+<span class="string">&quot;\\QQ.properties&quot;</span>);</span><br><span class="line">            <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            pro.setProperty(<span class="string">&quot;111&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            pro.put(<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line">            pro.store(osw,<span class="string">&quot;注释&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(reader != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="26-枚举类"><a href="#26-枚举类" class="headerlink" title="26 枚举类"></a>26 枚举类</h1><h2 id="26-1-枚举定义"><a href="#26-1-枚举定义" class="headerlink" title="26.1 枚举定义"></a>26.1 枚举定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP, <span class="comment">// 上</span></span><br><span class="line">    DOWN, <span class="comment">//下</span></span><br><span class="line">    LEFT, <span class="comment">//左</span></span><br><span class="line">    RIGHT; <span class="comment">//右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="26-2-特点"><a href="#26-2-特点" class="headerlink" title="26.2. 特点"></a>26.2. 特点</h2><p>类用关键字Enum</p>
<p>特殊的常量类</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/image-2023013115013247112.png" alt="image-20230131150132472"></p>
<p>默认构造器是私有的</p>
<p>查看class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP,</span><br><span class="line">    DOWN,</span><br><span class="line">    LEFT,</span><br><span class="line">    RIGHT;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GameEnum</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里边的常量相当于枚举对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP(),</span><br><span class="line">    DOWN(),</span><br><span class="line">    LEFT(),</span><br><span class="line">    RIGHT();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GameEnum</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="符号"><a href="#符号" class="headerlink" title="符号,;"></a>符号,;</h2><p>用逗号分割, 用;结尾</p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则:"></a>命名规则:</h2><p>类名带Enum,常量全部大写,多个单词有_分割</p>
<h2 id="26-3-枚举的应用"><a href="#26-3-枚举的应用" class="headerlink" title="26.3 枚举的应用"></a>26.3 枚举的应用</h2><h3 id="26-3-1-常量"><a href="#26-3-1-常量" class="headerlink" title="26.3.1 常量"></a>26.3.1 常量</h3><h3 id="26-3-2-可以应用到switch当中"><a href="#26-3-2-可以应用到switch当中" class="headerlink" title="26.3.2 可以应用到switch当中"></a>26.3.2 可以应用到switch当中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取里边的常量</span></span><br><span class="line"><span class="type">Test01Enum</span> <span class="variable">e</span> <span class="operator">=</span> Test01Enum.UP;</span><br><span class="line"><span class="keyword">switch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">case</span> UP:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEFT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DOWN:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> RIGHT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SKIP:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-3-有参数的枚举常量对象"><a href="#26-3-3-有参数的枚举常量对象" class="headerlink" title="26.3.3 有参数的枚举常量对象"></a>26.3.3 有参数的枚举常量对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Test03Enum</span> &#123;</span><br><span class="line">    <span class="comment">//四套：  success code msg 信息 整合的对象</span></span><br><span class="line">    SELECT_SUCCESS(<span class="literal">true</span>,<span class="number">1001</span>,<span class="string">&quot;查询成功&quot;</span>),</span><br><span class="line">    DELETE_SUCCESS(<span class="literal">true</span>,<span class="number">1002</span>,<span class="string">&quot;删除成功&quot;</span>),</span><br><span class="line">    UPDATE_ERROR(<span class="literal">false</span>,<span class="number">1003</span>,<span class="string">&quot;更新失败&quot;</span>),</span><br><span class="line">    ADD_ERROR(<span class="literal">false</span>,<span class="number">1004</span>,<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">    <span class="comment">//返回码： success  code  msg</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span>  String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器方法</span></span><br><span class="line">    Test03Enum(<span class="type">boolean</span> success, <span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取有参构造器的枚举对象</span></span><br><span class="line">        <span class="type">Test03Enum</span> <span class="variable">e</span> <span class="operator">=</span> Test03Enum.SELECT_SUCCESS;</span><br><span class="line"></span><br><span class="line">        System.out.println(e.isSuccess());</span><br><span class="line">        System.out.println(e.getCode());</span><br><span class="line">        System.out.println(e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-4-可以重写toString方法"><a href="#26-3-4-可以重写toString方法" class="headerlink" title="26.3.4 可以重写toString方法"></a>26.3.4 可以重写toString方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.success + <span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.code+<span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-5-枚举-类可以实现接口"><a href="#26-3-5-枚举-类可以实现接口" class="headerlink" title="26.3.5  枚举 类可以实现接口"></a>26.3.5  枚举 类可以实现接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test05Interface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">Test05Enum</span> <span class="keyword">implements</span>  <span class="title class_">Test05Interface</span>&#123;</span><br><span class="line">    UP</span><br><span class="line">    ;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个方法可以调到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-6在接口中：-枚举类"><a href="#26-3-6在接口中：-枚举类" class="headerlink" title="26.3.6在接口中： 枚举类"></a>26.3.6在接口中： 枚举类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Test06Interface &#123;</span><br><span class="line"></span><br><span class="line">    //1.可以在接口中定义枚举</span><br><span class="line">    enum  Test06Enum implements Test06Interface &#123;</span><br><span class="line">        UP,DOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Test06Interface</span>  <span class="variable">e</span>  <span class="operator">=</span> Test06Interface.Test06Enum.DOWN;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-7-枚举-可用放到集合当中"><a href="#26-3-7-枚举-可用放到集合当中" class="headerlink" title="26.3.7 枚举 可用放到集合当中"></a>26.3.7 枚举 可用放到集合当中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">Test07Enum</span> &#123;</span><br><span class="line"></span><br><span class="line">    DOWN,UP,LEFT,SKIP,RIGHT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个泛型是枚举的集合</span></span><br><span class="line">        List&lt;Test07Enum&gt;  list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 添加元素</span></span><br><span class="line">        list.add(Test07Enum.UP);</span><br><span class="line">        list.add(Test07Enum.UP);</span><br><span class="line">        list.add(Test07Enum.DOWN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Test07Enum test07Enum : list) &#123;</span><br><span class="line">            System.out.println(test07Enum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//set 当中的元素是不重复的，所以，我可以去重</span></span><br><span class="line">        <span class="comment">// 利用 EnumSet可以去重</span></span><br><span class="line">        EnumSet&lt;Test07Enum&gt; test07Enums = EnumSet.copyOf(list);</span><br><span class="line">        System.out.println(test07Enums);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="comment">// 利用 EnumSet  可以返回一个 EnumSet类型的集合 : 范围： 区间</span></span><br><span class="line">        EnumSet&lt;Test07Enum&gt; range = EnumSet.range(Test07Enum.UP, Test07Enum.SKIP);</span><br><span class="line">        System.out.println(range);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;EnumMap==========================&quot;</span>);</span><br><span class="line">        <span class="comment">//EnumMap: key是枚举 类型  : 参数是枚举 的class类型</span></span><br><span class="line"></span><br><span class="line">        EnumMap&lt;Test07Enum,String&gt;  map = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(Test07Enum.class);</span><br><span class="line">        map.put(Test07Enum.UP,<span class="string">&quot;上&quot;</span>);</span><br><span class="line">        map.put(Test07Enum.DOWN,<span class="string">&quot;下&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.get(Test07Enum.UP);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//EnumMap 数组结构 : 专门为 枚举 类型设计的map结构</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="26-4-父类-java-lang-Enum"><a href="#26-4-父类-java-lang-Enum" class="headerlink" title="26.4 父类 java.lang.Enum"></a>26.4 父类 java.lang.Enum</h2><table>
<thead>
<tr>
<th>values()</th>
<th>以数组形式返回枚举类型的所有成员</th>
</tr>
</thead>
<tbody><tr>
<td>valueOf()</td>
<td>将普通字符串转换为枚举实例</td>
</tr>
<tr>
<td>compareTo()</td>
<td>比较两个枚举成员在定义时的顺序</td>
</tr>
<tr>
<td>ordinal()</td>
<td>获取枚举成员的索引位置</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Test08Enum</span> &#123;</span><br><span class="line">    DOWN,UP,LEFT,SKIP,RIGHT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. values : 以数组形式返回枚举类型的所有成员</span></span><br><span class="line">Test08Enum[] values = Test08Enum.values();</span><br><span class="line">System.out.println(Arrays.toString(values));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. valueOf 将普通字符串转换为枚举实例</span></span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">up</span> <span class="operator">=</span> Test08Enum.valueOf(<span class="string">&quot;UP&quot;</span>);</span><br><span class="line">System.out.println(up);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.比较定义的顺序</span></span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">down</span> <span class="operator">=</span> Test08Enum.DOWN;</span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">skip</span> <span class="operator">=</span> Test08Enum.SKIP;</span><br><span class="line"><span class="type">int</span> <span class="variable">before</span> <span class="operator">=</span> down.compareTo(skip);</span><br><span class="line"><span class="type">int</span> <span class="variable">after</span> <span class="operator">=</span> skip.compareTo(down);</span><br><span class="line"><span class="type">int</span> <span class="variable">equ</span> <span class="operator">=</span> down.compareTo(down);</span><br><span class="line"></span><br><span class="line">System.out.println(before);  <span class="comment">//-3 左倒第3个</span></span><br><span class="line">System.out.println(after);<span class="comment">//3  右第3个</span></span><br><span class="line">System.out.println(equ); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. ordinal: 索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> down.ordinal();</span><br><span class="line">System.out.println(ordinal);</span><br></pre></td></tr></table></figure>

<h2 id="26-5-问题"><a href="#26-5-问题" class="headerlink" title="26.5 问题"></a>26.5 问题</h2><h3 id="26-5-1-枚举为什么是线程安全的？"><a href="#26-5-1-枚举为什么是线程安全的？" class="headerlink" title="26.5.1 枚举为什么是线程安全的？"></a>26.5.1 枚举为什么是线程安全的？</h3><ul>
<li><p>枚举类最终会被编译为被 <code>final</code> 修饰的普通类常量是用static final 修饰</p>
</li>
<li><p>枚举类在项目启动时就会被 JVM 加载并初始化，而这个执行过程是线程安全的，所以枚举类也是线程安全的类</p>
</li>
</ul>
<h1 id="27-反射"><a href="#27-反射" class="headerlink" title="27 反射"></a>27 反射</h1><h2 id="27-1-通过类来创建对象"><a href="#27-1-通过类来创建对象" class="headerlink" title="27.1 通过类来创建对象"></a>27.1 通过类来创建对象</h2><h3 id="27-1-1-对象-getClass获取类"><a href="#27-1-1-对象-getClass获取类" class="headerlink" title="27.1.1 对象.getClass获取类"></a>27.1.1 对象.getClass获取类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        1.通过getClass()方法,获取类</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; aClass = c1.getClass();</span><br><span class="line"><span class="comment">//      2.通过newInstance()方法来创建对象</span></span><br><span class="line">	 <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)aClass1.newInstance();`</span><br></pre></td></tr></table></figure>

<h3 id="27-1-2-Class-forName-获取类"><a href="#27-1-2-Class-forName-获取类" class="headerlink" title="27.1.2 Class.forName() 获取类"></a>27.1.2 Class.forName() 获取类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        2.通过forName()方法 获取类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)aClass1.newInstance();</span><br><span class="line">            car.a();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-2-通过构造器来创建对象"><a href="#27-2-通过构造器来创建对象" class="headerlink" title="27.2 通过构造器来创建对象"></a>27.2 通过构造器来创建对象</h2><h3 id="27-2-1-无参构造器"><a href="#27-2-1-无参构造器" class="headerlink" title="27.2.1 无参构造器"></a>27.2.1 无参构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.获取对应的构造器</span></span><br><span class="line">            Constructor&lt;?&gt; cr1 = c1.getConstructor();</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)cr1.newInstance();</span><br><span class="line">            System.out.println(car);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-2-2-有参构造器"><a href="#27-2-2-有参构造器" class="headerlink" title="27.2.2 有参构造器"></a>27.2.2 有参构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.获取对应的构造器</span></span><br><span class="line">            Constructor&lt;?&gt; cr1 = c1.getConstructor(String.class,String.class);</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)cr1.newInstance(<span class="string">&quot;晋A111&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">            System.out.println(car);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-3-通过反射调用方法"><a href="#27-3-通过反射调用方法" class="headerlink" title="27.3 通过反射调用方法"></a>27.3 通过反射调用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取类对象的class对象</span></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.创建对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line"><span class="comment">//        3.获取到方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;a&quot;</span>, String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="comment">//        4.调用方法 invoke执行</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> method.invoke(o, <span class="string">&quot;哈哈&quot;</span>,<span class="number">111</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-4-反射的常用方法"><a href="#27-4-反射的常用方法" class="headerlink" title="27.4 反射的常用方法"></a>27.4 反射的常用方法</h2><h3 id="27-4-1-获取类名-包名-父类-接口列表"><a href="#27-4-1-获取类名-包名-父类-接口列表" class="headerlink" title="27.4.1 获取类名 + 包名 + 父类 + 接口列表"></a>27.4.1 获取类名 + 包名 + 父类 + 接口列表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//    1.获取Class对象的方式</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.reflect_method.Game&quot;</span>);</span><br><span class="line"><span class="comment">//        2.类名 + 包名 + 父类 + 接口列表</span></span><br><span class="line">            System.out.println(<span class="string">&quot;类名：&quot;</span> + c1.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;包名：&quot;</span>+ c1.getPackage().getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;父类：&quot;</span>+ c1.getSuperclass().getName());</span><br><span class="line">            Class&lt;?&gt;[] interfaces = c1.getInterfaces();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接口列表：&quot;</span> + anInterface.getName());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-2-获取所有属性：getFields"><a href="#27-4-2-获取所有属性：getFields" class="headerlink" title="27.4.2 获取所有属性：getFields()"></a>27.4.2 获取所有属性：getFields()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            属性 Field public 类型</span></span><br><span class="line"><span class="comment">//            获取所有属性：getFields，只能获取public所有属性</span></span><br><span class="line">            Field[] fields = c1.getFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;属性：&quot;</span>+field.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="27-4-3-获取所有权限的属性：-getDeclaredFields"><a href="#27-4-3-获取所有权限的属性：-getDeclaredFields" class="headerlink" title="27.4.3 获取所有权限的属性： getDeclaredFields();"></a>27.4.3 获取所有权限的属性： getDeclaredFields();</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            获取所有权限的所有属性</span></span><br><span class="line">            System.out.println(<span class="string">&quot;==========获取所有权限的所有属性===========&quot;</span>);</span><br><span class="line">            Field[] fields1 = c1.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">                System.out.println(field.getName());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-4获取单个属性：-getField"><a href="#27-4-4获取单个属性：-getField" class="headerlink" title="27.4.4获取单个属性： getField()"></a>27.4.4获取单个属性： getField()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;============获取单个属性对象：getField===========&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">           System.out.println(name.getName());</span><br></pre></td></tr></table></figure>

<h3 id="27-4-5-获取所有权限的的单个属性：getDeclaredField"><a href="#27-4-5-获取所有权限的的单个属性：getDeclaredField" class="headerlink" title="27.4.5 获取所有权限的的单个属性：getDeclaredField()"></a>27.4.5 获取所有权限的的单个属性：getDeclaredField()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;============获取所有权限的单个属性对象：getField===========&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">           System.out.println(size.getName());</span><br></pre></td></tr></table></figure>

<h3 id="27-4-6-获取所有方法-getDeclaredMethods"><a href="#27-4-6-获取所有方法-getDeclaredMethods" class="headerlink" title="27.4.6 获取所有方法 getDeclaredMethods()"></a>27.4.6 获取所有方法 getDeclaredMethods()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=============获取所有方法：getDeclaedMethods===========&quot;</span>);</span><br><span class="line">           Method[] methods = c1.getDeclaredMethods();</span><br><span class="line">           <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;方法名&quot;</span>+method.getName());</span><br><span class="line">               System.out.println(<span class="string">&quot;方法的返回值：&quot;</span>+method.getReturnType());</span><br><span class="line">               Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">               <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">               <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                   sb.append(parameterType.getName()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(<span class="string">&quot;方法的参数列表：&quot;</span>+sb.toString());</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-7-获取单个方法-getMethod"><a href="#27-4-7-获取单个方法-getMethod" class="headerlink" title="27.4.7 获取单个方法 getMethod()"></a>27.4.7 获取单个方法 getMethod()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;==============获取单个方法=============&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setSize</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setSize&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">            System.out.println(setSize);</span><br></pre></td></tr></table></figure>

<h3 id="27-4-8-获取所有权限的构造器：-getDeclaredConstructor"><a href="#27-4-8-获取所有权限的构造器：-getDeclaredConstructor" class="headerlink" title="27.4.8 获取所有权限的构造器： getDeclaredConstructor()"></a>27.4.8 获取所有权限的构造器： getDeclaredConstructor()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=============获取所有权限的构造器===========&quot;</span>);</span><br><span class="line">         Constructor&lt;?&gt;[] declaredConstructors = c1.getDeclaredConstructors();</span><br><span class="line">         <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;构造器：&quot;</span>+declaredConstructor.getName());</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-9-获取单个构造器：-getDeclaredConstructor"><a href="#27-4-9-获取单个构造器：-getDeclaredConstructor" class="headerlink" title="27.4.9 获取单个构造器： getDeclaredConstructor()"></a>27.4.9 获取单个构造器： getDeclaredConstructor()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;==========获取单个构造器=================&quot;</span>);</span><br><span class="line">           Constructor&lt;?&gt; declaredConstructor = c1.getDeclaredConstructor(String.class, Date.class,<span class="type">int</span>.class,String.class);</span><br><span class="line">           System.out.println(<span class="string">&quot;有参构造器:&quot;</span>+declaredConstructor.getName());</span><br></pre></td></tr></table></figure>

<h1 id="28-多线程"><a href="#28-多线程" class="headerlink" title="28 多线程"></a>28 多线程</h1><h2 id="28-1-创建线程"><a href="#28-1-创建线程" class="headerlink" title="28.1  创建线程"></a>28.1  创建线程</h2><p>证明Java天生多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1工具获取当前 线程管理对象</span></span><br><span class="line">        <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取 thread 线程的数组</span></span><br><span class="line">        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.循环  一下</span></span><br><span class="line">        <span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">            System.out.println(threadInfo.getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java创建线程主要有两种方式：</p>
<ul>
<li>继承Thread类</li>
<li>实现Runnable</li>
</ul>
<h3 id="28-1-1继承Thread类"><a href="#28-1-1继承Thread类" class="headerlink" title="28.1.1继承Thread类"></a>28.1.1继承Thread类</h3><p>步骤：</p>
<ul>
<li>编写类、继承Thread</li>
<li>重写run方法</li>
<li>创建线程对象</li>
<li>调用start方法启动线程</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种实现方式 ：extends Thread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-1-2-实现Runnable接口"><a href="#28-1-2-实现Runnable接口" class="headerlink" title="28.1.2 实现Runnable接口"></a>28.1.2 实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">////        1.创建Runnable对象</span></span><br><span class="line"><span class="comment">//        Runnable t = new Thread2();</span></span><br><span class="line"><span class="comment">////        2.创建Thread对象</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(t);</span></span><br><span class="line"><span class="comment">//        Thread t2 = new Thread(t);</span></span><br><span class="line"><span class="comment">//        t1.setName(&quot;线程一&quot;);</span></span><br><span class="line"><span class="comment">//        t2.setName(&quot;线程二&quot;);</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line"><span class="comment">//        t2.start();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        匿名内部类</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="28-2-线程的状态"><a href="#28-2-线程的状态" class="headerlink" title="28.2 线程的状态"></a>28.2 线程的状态</h2><p>线程一共有六种状态</p>
<ul>
<li>NEW 新建</li>
<li>RUNNABLE 可运行</li>
<li>BLOCKED 阻塞</li>
<li>WAITING 等待</li>
<li>TIMED_WAITING 计时等待</li>
<li>TERMINATED 终止</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/0052344.png" alt="00522"></p>
<h2 id="28-3-常用方法"><a href="#28-3-常用方法" class="headerlink" title="28.3 常用方法"></a>28.3 常用方法</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167523588725899.png" alt="167523588725878"></p>
<h3 id="28-3-1-sleep-方法"><a href="#28-3-1-sleep-方法" class="headerlink" title="28.3.1 sleep()方法"></a>28.3.1 sleep()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: sleep 休眠</span></span><br><span class="line"><span class="comment"> *  Thread.sleep(毫秒)  位置 ：当前线程</span></span><br><span class="line"><span class="comment"> *  调用些方法==》 有限等待  ==》  就绪状态  重新抢时间片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//                    Thread.sleep(100);</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Thread.sleep(100);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-2-yield-方法"><a href="#28-3-2-yield-方法" class="headerlink" title="28.3.2 yield()方法"></a>28.3.2 yield()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: yield     Thread.yield();</span></span><br><span class="line"><span class="comment"> *  *</span></span><br><span class="line"><span class="comment"> *  * //1  让出时间片  ==》  直接进入 就结状态，   有可能会直接又抢到时间片，所以可以线程 在外观上不会中断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&quot;</span>+i);</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">50</span>)&#123;</span><br><span class="line">                        Thread.<span class="keyword">yield</span>();</span><br><span class="line"><span class="comment">//                        try &#123;</span></span><br><span class="line"><span class="comment">//                            Thread.sleep(100);</span></span><br><span class="line"><span class="comment">//                        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-3-join-方法"><a href="#28-3-3-join-方法" class="headerlink" title="28.3.3 join()方法"></a>28.3.3 join()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: 希望不要出现交替执行的状态</span></span><br><span class="line"><span class="comment"> *  * 让线程执行的逻辑有顺序：   一个线程 执行完 再执行另外一个线程</span></span><br><span class="line"><span class="comment"> *  *</span></span><br><span class="line"><span class="comment"> *  * 线程对象.join();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=111&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=222&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-4-setPriority（）方法"><a href="#28-3-4-setPriority（）方法" class="headerlink" title="28.3.4  setPriority（）方法"></a>28.3.4  setPriority（）方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 18:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: 优先级别 了解部分： 不一定准确</span></span><br><span class="line"><span class="comment"> *  默认5  1-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-5-setDaemon-方法-表示守护线程"><a href="#28-3-5-setDaemon-方法-表示守护线程" class="headerlink" title="28.3.5 setDaemon()方法  表示守护线程"></a>28.3.5 setDaemon()方法  表示守护线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 18:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>:</span></span><br><span class="line"><span class="comment"> * 1. 守护线程 依赖主线程 ， 主线程结束， 守护线程结束</span></span><br><span class="line"><span class="comment"> * 2. 线程对象.setDaemon(true)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;999&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.setDaemon(<span class="literal">true</span>);  <span class="comment">// 表示守护线程</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-4-线程安全"><a href="#28-4-线程安全" class="headerlink" title="28.4 线程安全"></a>28.4 线程安全</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753021844179.png" alt="16753021844170"></p>
<h2 id="28-5-死锁"><a href="#28-5-死锁" class="headerlink" title="28.5 死锁"></a>28.5 死锁</h2><ul>
<li>当地一个线程拥有A对象锁标记,并等待B对象锁标记,同时第二个线程拥有B对象锁标记,并等待A对象锁标记时,产生死锁.</li>
<li>一个线程可以同时拥有多个对象的锁标记,当线程阻塞时,不会释放已经拥有的锁标记,由此可能造成死锁.</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167530923814297.png" alt="1675309238142978"></p>
<h2 id="28-6-线程池"><a href="#28-6-线程池" class="headerlink" title="28.6 线程池"></a>28.6 线程池</h2><h3 id="28-6-1-概念"><a href="#28-6-1-概念" class="headerlink" title="28.6.1 概念"></a>28.6.1 概念</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167532890856785598.png" alt="167532890559978"></p>
<h3 id="28-6-2-API"><a href="#28-6-2-API" class="headerlink" title="28.6.2 API"></a>28.6.2 API</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167532898731429.png" alt="1675328931485729"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753289453451682.png" alt="16753284543941682"></p>
<h3 id="28-6-3-线程池的参数"><a href="#28-6-3-线程池的参数" class="headerlink" title="28.6.3 线程池的参数"></a>28.6.3 线程池的参数</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167534124329943360.png" alt="16753244339943360"></p>
<h3 id="28-6-4-执行流程"><a href="#28-6-4-执行流程" class="headerlink" title="28.6.4 执行流程"></a>28.6.4 执行流程</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753305434147063.png" alt="167533054347063"></p>
<h3 id="28-6-5-拒绝"><a href="#28-6-5-拒绝" class="headerlink" title="28.6.5 拒绝"></a>28.6.5 拒绝</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675331527444733.png" alt="167533152337733"></p>
<h3 id="28-6-6-关闭"><a href="#28-6-6-关闭" class="headerlink" title="28.6.6 关闭"></a>28.6.6 关闭</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675331780378.png" alt="1675331780378"></p>
<h2 id="28-7-有返回值的线程"><a href="#28-7-有返回值的线程" class="headerlink" title="28.7 有返回值的线程"></a>28.7 有返回值的线程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675389223012.png" alt="1675389223012"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-03 9:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Callable&lt;Integer&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> task.get();</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-8-Lock锁"><a href="#28-8-Lock锁" class="headerlink" title="28.8 Lock锁"></a>28.8 Lock锁</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167533392046369.png" alt="167539203346369"></p>
<h3 id="28-8-1-Lock-锁"><a href="#28-8-1-Lock-锁" class="headerlink" title="28.8.1 Lock 锁"></a>28.8.1 Lock 锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    String[] arr = &#123;<span class="string">&quot;刘&quot;</span>,<span class="string">&quot;关&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArr</span><span class="params">(String value)</span>&#123;</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        arr[index++] = value;</span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String[] getArr()&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoctTestMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">LockTest</span> <span class="variable">lt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LockTest</span>();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                lt.setArr(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            executorService.submit(r);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        System.out.println(Arrays.toString(lt.getArr()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-8-2-读写锁"><a href="#28-8-2-读写锁" class="headerlink" title="28.8.2 读写锁"></a>28.8.2 读写锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    1.创建读写锁</span></span><br><span class="line">   <span class="type">ReentrantReadWriteLock</span> <span class="variable">rrw</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读锁</span></span><br><span class="line">    ReentrantReadWriteLock.<span class="type">ReadLock</span> <span class="variable">readLock</span> <span class="operator">=</span> rrw.readLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    写锁</span></span><br><span class="line">    ReentrantReadWriteLock.<span class="type">WriteLock</span> <span class="variable">writeLock</span> <span class="operator">=</span> rrw.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLock3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="type">ReadWriteLock</span> <span class="variable">rw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteLock</span>();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                rw.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">write</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                rw.setValue(<span class="string">&quot;写&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            executorService.submit(read);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) &#123;</span><br><span class="line">            executorService.submit(write);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-9-安全集合"><a href="#28-9-安全集合" class="headerlink" title="28.9 安全集合"></a>28.9 安全集合</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16754234111997349.png" alt="167541193397349"></p>
<h3 id="28-9-1-copyOnWriteArrayList"><a href="#28-9-1-copyOnWriteArrayList" class="headerlink" title="28.9.1 copyOnWriteArrayList"></a>28.9.1 copyOnWriteArrayList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">111</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">2222</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">333</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">444</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">555</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">666</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">0</span>,<span class="number">2222</span>);<span class="comment">// update</span></span><br><span class="line">        System.out.println(list1);</span><br><span class="line">        System.out.println( list1.get(<span class="number">0</span>)); <span class="comment">//获取</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-9-2-CopyOnWriteAyyaySet"><a href="#28-9-2-CopyOnWriteAyyaySet" class="headerlink" title="28.9.2 CopyOnWriteAyyaySet"></a>28.9.2 CopyOnWriteAyyaySet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//       set 没有下标,没有顺序 ,不能重复</span></span><br><span class="line">        Set&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        线程安全 : 加锁</span></span><br><span class="line">        Set&lt;Object&gt; set1 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-9-3-ConcurrentHashMap"><a href="#28-9-3-ConcurrentHashMap" class="headerlink" title="28.9.3 ConcurrentHashMap"></a>28.9.3 ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map =  <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            添加</span></span><br><span class="line">            map.put(<span class="string">&quot;1&quot;</span>+i,i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        取值 key</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;11&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; next = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> next.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> next.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="29-10-队列"><a href="#29-10-队列" class="headerlink" title="29.10 队列"></a>29.10 队列</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1623475416407007.png" alt="167541640337007"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167541642294142.png" alt="167541336494142"></p>
<h4 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675416979341.png" alt="1675416979341"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675416994175.png" alt="1675416994175"></p>
<h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675417343172810.png" alt="167541712272810"></p>
<h1 id="20-网络编程"><a href="#20-网络编程" class="headerlink" title="20 网络编程"></a>20 网络编程</h1><h2 id="20-1-网络编程"><a href="#20-1-网络编程" class="headerlink" title="20.1 网络编程"></a>20.1 网络编程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167431245473178188.png" alt="16754の731378188"></p>
<ul>
<li>解释:<ul>
<li>让计算机与计算机之间建立连接,进行通讯</li>
</ul>
</li>
<li>OSI:<ul>
<li>(Open System Interconnet), 即开放式系统互联，是ISO组织在1985年研究的网路互联模型</li>
</ul>
</li>
<li>TCP&#x2F;IP 模型<ul>
<li>是因特网使用的参考模型，基于TCP&#x2F;IP的参考模型将协议分成四个层次,该模型中最重要的两个协议是TCP和IP协议</li>
</ul>
</li>
</ul>
<h2 id="20-2-OSI-TCP-x2F-IP"><a href="#20-2-OSI-TCP-x2F-IP" class="headerlink" title="20.2 OSI TCP&#x2F;IP"></a>20.2 OSI TCP&#x2F;IP</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675473563678.png" alt="1675473563678"></p>
<h2 id="20-3-TCP连接-三次握手-四次挥手"><a href="#20-3-TCP连接-三次握手-四次挥手" class="headerlink" title="20.3 TCP连接 : 三次握手 + 四次挥手"></a>20.3 TCP连接 : 三次握手 + 四次挥手</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167547364494178.png" alt="167547363394178"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167547223706073.png" alt="167547370622073"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675474189437.png" alt="1675474189437"></p>
<h2 id="20-4-TCP可靠性"><a href="#20-4-TCP可靠性" class="headerlink" title="20.4 TCP可靠性"></a>20.4 TCP可靠性</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167222474531180.png" alt="34"></p>
<p>滑动窗口机制</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1432423675474807030.png" alt="167547422807030"></p>
<h2 id="20-5-UDP-传输层的另外一种协议"><a href="#20-5-UDP-传输层的另外一种协议" class="headerlink" title="20.5 UDP 传输层的另外一种协议"></a>20.5 UDP 传输层的另外一种协议</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675474960413.png" alt="1675474960413"></p>
<h2 id="20-6-TCP-x2F-IP-包"><a href="#20-6-TCP-x2F-IP-包" class="headerlink" title="20.6 TCP&#x2F;IP 包"></a>20.6 TCP&#x2F;IP 包</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475241333556.png" alt="167547335241556"></p>
<h2 id="20-7-IP"><a href="#20-7-IP" class="headerlink" title="20.7 IP"></a>20.7 IP</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475369778.png" alt="1675475369778"></p>
<h2 id="20-8-端口"><a href="#20-8-端口" class="headerlink" title="20.8 端口"></a>20.8 端口</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475470296.png" alt="1675475470296"></p>
<h2 id="20-9-InetAddress"><a href="#20-9-InetAddress" class="headerlink" title="20.9 InetAddress"></a>20.9 InetAddress</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475575542345586.png" alt="167547445575586"></p>
<h2 id="20-10-Socket-编程"><a href="#20-10-Socket-编程" class="headerlink" title="20.10 Socket 编程"></a>20.10 Socket 编程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167542276368812.png" alt="167547632268812"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675477114067.png" alt="1675477114067"></p>
<h3 id="20-10-1-客户端连接服务端发送字符信息"><a href="#20-10-1-客户端连接服务端发送字符信息" class="headerlink" title="20.10.1 客户端连接服务端发送字符信息"></a>20.10.1 客户端连接服务端发送字符信息</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接到&quot;</span> + socket.getLocalAddress() + <span class="string">&quot;: &quot;</span> + socket);</span><br><span class="line"></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">            bw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bw!= <span class="literal">null</span>)&#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(osw != <span class="literal">null</span>)&#123;</span><br><span class="line">                    osw.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            创建服务器端对象</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//            接受客户端传送过来的socket数据</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress()+<span class="string">&quot;连接上来了&quot;</span>+socket);</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-10-2-客户端连接服务端发送字节信息"><a href="#20-10-2-客户端连接服务端发送字节信息" class="headerlink" title="20.10.2 客户端连接服务端发送字节信息"></a>20.10.2 客户端连接服务端发送字节信息</h3><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;10.70.60.12&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">imgSrc</span> <span class="operator">=</span> <span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day17_TCP_UDP\\img\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        client2(ip,port,imgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">client2</span><span class="params">(String ip,<span class="type">int</span> port,String imgSrc)</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到服务端&quot;</span>+socket);</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imgSrc + <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建serverSocket对象</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2.阻塞方法等待客户 端</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端连上来了......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//自已定义的写流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\003.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ( (count = in.read(buf)) !=-<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buf,<span class="number">0</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-10-3-多个客户端连接服务端"><a href="#20-10-3-多个客户端连接服务端" class="headerlink" title="20.10.3 多个客户端连接服务端"></a>20.10.3 多个客户端连接服务端</h3><h4 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节字符转换流+ 缓冲流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line"></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>( os,<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制台输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            bw.write(next);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread3</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread3</span>(socket);</span><br><span class="line">            thread3.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多线程运行"><a href="#多线程运行" class="headerlink" title="多线程运行"></a>多线程运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread3</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有Socket对象</span></span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread3</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取内容</span></span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//通道读流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in,<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">//读不要停止： 死循环</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> buf.readLine();</span><br><span class="line">                    <span class="keyword">if</span>(line==<span class="literal">null</span>  || <span class="string">&quot;886&quot;</span>.equals(line)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(socket.getInetAddress().getHostName() + <span class="string">&quot;说：&quot;</span>+ line);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                    buf.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;退出了......&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="21-jdk8新特性"><a href="#21-jdk8新特性" class="headerlink" title="21 jdk8新特性"></a>21 jdk8新特性</h1><h2 id="21-1-总结"><a href="#21-1-总结" class="headerlink" title="21.1 总结"></a>21.1 总结</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675645595489.png" alt="1675645595489"></p>
<h2 id="21-2-Lambda"><a href="#21-2-Lambda" class="headerlink" title="21.2 Lambda"></a>21.2 Lambda</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167564650900fasdfawe675662790247.png" alt="167564650933008"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUuser3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//    1.匿名内部类</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IUser</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//     Lambda表达式</span></span><br><span class="line"><span class="comment">//        函数式接口: 只有一个重写方法</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">i1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        i1.a();</span><br><span class="line">        <span class="comment">//    有参数的</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">i2</span> <span class="operator">=</span> a -&gt;&#123;</span><br><span class="line">            System.out.println(a+<span class="string">&quot;有参Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        i2.a(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        有返回值的</span></span><br><span class="line">        <span class="type">IUuser3</span> <span class="variable">i3</span> <span class="operator">=</span> a-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(i3.a(<span class="number">5</span>));</span><br><span class="line">        <span class="type">IUser4</span> <span class="variable">i4</span> <span class="operator">=</span> (a,b) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个参数的Lambda表达式&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(i4.a(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756342346547352.png" alt="16756463547352"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span>  <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态添加方法,没有参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态添加方法,有参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(Hero hero)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Hero <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        标准匿名类</span></span><br><span class="line"><span class="comment">//        IUser1 u1 = new IUser1() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void a(String name) &#123;</span></span><br><span class="line"><span class="comment">//                Hero hero = new Hero();</span></span><br><span class="line"><span class="comment">//                hero.setName(name);</span></span><br><span class="line"><span class="comment">//                Hero.add(name);</span></span><br><span class="line"><span class="comment">////                System.out.println(hero.toString());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        u1.a(&quot;张三&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="comment">////        简化写法 : 对象::方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i1</span> <span class="operator">=</span> hero::setName;</span><br><span class="line">        i1.a(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(hero.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        类: 静态方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i2</span> <span class="operator">=</span> Hero::add;</span><br><span class="line">        i2.a(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line"><span class="comment">//        类:实例方法</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">user2</span> <span class="operator">=</span> Hero::getName;</span><br><span class="line">        user2.a(hero);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">////        类:: new</span></span><br><span class="line">        <span class="type">IUser3</span> <span class="variable">i3</span> <span class="operator">=</span> Hero::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">a</span> <span class="operator">=</span> i3.a();</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="comment">////        简化写法 : 对象::方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i1</span> <span class="operator">=</span> hero::setName;</span><br><span class="line">        i1.a(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(hero.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        类: 静态方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i2</span> <span class="operator">=</span> Hero::add;</span><br><span class="line">        i2.a(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line"><span class="comment">//        类:实例方法</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">user2</span> <span class="operator">=</span> Hero::getName;</span><br><span class="line">        user2.a(hero);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">////        类:: new</span></span><br><span class="line">        <span class="type">IUser3</span> <span class="variable">i3</span> <span class="operator">=</span> Hero::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">a</span> <span class="operator">=</span> i3.a();</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="21-3-函数式接口"><a href="#21-3-函数式接口" class="headerlink" title="21.3 函数式接口"></a>21.3 函数式接口</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756472323657564.png" alt="167564763357564"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String, args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. accept 接受  Consumer :消费</span></span><br><span class="line"><span class="comment">//        有参数,没有返回值的</span></span><br><span class="line"><span class="comment">//        Consumer&lt;String&gt; c = new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(String s) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;s=&quot;+s);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        Consumer&lt;String&gt; c1 = s-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">        &#125;;</span><br><span class="line">        c1.accept(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        没有参数,有返回值的接口   ----  供給型接口</span></span><br><span class="line">        Supplier&lt;Integer&gt; s1 = ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.有参数,有返回值 apply:执行   ==== 函数式接口</span></span><br><span class="line">        Function&lt;String,Integer&gt; f1 = a -&gt;&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">222</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f1.apply(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    断言</span></span><br><span class="line">    Predicate&lt;String&gt; p1 = <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (s==<span class="literal">null</span>)?<span class="literal">false</span>:(s.length()==<span class="number">0</span>)?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Predicate&lt;String&gt; p2 = (s)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> (s==<span class="literal">null</span>)?<span class="literal">false</span>:(s.length()==<span class="number">0</span>)?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="21-4-Stream"><a href="#21-4-Stream" class="headerlink" title="21.4 Stream"></a>21.4 Stream</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675653785066.png" alt="1675653785066"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756554944437456734.png" alt="167565549443343"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756554884323428.png" alt="16756554838438"></p>
<h3 id="21-4-1-获取流"><a href="#21-4-1-获取流" class="headerlink" title="21.4.1 获取流"></a>21.4.1 获取流</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取Stream流对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">//        集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========集合==========&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        Stream&lt;String&gt; stringStream = list.parallelStream();</span><br><span class="line">        stream.forEach(System.out::print );</span><br><span class="line">        System.out.println();</span><br><span class="line">        stringStream.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======数组=======&quot;</span>);</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">        stream1.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============静态方法=======&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        Stream&lt;String[]&gt; generate = Stream.generate(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String[]&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] get() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        integerStream.forEach(System.out::print);</span><br><span class="line"><span class="comment">//        generate.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======long:range 范围=======&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">LongStream</span> <span class="variable">range</span> <span class="operator">=</span> LongStream.range(<span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line">        range.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        传入一个List&#123;0,1,2,3,4,5,6</span></span><br><span class="line"><span class="comment">//        返回其中大于三的数值</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getRs</span><span class="params">(List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line"><span class="comment">//        Stream: 读写</span></span><br><span class="line"><span class="comment">//        1.再创建爱你一个List用来装返回的结果</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; rsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(next &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                rsList.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-4-2-使用流的中间操作"><a href="#21-4-2-使用流的中间操作" class="headerlink" title="21.4.2 使用流的中间操作"></a>21.4.2 使用流的中间操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; baseList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        baseList.add(<span class="number">15</span>);</span><br><span class="line">        baseList.add(<span class="number">52</span>);</span><br><span class="line">        baseList.add(<span class="number">35</span>);</span><br><span class="line">        baseList.add(<span class="number">5</span>);</span><br><span class="line">        baseList.add(<span class="number">57</span>);</span><br><span class="line">        baseList.add(<span class="number">95</span>);</span><br><span class="line"><span class="comment">//        获取对应它的Stream流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====获取对应集合的Stream流&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream = baseList.stream();</span><br><span class="line">        baseList.forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        stream.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======过滤=====&quot;</span>);</span><br><span class="line"><span class="comment">//        过滤</span></span><br><span class="line">        Stream&lt;Integer&gt; integerStream = stream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (integer &gt;= <span class="number">35</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        integerStream.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line">        integerStream.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======limit============&quot;</span>);</span><br><span class="line">        baseList.stream().limit(<span class="number">3</span>).forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====skip========&quot;</span>);</span><br><span class="line">        baseList.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======sorted========&quot;</span>);</span><br><span class="line">        baseList.stream().sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========map================&quot;</span>);</span><br><span class="line">       baseList.stream().map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> integer + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-4-3-串行-x2F-并行"><a href="#21-4-3-串行-x2F-并行" class="headerlink" title="21.4.3 串行&#x2F;并行"></a>21.4.3 串行&#x2F;并行</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675668489530.png" alt="1675668489530"></p>
<h3 id="21-4-4-Stream终止"><a href="#21-4-4-Stream终止" class="headerlink" title="21.4.4 Stream终止"></a>21.4.4 Stream终止</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756623238589210.png" alt="16756685892310"></p>
<h2 id="21-5-LocalDateTime"><a href="#21-5-LocalDateTime" class="headerlink" title="21.5 LocalDateTime"></a>21.5 LocalDateTime</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675669534505.png" alt="1675669534505"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取到当前日期</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"><span class="comment">//    年月日</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年=&quot;</span>+now.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;月=&quot;</span>+now.getMonthValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;日=&quot;</span>+now.getDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;周/日&quot;</span>+now.getDayOfWeek());</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.plusYears(<span class="number">1</span>);</span><br><span class="line">        System.out.println(localDateTime.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;去年:&quot;</span>+now.plusYears(-<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;今年&quot;</span>+now.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;明年:&quot;</span>+now.plusYears(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;上个月:&quot;</span>+now.minusMonths(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;下个月:&quot;</span>+now.minusMonths(-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675674843250793.png" alt="167567485073393"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parse = sdf.parse(format);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"><span class="comment">//        定义格式</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd : HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> dtf.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse2</span> <span class="operator">=</span> dtf.parse(<span class="string">&quot;2023-02-06 : 19:32:23&quot;</span>);</span><br><span class="line">        System.out.println(parse2);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse1</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-02-06 : 19:30:49&quot;</span>,dtf);</span><br><span class="line">        System.out.println(parse1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167567545195121.png" alt="16756754531951"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        获取当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        toString</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime();</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取毫秒数: 计算</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> now.toEpochMilli();</span><br><span class="line">        System.out.println(l);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        计算秒  plusxxx</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> now.plusSeconds(<span class="number">60</span>);</span><br><span class="line">        System.out.println(instant);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        计算两个Instant之间的毫秒数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> Duration.between(instant,Instant.now()).toMillis();</span><br><span class="line"><span class="comment">//        获取系统时区</span></span><br><span class="line">        System.out.println(<span class="string">&quot;系统时区:&quot;</span>+ ZoneId.systemDefault().toString());</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        获取所有时区</span></span><br><span class="line">        Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">        System.out.println(availableZoneIds);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675676040095.png" alt="1675676040095"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.Date ==== &gt; Instant   调用里边独有的方法</span></span><br><span class="line"><span class="comment">//        date1.toInstant();</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date1.toInstant();</span><br><span class="line"><span class="comment">//        Instant ==== &gt;LocalDateTime</span></span><br><span class="line"><span class="comment">//        LocalDateTime.ofInstant(instant,系统时区)</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line"><span class="comment">//        LocalDateTime   ===== &gt; instant</span></span><br><span class="line"><span class="comment">//        localDateTime.atZone(系统时区).toInstant()</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line"><span class="comment">//        instant === &gt; Date</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="22-链表的设计与实现"><a href="#22-链表的设计与实现" class="headerlink" title="22 链表的设计与实现"></a>22 链表的设计与实现</h1><h2 id="22-1单向链表的实现"><a href="#22-1单向链表的实现" class="headerlink" title="22.1单向链表的实现"></a>22.1单向链表的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedLIst</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SingleLinkedLIst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">HeroNode</span>();</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在末尾添加节点到单项链表中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = node;</span><br><span class="line">        size++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照编号插入元素到链表中去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrderBy</span><span class="params">(<span class="type">int</span> index,HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.no &gt; node.no)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.no == node.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;准备插入的英雄编号&quot;</span>+ node.no +<span class="string">&quot;已经存在了,不能加入&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.next = cur.next;</span><br><span class="line">            cur.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入指定位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.next = cur.next;</span><br><span class="line">        cur.next = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改节点的信息,根据no编号来修改,即no编号不能变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.no == node.no)&#123;</span><br><span class="line">                cur.name = node.name;</span><br><span class="line">                cur.nickName = node.nickName;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编号没有找到等于&quot;</span>+node.no+<span class="string">&quot;的值,不能修改&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示链表遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.next.no == node.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             cur.next = cur.next.next;</span><br><span class="line">             size--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要删除的节点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找单链表中的倒数第K个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getHeroNode</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span> || k &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (size-k); i++) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表的最前端</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            next = cur.next;  <span class="comment">//先暂时保存当前节点的下一个节点</span></span><br><span class="line">            cur.next = dummy.next;  <span class="comment">//将cur节点的下一个节点指向新的链表的最前端</span></span><br><span class="line">            dummy.next = cur;</span><br><span class="line">            cur = next;    <span class="comment">//让cur后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        head.next = dummy.next;   <span class="comment">//实现单链表的反转</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  从尾到头打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> )&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    String name;</span><br><span class="line">    String nickName;</span><br><span class="line">    HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName, HeroNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="22-2-双向链表的设计与实现"><a href="#22-2-双向链表的设计与实现" class="headerlink" title="22.2 双向链表的设计与实现"></a>22.2 双向链表的设计与实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLInkedList</span> &#123;</span><br><span class="line">     HeroNode2 head;</span><br><span class="line">     <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleLInkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">HeroNode2</span>();</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = node;</span><br><span class="line">            node.pre = head;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">        node.pre = cur;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode2 node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(cur.io == node.io)&#123;</span><br><span class="line">                cur.name = node.name;</span><br><span class="line">                cur.nickName = node.nickName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> io</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> io)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//       判断当前链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空,无法修改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;  <span class="comment">//辅助节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.io == io)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            cur.pre.next = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                cur.next.pre = cur.pre;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历双向链表的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> io;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> io, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.io = io;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;io=&quot;</span> + io +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2019/04/24/quartz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/Quartz_Logo_large.jpg" alt="Quartz_Logo_large"></p>
<blockquote>
<p>Author：Shine</p>
<p>Version：9.0.2</p>
</blockquote>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><blockquote>
<p><strong>Quartz</strong> ：<a href="http://www.quartz-scheduler.org/">http://www.quartz-scheduler.org/</a></p>
<p>是一个<a href="">定时任务调度框架</a>。比如你遇到这样的问题：</p>
<ul>
<li>想在30分钟后，查看订单是否支付，未支付则取消订单</li>
<li>想在每月29号，信用卡自动还款</li>
<li>…</li>
<li>想定时在某个时间，去做某件事(任务)。</li>
</ul>
</blockquote>
<blockquote>
<p>Quartz是要做定时任务的调度，设置好触发时间规则，以及相应的任务(Job)即可。</p>
</blockquote>
<h3 id="二、Quartz使用"><a href="#二、Quartz使用" class="headerlink" title="二、Quartz使用"></a>二、Quartz使用</h3><hr>
<h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Quartz任务调度--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-定义Job"><a href="#2-2-定义Job" class="headerlink" title="2.2 定义Job"></a>2.2 定义Job</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作类的具体实现，即需要定时执行的“某件事”</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloQuartz</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">         <span class="comment">//创建工作详情</span></span><br><span class="line">        JobDetail jobDetail=context.getJobDetail();</span><br><span class="line">        <span class="comment">//获取工作的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> jobDetail.getKey().getName();<span class="comment">//任务名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jobGroup</span> <span class="operator">=</span> jobDetail.getKey().getGroup();<span class="comment">//任务group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;job执行，job：&quot;</span>+jobName+<span class="string">&quot; group:&quot;</span>+jobGroup);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-API测试"><a href="#2-3-API测试" class="headerlink" title="2.3 API测试"></a>2.3 API测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建scheduler，调度器</span></span><br><span class="line">            <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            <span class="comment">//定义一个Trigger,触发条件类</span></span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                	.withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                	.startNow()<span class="comment">//一旦加入scheduler，立即生效，即开始计时</span></span><br><span class="line">                	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                              .withIntervalInSeconds(<span class="number">1</span>) <span class="comment">//每隔一秒执行一次</span></span><br><span class="line">                              .repeatForever()) <span class="comment">//一直执行，直到结束时间</span></span><br><span class="line">                	.endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2019</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">0</span>).getTime());<span class="comment">//设置结束时间</span></span><br><span class="line">            <span class="comment">//定义一个JobDetail</span></span><br><span class="line">            <span class="comment">//定义Job类为HelloQuartz类，这是真正的执行逻辑所在</span></span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">job</span> <span class="operator">=</span> JobBuilder.newJob(HelloQuartz.class) </span><br><span class="line">                    .withIdentity(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">//调度器 中加入 任务和触发器</span></span><br><span class="line">            scheduler.scheduleJob(job, trigger);</span><br><span class="line">            <span class="comment">//启动任务调度</span></span><br><span class="line">            scheduler.start();            </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-配置"><a href="#2-4-配置" class="headerlink" title="2.4 配置"></a>2.4 配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 名为：quartz.properties，放置在classpath下，如果没有此配置则按默认配置启动</span></span><br><span class="line"><span class="comment"># 指定调度器名称，非实现类</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span> = <span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="comment"># 指定线程池实现类</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment"># 线程池线程数量</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span> = <span class="string">10 </span></span><br><span class="line"><span class="comment"># 优先级，默认5</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br><span class="line"><span class="comment"># 非持久化job</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span> = <span class="string">org.quartz.simpl.RAMJobStore</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-核心类说明"><a href="#2-5-核心类说明" class="headerlink" title="2.5 核心类说明"></a>2.5 核心类说明</h4><blockquote>
<p>Scheduler：调度器。所有的调度都是由它控制，是Quartz的大脑，所有任务都是由它来管理</p>
<p>Job：任务，想定时执行的事情(定义业务逻辑)</p>
<p>JobDetail：基于Job，进一步包装。其中关联一个Job，并为Job指定更详细的属性，比如标识等</p>
<p>Trigger：触发器。可以指定给某个任务，指定任务的触发机制。</p>
</blockquote>
<h3 id="三、Trigger"><a href="#三、Trigger" class="headerlink" title="三、Trigger"></a>三、Trigger</h3><hr>
<h4 id="3-1-SimpleTrigger"><a href="#3-1-SimpleTrigger" class="headerlink" title="3.1 SimpleTrigger"></a>3.1 SimpleTrigger</h4><blockquote>
<p>以一定的时间间隔（单位是毫秒）执行的任务。</p>
<ul>
<li>指定起始和截止时间(时间段)</li>
<li>指定时间间隔、执行次数</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">            	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                          .withIntervalInSeconds(<span class="number">1</span>) <span class="comment">//每秒执行一次</span></span><br><span class="line">                          .repeatForever())<span class="comment">// 不限执行次数</span></span><br><span class="line">                .endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">0</span>).getTime())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">            	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                          .withIntervalInMinutes(<span class="number">3</span>) <span class="comment">// 每3分钟执行一次</span></span><br><span class="line">                          .withRepeatCount(<span class="number">3</span>)) <span class="comment">// 执行次数不超过3次</span></span><br><span class="line">                .endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">0</span>).getTime()) </span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

<h4 id="3-2-CronTrigger-【重点】"><a href="#3-2-CronTrigger-【重点】" class="headerlink" title="3.2 CronTrigger 【重点】"></a>3.2 CronTrigger 【<code>重点</code>】</h4><blockquote>
<p>适合于更复杂的任务，它支持类型于Linux Cron的语法（并且更强大）。</p>
<ul>
<li>指定Cron表达式即可</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每天10:00-12:00，每隔2分钟执行一次</span></span><br><span class="line"><span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;t1&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0 0/2 10-12 * * ?&quot;</span>)).build(); </span><br></pre></td></tr></table></figure>

<h5 id="3-2-1-Cron表达式组成"><a href="#3-2-1-Cron表达式组成" class="headerlink" title="3.2.1 Cron表达式组成"></a>3.2.1 Cron表达式组成</h5><blockquote>
<p>表达式组成：”秒 分 时 日 月 星期几 [年]” ，其中”年” 是可选的，一般不指定。</p>
<ul>
<li>如：”10 20 18 3 5 ?”代表”5月3日18点20分10秒，星期几不确定 “</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>位置</th>
<th>时间域</th>
<th>允许值</th>
<th>特殊值</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秒</td>
<td>0-59</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>2</td>
<td>分钟</td>
<td>0-59</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>3</td>
<td>小时</td>
<td>0-23</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>4</td>
<td>日期</td>
<td>1-31</td>
<td>, - * ? &#x2F; L W</td>
</tr>
<tr>
<td>5</td>
<td>月份</td>
<td>1-12</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>6</td>
<td>星期</td>
<td>1-7</td>
<td>, - * ? &#x2F; L  #</td>
</tr>
<tr>
<td>7</td>
<td>年份（可选）</td>
<td></td>
<td>, - * &#x2F;</td>
</tr>
</tbody></table>
<h5 id="3-2-2-Cron表达式符号"><a href="#3-2-2-Cron表达式符号" class="headerlink" title="3.2.2 Cron表达式符号"></a>3.2.2 Cron表达式符号</h5><blockquote>
<p>表达式中可使用的特殊符号的含义如下</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">星号(*)</td>
<td>可用在所有字段中，表示对应时间域的每一个时刻，例如， 在分钟字段时，表示“每分钟”</td>
</tr>
<tr>
<td align="center">问号(?)</td>
<td>该字符只在日期和星期字段中使用，它通常指定为“不确定值”</td>
</tr>
<tr>
<td align="center">减号(-)</td>
<td>表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12</td>
</tr>
<tr>
<td align="center">逗号(,)</td>
<td>表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五</td>
</tr>
<tr>
<td align="center">斜杠(&#x2F;)</td>
<td>x&#x2F;y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0&#x2F;15，则表示为0,15,30和45秒，而5&#x2F;15在分钟字段		 中表示5,20,35,50</td>
</tr>
<tr>
<td align="center">井号(#)</td>
<td>该字符只用在星期字段中，”4#2”代表第二个星期3，“5#4”代表第4个星期四</td>
</tr>
<tr>
<td align="center">L</td>
<td>该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。</td>
</tr>
<tr>
<td align="center"></td>
<td>如果L用在星期字段里，则表示星期六，等同于7</td>
</tr>
<tr>
<td align="center"></td>
<td>L出现在星期字段里，而且在前面有一个数值x，则表示“这个月的最后一个周x”，例如，6L表示该月的最后星期五</td>
</tr>
<tr>
<td align="center"></td>
<td>L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号</td>
</tr>
<tr>
<td align="center">W</td>
<td>该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日</td>
</tr>
<tr>
<td align="center"></td>
<td>例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号	 是星期二，那结果就是15号星期二；但必须注意关联的匹配日期不能够跨月</td>
</tr>
<tr>
<td align="center">LW组合</td>
<td>在日期字段可以组合使用LW，它的意思是当月的最后一个工作日</td>
</tr>
</tbody></table>
<h5 id="3-2-3-Cron表达式示例"><a href="#3-2-3-Cron表达式示例" class="headerlink" title="3.2.3 Cron表达式示例"></a>3.2.3 Cron表达式示例</h5><blockquote>
<p>演示实例</p>
</blockquote>
<table>
<thead>
<tr>
<th>表示式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0 0 12 * * ?</td>
<td>每天12点运行</td>
</tr>
<tr>
<td>0 15 10 * * ?</td>
<td>每天10:15运行</td>
</tr>
<tr>
<td>0 15 10 * * ? 2008</td>
<td>在2008年的每天10：15运行</td>
</tr>
<tr>
<td>0 * 14 * * ?</td>
<td>每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。</td>
</tr>
<tr>
<td>0 0&#x2F;5 14 * * ?</td>
<td>每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。</td>
</tr>
<tr>
<td>0 0&#x2F;5 14,18 * * ?</td>
<td>每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。</td>
</tr>
<tr>
<td>0 0-5 14 * * ?</td>
<td>每天14:00点到14:05，每分钟运行一次。</td>
</tr>
<tr>
<td>0 0-5&#x2F;2 14 * * ?</td>
<td>每天14:00点到14:05，每2分钟运行一次。</td>
</tr>
<tr>
<td>0 10,44 14 ? 3 4</td>
<td>3月每周三的14:10分和14:44分，各运行一次。</td>
</tr>
<tr>
<td>0 15 10 ? * 2-6</td>
<td>每周一，二，三，四，五的10:15分运行一次。</td>
</tr>
<tr>
<td>0 15 10 15 * ?</td>
<td>每月15日10:15分运行。</td>
</tr>
<tr>
<td>0 15 10 L * ?</td>
<td>每月最后一天10:15分运行。</td>
</tr>
<tr>
<td>0 15 10 ? * 6L</td>
<td>每月最后一个星期五10:15分运行。【此时天必须是”?”】</td>
</tr>
<tr>
<td>0 15 10 ? * 6L 2007-2009</td>
<td>在2007,2008,2009年每个月的最后一个星期五的10:15分运行。</td>
</tr>
</tbody></table>
<h3 id="四、Spring整合Quartz-【重点】"><a href="#四、Spring整合Quartz-【重点】" class="headerlink" title="四、Spring整合Quartz 【重点】"></a>四、Spring整合Quartz 【<code>重点</code>】</h3><h4 id="4-1-依赖"><a href="#4-1-依赖" class="headerlink" title="4.1 依赖"></a>4.1 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">quartz.version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">quartz.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;quartz.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-定义Job"><a href="#4-2-定义Job" class="headerlink" title="4.2 定义Job"></a>4.2 定义Job</h4><blockquote>
<p>定义一个Job类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;job 执行&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-配置"><a href="#4-3-配置" class="headerlink" title="4.3 配置"></a>4.3 配置</h4><blockquote>
<p>调度器   SchedulerFactoryBean</p>
<p>触发器   CronTriggerFactoryBean</p>
<p>JobDetail   JobDetailFactoryBean</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Spring整合Quartz进行配置遵循下面的步骤：</span></span><br><span class="line"><span class="comment">        1：定义工作任务的Job</span></span><br><span class="line"><span class="comment">        2：定义触发器Trigger，并将触发器与工作任务绑定</span></span><br><span class="line"><span class="comment">        3：定义调度器，并将Trigger注册到Scheduler</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1：定义任务的bean ，这里使用JobDetailFactoryBean,也可以使用MethodInvokingJobDetailFactoryBean ，配置类似--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;lxJob&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定job的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;job1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定job的分组 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;group&quot;</span> <span class="attr">value</span>=<span class="string">&quot;job_group1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定具体的job类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qf.quartz.MyJob&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cronTrigger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Trigger的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trigger1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Trigger的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;group&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trigger_group1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Tirgger绑定的JobDetail --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobDetail&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;lxJob&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Cron 的表达式 ，当前是每隔5s运行一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cronExpression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*/5 * * * * ?&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.定义调度器，并将Trigger注册到调度器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;triggers&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;cronTrigger&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加 quartz 配置，如下两种方式均可 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;quartzProperties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                # 指定调度器名称，实际类型为：QuartzScheduler</span><br><span class="line">                org.quartz.scheduler.instanceName = MyScheduler</span><br><span class="line">                # 指定连接池</span><br><span class="line">                org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool</span><br><span class="line">                # 连接池线程数量</span><br><span class="line">                org.quartz.threadPool.threadCount = 11</span><br><span class="line">                # 优先级</span><br><span class="line">                org.quartz.threadPool.threadPriority = 5</span><br><span class="line">                # 不持久化job</span><br><span class="line">                org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-操作"><a href="#4-4-操作" class="headerlink" title="4.4 操作"></a>4.4 操作</h4><h5 id="4-4-1-启动任务"><a href="#4-4-1-启动任务" class="headerlink" title="4.4.1 启动任务"></a>4.4.1 启动任务</h5><blockquote>
<p>工厂启动，调度器启动，任务调度开始</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;	</span><br><span class="line">    <span class="comment">// 工厂启动，任务启动，工厂关闭，任务停止</span></span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-2-任务操作"><a href="#4-4-2-任务操作" class="headerlink" title="4.4.2 任务操作"></a>4.4.2 任务操作</h5><h6 id="4-4-2-1-删除任务"><a href="#4-4-2-1-删除任务" class="headerlink" title="4.4.2.1 删除任务"></a>4.4.2.1 删除任务</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 删除Job</span></span><br><span class="line">    scheduler.deleteJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-4-2-2-暂停、恢复"><a href="#4-4-2-2-暂停、恢复" class="headerlink" title="4.4.2.2 暂停、恢复"></a>4.4.2.2 暂停、恢复</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 暂停，恢复工作</span></span><br><span class="line">    scheduler.pauseJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));<span class="comment">// 暂停工作</span></span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    scheduler.resumeJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));<span class="comment">// 恢复工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-4-2-3-批量操作"><a href="#4-4-2-3-批量操作" class="headerlink" title="4.4.2.3 批量操作"></a>4.4.2.3 批量操作</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    GroupMatcher&lt;JobKey&gt; group1 = GroupMatcher.groupEquals(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    scheduler.pauseJobs(group1); <span class="comment">// 暂停组中所有工作</span></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    scheduler.resumeJobs(group1); <span class="comment">// 恢复组中所有工作 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
</search>
