<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习路线整理</title>
    <url>/2023/04/12/Mysql%20%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>
    <div id="aplayer-FhPQhfOn" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<h1 id="Mysql-面试题"><a href="#Mysql-面试题" class="headerlink" title="Mysql 面试题"></a>Mysql 面试题</h1><table>
<thead>
<tr>
<th>InnoDb</th>
<th align="left">MySAM</th>
</tr>
</thead>
<tbody><tr>
<td>事务: 支持,强调的是保持数据一致</td>
<td align="left">不支持,强调的是性能,查询速度比InnoDB快</td>
</tr>
<tr>
<td>外键: 支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td>索引: 使用聚集索引,索引文件和数据文件绑定</td>
<td align="left">使用非聚集索引,索引文件和数据文件分开存储,索引中保存的是数据文件的指针</td>
</tr>
<tr>
<td>锁  支持表级锁、行级锁；行级锁粒度小，处理并发的能力更强</td>
<td align="left">支持表级锁，用户在执行insert&#x2F;update、select、delete时都会给表自动加锁，效率低</td>
</tr>
<tr>
<td>主键：表必须有唯一索引</td>
<td align="left">没有要求</td>
</tr>
<tr>
<td>存储文件： 在操作系统中的存储文件  .frm : 表定义文件  .ibd： 数据文件</td>
<td align="left">在操作系统中的存储文件： .frm : 表定义文件 .myd ：数据文件 .myi ： 索引文件</td>
</tr>
</tbody></table>
<p>在阐述完两种存储引擎的区别之后，在根据两者的特定，枚举一些使用场景：</p>
<ol>
<li>MyISAM 对于不支持事务并且存在大量 SELECT 的读场景比较合适；</li>
<li>如果业务代码中要支持事务，必须选择 InnoDB 存储引擎；</li>
<li>如果业务代码中要支持外键，必须选择 InnoDB 存储引擎；</li>
</ol>
]]></content>
      <categories>
        <category>面试宝典</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2023/04/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>测试博客搭建</p>
]]></content>
  </entry>
  <entry>
    <title>G1垃圾回收</title>
    <url>/2020/03/19/%E4%BB%8A%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="面向多CPU的最新垃圾回收器-G1"><a href="#面向多CPU的最新垃圾回收器-G1" class="headerlink" title="面向多CPU的最新垃圾回收器-G1"></a>面向多CPU的最新垃圾回收器-G1</h1><h2 id="G1最大的特征"><a href="#G1最大的特征" class="headerlink" title="G1最大的特征"></a>G1最大的特征</h2><p>将大空间分成若干区域,能实现一些更复杂,更精细的的功能</p>
<h2 id="划分成小区域的好处"><a href="#划分成小区域的好处" class="headerlink" title="划分成小区域的好处"></a>划分成小区域的好处</h2><ol>
<li>垃圾回收线程和工作线程能够并行工作,避免”SWT”</li>
<li>不同区域可同时回收,并发性更高,更适合多核服务器</li>
<li>可以先回收一部分区域,回收更快</li>
<li>可以简历停顿预测模型,用户可以设定垃圾回收最长时间</li>
</ol>
<h2 id="Region划分原理"><a href="#Region划分原理" class="headerlink" title="Region划分原理"></a>Region划分原理</h2><ol>
<li>数量方面,region默认总个数为2048个</li>
<li>大小方面,默认是1MB,可以通过参数将其修改为2,4,8,16,32MB这几种</li>
</ol>
<h1 id="第一章总结思考"><a href="#第一章总结思考" class="headerlink" title="第一章总结思考"></a>第一章总结思考</h1><ol>
<li>每个区域该多大?总数为多少比较好</li>
<li>新生&#x2F;老年代区域比例该如何才能最优?</li>
<li>大对象该如何管理</li>
<li>处理YGC,还有几种类型,如何工作?</li>
</ol>
]]></content>
      <categories>
        <category>JVM垃圾回收机制</category>
      </categories>
      <tags>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2023/04/12/java/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-hANpSDoP" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<h1 id="1变量"><a href="#1变量" class="headerlink" title="1变量"></a>1变量</h1><h2 id="1-1-变量的声明"><a href="#1-1-变量的声明" class="headerlink" title="1.1 变量的声明"></a>1.1 变量的声明</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/2341325145112341234.png" alt="屏幕截图 2023-04-12 102646"></p>
<h2 id="1-2-变量的类型"><a href="#1-2-变量的类型" class="headerlink" title="1.2 变量的类型"></a>1.2 变量的类型</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-04-12%20102712.png" alt="屏幕截图 2023-04-12 102712"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672047188697.png" alt="1672047188697"></p>
<h3 id="1-3-基本数据类型"><a href="#1-3-基本数据类型" class="headerlink" title="1.3 基本数据类型"></a>1.3 基本数据类型</h3><p>byte short int long  (1,2,4,8)字节   整数型</p>
<p>float&#x2F;double              (4,8)字节        浮点型  （默认为double类型）</p>
<p>boolean（true&#x2F;false）                       1字节             布尔类型</p>
<p>char                                    2字节           字符型</p>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h3 id="String类型-x2F-对象类型"><a href="#String类型-x2F-对象类型" class="headerlink" title="String类型 &#x2F; 对象类型"></a>String类型 &#x2F; 对象类型</h3><h3 id="1-4-String内存"><a href="#1-4-String内存" class="headerlink" title="1.4 String内存"></a>1.4 String内存</h3><ol>
<li>String直接赋值的变量为字面量，其值被存储在方法区中，地址一样</li>
<li>通过new对象的方式创建的变量，其值被存储在堆内存中，地址不同</li>
<li>如果两个String常量拼接，其值仍存储在方法区中，如果有一个为变量的话，其值就存储在堆内存中。</li>
<li>如图所示：</li>
</ol>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672112069374.png" alt="1672112069374"></p>
<h3 id="1-5-类型转换"><a href="#1-5-类型转换" class="headerlink" title="1.5 类型转换"></a>1.5 类型转换</h3><h4 id="1-5-1-自动转换"><a href="#1-5-1-自动转换" class="headerlink" title="1.5.1 自动转换"></a>1.5.1 自动转换</h4><pre><code>1. 当小类型变量向大类型变量转换时，可以直接自动转换。

  	2. 如果计算中两个操作数有大小两个类型的话，为自动转换为较大类型
          	3. 当byte类型和short类型相加的时候，类型需提升为int类型。
</code></pre>
<h4 id="1-5-2-强制转换"><a href="#1-5-2-强制转换" class="headerlink" title="1.5.2 强制转换"></a>1.5.2 强制转换</h4><ol>
<li>当大类型转换为小类型时，需要强制类型转换</li>
<li>强制类型转换可能会造成数据溢出</li>
<li>如代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> (<span class="type">byte</span>)(b1+s1);</span><br></pre></td></tr></table></figure>

<h1 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h1><h2 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672126014917.png" alt="1672126014917"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+ - * / %</span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a1+a2=&quot;</span> + (a1 + a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1-a2=&quot;</span> + (a1 - a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1*a2=&quot;</span> + (a1 * a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1/a2=&quot;</span> + (a1 / a2));</span><br><span class="line">System.out.println(<span class="string">&quot;a1%a2=&quot;</span> + (a1 % a2));  </span><br></pre></td></tr></table></figure>

<h2 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672126854152-1672131194017.png" alt="1672126854152"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a+=b = &quot;</span>+ (a+=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a-=b = &quot;</span>+ (a-=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a*=b = &quot;</span>+ (a*=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a/=b = &quot;</span>+ (a/=b));</span><br><span class="line">System.out.println(<span class="string">&quot;a%=b = &quot;</span>+ (a%=b));</span><br></pre></td></tr></table></figure>



<h2 id="2-3-自增自减运算符"><a href="#2-3-自增自减运算符" class="headerlink" title="2.3 自增自减运算符"></a>2.3 自增自减运算符</h2><h3 id="2-3-1-自增运算符"><a href="#2-3-1-自增运算符" class="headerlink" title="2.3.1 自增运算符"></a>2.3.1 自增运算符</h3><ul>
<li>a++, 先运算，后自增</li>
<li>++a 先自增， 后运算</li>
</ul>
<h3 id="2-3-2-自减运算符"><a href="#2-3-2-自减运算符" class="headerlink" title="2.3.2 自减运算符"></a>2.3.2 自减运算符</h3><ul>
<li>a–， 先运算，在自减</li>
<li>–a,   先自减，在运算</li>
</ul>
<h2 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp;&amp;  || ! 与 或 非 三种逻辑运算符</span><br></pre></td></tr></table></figure>

<h3 id="2-4-1-逻辑与运算符"><a href="#2-4-1-逻辑与运算符" class="headerlink" title="2.4.1 逻辑与运算符"></a>2.4.1 逻辑与运算符</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672127681216.png" alt="1672127681216"></p>
<ul>
<li>如果第一个条件不符合，则直接返回false,后面的条件将不会执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">181</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">159</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> a&gt;<span class="number">180</span> &amp;&amp; b++ &lt; <span class="number">160</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-逻辑或运算符"><a href="#2-4-2-逻辑或运算符" class="headerlink" title="2.4.2 逻辑或运算符"></a>2.4.2 逻辑或运算符</h3><ul>
<li>如果第一个条件符合，则直接返回true,后面的条件将不会执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">159</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> a&gt;=<span class="number">180</span> || b++&lt;<span class="number">160</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-逻辑非运算符"><a href="#2-4-3-逻辑非运算符" class="headerlink" title="2.4.3 逻辑非运算符"></a>2.4.3 逻辑非运算符</h3><ul>
<li>逻辑非运算符：取相反值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s = !(a&gt;=<span class="number">180</span> || b++&lt;<span class="number">160</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<h1 id="3-条件分支语句"><a href="#3-条件分支语句" class="headerlink" title="3 条件分支语句"></a>3 条件分支语句</h1><h2 id="3-1-if-else-语句"><a href="#3-1-if-else-语句" class="headerlink" title="3.1 if-else 语句"></a>3.1 if-else 语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果条件为真，则执行相应的语句</span></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;已经成年了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;还没有成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-if-else-if-语句"><a href="#3-2-if-else-if-语句" class="headerlink" title="3.2 if-else-if 语句"></a>3.2 if-else-if 语句</h2><p>不推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">15</span> &amp;&amp;  age &lt;= <span class="number">25</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;青年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">25</span> &amp;&amp; age &lt;= <span class="number">40</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;壮年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">40</span> &amp;&amp; age &lt;= <span class="number">59</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">60</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;老年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-switch语句"><a href="#3-3-switch语句" class="headerlink" title="3.3 switch语句"></a>3.3 switch语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周二&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周三&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周四&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周五&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周六&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;周日&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4.循环语句"></a>4.循环语句</h1><h2 id="4-1-for循环"><a href="#4-1-for循环" class="headerlink" title="4.1 for循环"></a>4.1 for循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//九九乘法表 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(i*j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2while循环"><a href="#4-2while循环" class="headerlink" title="4.2while循环"></a>4.2while循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算奇偶数之和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                o+=m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                j+=m;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶然和&quot;</span>+o);</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数和&quot;</span>+j);</span><br><span class="line">        System.out.println(o&gt;j?<span class="string">&quot;偶数大&quot;</span>:<span class="string">&quot;奇数大&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-3-do-while循环"><a href="#4-3-do-while循环" class="headerlink" title="4.3 do- while循环"></a>4.3 do- while循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">       <span class="keyword">do</span>&#123;</span><br><span class="line">           s--;</span><br><span class="line">           System.out.println(s);</span><br><span class="line">       &#125;<span class="keyword">while</span>(s &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h1 id="5-方法"><a href="#5-方法" class="headerlink" title="5 方法"></a>5 方法</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672295032734.png" alt="1672295032734"></p>
<h2 id="5-2-方法参数列表"><a href="#5-2-方法参数列表" class="headerlink" title="5.2 方法参数列表"></a>5.2 方法参数列表</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672296358783.png" alt="1672296358783"></p>
<h2 id="5-3-方法的返回值"><a href="#5-3-方法的返回值" class="headerlink" title="5.3 方法的返回值"></a>5.3 方法的返回值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672302900772.png" alt="1672302900772"></p>
<h2 id="5-4方法的重载"><a href="#5-4方法的重载" class="headerlink" title="5.4方法的重载"></a>5.4方法的重载</h2><blockquote>
<p>重载（Overload）:一个类中定义多个相同名称的方法</p>
<p>要求：</p>
<blockquote>
<p>方法名称相同。</p>
<p>参数列表不同（类型，个数，顺序）.</p>
<p>与防问修饰符、返回值类型无关</p>
<p>调用带有重载的方法时，需要根据传入的实参去找到与之匹配的方法。</p>
<p>好处：灵活、方便、屏蔽使用差异。</p>
</blockquote>
</blockquote>
<h2 id="5-5-方法的递归"><a href="#5-5-方法的递归" class="headerlink" title="5.5 方法的递归"></a>5.5 方法的递归</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672305027101.png" alt="1672305027101"></p>
<h1 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h1><h2 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672364098704.png" alt="1672364098704"></p>
<h2 id="6-2-内存结构"><a href="#6-2-内存结构" class="headerlink" title="6.2 内存结构"></a>6.2 内存结构</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672365189458.png" alt="1672365189458"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672365197447.png" alt="1672365197447"></p>
<h2 id="6-3-定义数组"><a href="#6-3-定义数组" class="headerlink" title="6.3 定义数组"></a>6.3 定义数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组的三种方式</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];    <span class="comment">//动态赋值</span></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>&#125;   <span class="comment">//静态赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="6-4-各个类型的默认值"><a href="#6-4-各个类型的默认值" class="headerlink" title="6.4 各个类型的默认值"></a>6.4 各个类型的默认值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/image-20221230104333576.png" alt="image-20221230104333576"></p>
<h2 id="6-5-数组的扩容（复制）"><a href="#6-5-数组的扩容（复制）" class="headerlink" title="6.5 数组的扩容（复制）"></a>6.5 数组的扩容（复制）</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672371639658.png" alt="1672371639658"></p>
<h3 id="6-5-1-System-arraycopy"><a href="#6-5-1-System-arraycopy" class="headerlink" title="6.5.1. System.arraycopy()"></a>6.5.1. System.arraycopy()</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672372182849.png" alt="1672372182849"></p>
<h4 id="6-5-1-1-示例代码"><a href="#6-5-1-1-示例代码" class="headerlink" title="6.5.1.1 示例代码"></a>6.5.1.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation1</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//System.arraycopy(来源数组，来源数组下标，目标数组，目标数组下标，复制的个数)</span></span><br><span class="line">    System.arraycopy(nums, <span class="number">0</span>, temp, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(temp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-5-2-Arrays-copyOf"><a href="#6-5-2-Arrays-copyOf" class="headerlink" title="6.5.2 Arrays.copyOf()"></a>6.5.2 Arrays.copyOf()</h3><h4 id="6-5-2-1-示例代码"><a href="#6-5-2-1-示例代码" class="headerlink" title="6.5.2.1 示例代码"></a>6.5.2.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation3</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.copyOf(来源数组,新数组长度)</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(nums, <span class="number">20</span>);</span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-3-Arrays-copyOfRange"><a href="#6-5-3-Arrays-copyOfRange" class="headerlink" title="6.5.3 Arrays.copyOfRange()"></a>6.5.3 Arrays.copyOfRange()</h3><h4 id="6-5-3-1-示例代码"><a href="#6-5-3-1-示例代码" class="headerlink" title="6.5.3.1 示例代码"></a>6.5.3.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">//        Arrays.copyOfRange(来源数组，起始下标,复制几个元素)</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOfRange(nums, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-4-clone"><a href="#6-5-4-clone" class="headerlink" title="6.5.4 clone"></a>6.5.4 clone</h3><h4 id="6-5-4-1-示例代码"><a href="#6-5-4-1-示例代码" class="headerlink" title="6.5.4.1 示例代码"></a>6.5.4.1 示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dilatation4</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = nums.clone();</span><br><span class="line"><span class="comment">//        System.out.println(nums == temp);</span></span><br><span class="line">        System.out.println(Arrays.toString(temp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-二维数组"><a href="#6-6-二维数组" class="headerlink" title="6.6 二维数组"></a>6.6 二维数组</h2><h3 id="6-6-1-定义方式："><a href="#6-6-1-定义方式：" class="headerlink" title="6.6.1 定义方式："></a>6.6.1 定义方式：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];  <span class="comment">// 二维数组的第二维可以省略不写</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-遍历二维数组"><a href="#6-6-2-遍历二维数组" class="headerlink" title="6.6.2 遍历二维数组"></a>6.6.2 遍历二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr1[i].length; j++) &#123;</span><br><span class="line">            System.out.print(arr1[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-排序"><a href="#7-排序" class="headerlink" title="7 排序"></a>7 排序</h1><h2 id="7-1-冒泡排序"><a href="#7-1-冒泡排序" class="headerlink" title="7.1 冒泡排序"></a>7.1 冒泡排序</h2><h3 id="7-1-2-概述"><a href="#7-1-2-概述" class="headerlink" title="7.1.2 概述"></a>7.1.2 概述</h3><p>冒泡排序： 相邻的两个数值比较大小,互换位置</p>
<h3 id="7-1-3-代码实现"><a href="#7-1-3-代码实现" class="headerlink" title="7.1.3 代码实现"></a>7.1.3 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] MaoPao(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                   nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                   nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-选择排序"><a href="#7-2-选择排序" class="headerlink" title="7.2 选择排序"></a>7.2 选择排序</h2><h3 id="7-2-1-概述"><a href="#7-2-1-概述" class="headerlink" title="7.2.1 概述"></a>7.2.1 概述</h3><p>固定值与其他值依次比较大小，互换位置</p>
<h3 id="7-2-2-代码实现"><a href="#7-2-2-代码实现" class="headerlink" title="7.2.2 代码实现"></a>7.2.2 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                   nums[i] = nums[j];</span><br><span class="line">                   nums[j] = temp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8 面向对象"></a>8 面向对象</h1><ul>
<li>面向对象：面向具体事物（初步理解）</li>
<li>抽象事物在java中体现：类</li>
<li>具体食物在java中体现：对象，用类创建对象</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711203594-1672714024508.png" alt="1672711203594"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711176694-1672713913459.png" alt="1672711176694"></p>
<p><img src="F:\java学习\千峰\个人总结\java\java.assets\1672711184213-1672713917997.png" alt="1672711184213"></p>
<h2 id="8-1-对象属性赋值：-全局变量赋值"><a href="#8-1-对象属性赋值：-全局变量赋值" class="headerlink" title="8.1 对象属性赋值： 全局变量赋值"></a>8.1 对象属性赋值： 全局变量赋值</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672711333816.png" alt="1672711333816"></p>
<h2 id="8-2-第二种方式：-setXXX-getXXX"><a href="#8-2-第二种方式：-setXXX-getXXX" class="headerlink" title="8.2 第二种方式：  setXXX   getXXX"></a>8.2 第二种方式：  setXXX   getXXX</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXXX</span><span class="params">(String xxx)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.xxx = xxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取属性值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getXXX</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-面向对象三大特征"><a href="#9-面向对象三大特征" class="headerlink" title="9 面向对象三大特征"></a>9 面向对象三大特征</h1><h2 id="9-1-封装"><a href="#9-1-封装" class="headerlink" title="9.1 封装"></a>9.1 封装</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672795159881.png" alt="1672795159881"></p>
<h3 id="9-1-1-属性封装"><a href="#9-1-1-属性封装" class="headerlink" title="9.1.1 属性封装"></a>9.1.1 属性封装</h3><ul>
<li>private 修饰属性， 赋值： set 构造器赋值  取值： get</li>
<li>让用户只能在规定的方法内进行访问属性，保护类的内部结构，防止用户误操作导致系统出现错误。</li>
</ul>
<h3 id="9-1-2-类的封装"><a href="#9-1-2-类的封装" class="headerlink" title="9.1.2 类的封装"></a>9.1.2 类的封装</h3><ul>
<li>类里边的属性和方法：同属于一个类·</li>
<li>把属性类的：属性和方法集中封装到一起</li>
</ul>
<h3 id="9-1-3-方法的封装："><a href="#9-1-3-方法的封装：" class="headerlink" title="9.1.3 方法的封装："></a>9.1.3 方法的封装：</h3><ul>
<li>对功能的抽取</li>
<li>提高代码的可维护性和可复用性</li>
<li>提高代码的可阅读性</li>
</ul>
<h3 id="9-1-4-封装的作用"><a href="#9-1-4-封装的作用" class="headerlink" title="9.1.4 封装的作用"></a>9.1.4 封装的作用</h3><ol>
<li>概念：尽可能隐藏对象的内部实现细节，控制对象的修改及访问的权限</li>
<li>实现方式：提供公共访问方法，以保证数据的正常录入</li>
<li>通过对方法的封装可以提高代码的可复用性、可维护性以及可阅读性</li>
</ol>
<h2 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672796325270.png" alt="1672796325270"></p>
<h3 id="9-2-1-继承的作用"><a href="#9-2-1-继承的作用" class="headerlink" title="9.2.1 继承的作用"></a>9.2.1 继承的作用</h3><ol>
<li>概念：两个类之间的继承关系，必须满足“is a” 的关系  目的：抽取出共性的特征和行为，定义在父类中，实现重用</li>
<li>产生继承关系之后，子类可以使用父类中的属性和方法，也可定义子类独有的属性和方法</li>
<li>好处：既提高代码的可复用性，有提高代码的可扩展性</li>
</ol>
<h3 id="9-2-2-方法的重写"><a href="#9-2-2-方法的重写" class="headerlink" title="9.2.2 方法的重写"></a>9.2.2 方法的重写</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672804065806.png" alt="1672804065806"></p>
<ul>
<li>前提：当父类提供的方法无法满足子类需求时，可在子类中定义和父类相同的方法进行重写（Override）。</li>
<li>方法重写的执行：<ul>
<li>子类重写父类方法后，调用时优先执行子类重写后的方法</li>
</ul>
</li>
<li>方法重写规则：<ul>
<li>方法名称，参数列表，返回值类型必须与父类相同</li>
<li>访问修饰符可与父类相同或是比父类更广泛</li>
</ul>
</li>
</ul>
<h2 id="9-3-多态"><a href="#9-3-多态" class="headerlink" title="9.3 多态"></a>9.3 多态</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672819344954.png" alt="1672819344954"></p>
<ul>
<li>为什么存在：想要只访问父类的属性和方法，及重写方法</li>
<li>格式：1.有继承 2.有重写 3.父类 对象名 &#x3D; new 子类(); 父类的引用指向子类的对象</li>
<li>实际运行过程中，依旧遵循着重写原则，如果子类重写了父类中的方法，执行子类中重写后的方法，否则执行父类中的方法。</li>
<li>父类方法：父类方法的参数和返回值可以使用  父类对象</li>
<li>多态调用方法为子类中被重写的方法，调用属性为父类中的属性。</li>
</ul>
<h3 id="9-3-1-向上转型和向下转型"><a href="#9-3-1-向上转型和向下转型" class="headerlink" title="9.3.1 向上转型和向下转型"></a>9.3.1 向上转型和向下转型</h3><h4 id="9-3-1-1-向上转型"><a href="#9-3-1-1-向上转型" class="headerlink" title="9.3.1.1 向上转型"></a>9.3.1.1 向上转型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类 对象 = <span class="keyword">new</span> 子类();</span><br><span class="line">对象.方法()  <span class="comment">//调用的是子类中被重写的方法</span></span><br></pre></td></tr></table></figure>

<h4 id="9-3-1-2-向下转型"><a href="#9-3-1-2-向下转型" class="headerlink" title="9.3.1.2 向下转型"></a>9.3.1.2 向下转型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">instanceof</span> 关键字  </span><br><span class="line">对象 <span class="keyword">instanceof</span> 类 如果该对象是该类的子类或父类，代表可以转型</span><br><span class="line"> <span class="keyword">if</span>( s1 <span class="keyword">instanceof</span>  Dog) &#123;</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> (Dog)s1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>向下转型的前提是父类对象指向的是子类对象（也就是说，在向下转型之前，它得先向上转型）</li>
<li>向下转型只能转型为本类对象（猫是不能变成狗的）。</li>
</ul>
<h2 id="9-4-this-x2F-super"><a href="#9-4-this-x2F-super" class="headerlink" title="9.4 this&#x2F;super"></a>9.4 this&#x2F;super</h2><h3 id="9-4-1-this方法"><a href="#9-4-1-this方法" class="headerlink" title="9.4.1 this方法"></a>9.4.1 this方法</h3><ul>
<li>this:是在方法内部</li>
<li>this:指当前对象， this.属性 ， this.方法</li>
<li>this(xxx): 可以调用构造器，必须写在第一行</li>
</ul>
<h3 id="9-4-2-super-方法"><a href="#9-4-2-super-方法" class="headerlink" title="9.4.2 super()方法"></a>9.4.2 super()方法</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672818320628.png" alt="1672818320628"></p>
<ul>
<li>super: 子类的方法里边</li>
<li>super： super.父类属性  super.父类方法</li>
<li>子类重写父类里边的方法：</li>
<li>构造器： 调用类构造器：  必须写在第一行</li>
</ul>
<ol>
<li><p>必要性： 在子类中，可直接访问从父类继承到的属性和方法，但如果父子类的属性或方法存在重名(属性遮蔽、方法重写)时，需要加以区分，才可专项访问。</p>
</li>
<li><p>访问属性方法：super.属性   super.父类方法</p>
</li>
<li><ul>
<li><p>继承对象创建顺序: 在具有继承关系的对象创建中，构建子类队形会先构建父类对象</p>
</li>
<li><p>由父类的共性内容，叠加子类的独有内容，组合完成完整的子类对象</p>
</li>
</ul>
</li>
<li><p>调用父类构造器：在子类构造器中，super()调用父类空参构造器，super(xx,xx)调用父类有参构造器</p>
</li>
</ol>
<h3 id="9-4-3-super和this的区别"><a href="#9-4-3-super和this的区别" class="headerlink" title="9.4.3 super和this的区别"></a>9.4.3 super和this的区别</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672818537114.png" alt="1672818537114"></p>
<ul>
<li>this或super使用在构造方法时，都要求在首行</li>
<li>当子类构造中使用了this(实参),即不可再同时书写super()或super(实参),会由this()指向构造方法完成super()调用。</li>
</ul>
<h1 id="10-权限修饰符"><a href="#10-权限修饰符" class="headerlink" title="10 权限修饰符"></a>10 权限修饰符</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672802792755.png" alt="1672802792755"></p>
<ul>
<li>public修饰的成员，在同类，同包，子类（继承自本类），其他包中都可以访问</li>
<li>protected修饰的成员，在同类，同包、子类中可以访问，但是在其他包中不能访问</li>
<li>default修饰的成员，在同类，通报中可以访问，但是在其他包中不管是不是子类都不能访问</li>
<li>private修饰的成员，只能在同类中被访问，而在同包、子类和其他包中是不能访问的</li>
</ul>
<p><strong>注意：</strong><em><strong>子类在不同包中调用父类中被protected修饰的属性或方法时，只能通过子类对象来进行调用，父类对象在不同包下无权调用自己被protected修饰的成员或方法。</strong></em></p>
<h1 id="11-关键字"><a href="#11-关键字" class="headerlink" title="11 关键字"></a>11 关键字</h1><h2 id="11-1-abstract-关键字"><a href="#11-1-abstract-关键字" class="headerlink" title="11.1 abstract 关键字"></a>11.1 abstract 关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672881709758.png" alt="1672881709758"></p>
<ul>
<li>抽象类<ul>
<li>abstract修饰类，此类不能new对象<ul>
<li>倍abstract修饰的类，称为抽象类</li>
<li>抽象类意为不够完整的类，不够具体的类</li>
<li>抽象类无法独立存在，即不能new对象</li>
</ul>
</li>
<li>抽象类的作用：<ul>
<li>可被子类继承，提供共性属性和方法</li>
<li>可声明为引用，更自然地使用多态</li>
</ul>
</li>
</ul>
</li>
<li>抽象方法<ul>
<li>定义<ul>
<li>不该被实现的方法</li>
<li>方法声明必要，方法实现多余</li>
</ul>
</li>
<li>注意：<ul>
<li>抽象方法所属的类必须是抽象类</li>
<li>抽象类不一定有抽象方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="11-2-static关键字"><a href="#11-2-static关键字" class="headerlink" title="11.2 static关键字"></a>11.2 static关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672882758882.png" alt="1672882758882"></p>
<ul>
<li>静态属性<ul>
<li>static 属性类型 属性值</li>
<li>访问方式： 类名.属性名  不推荐使用对象来调用静态属性</li>
</ul>
</li>
<li>静态方法<ul>
<li>方法的返回值类型前边加static</li>
<li>访问方式：类名.方法 不可以使用对象来调用静态方法</li>
<li>一般用来做工具类中的方法</li>
<li>静态方法允许直接访问静态成员</li>
<li>静态方法不能直接访问非静态成员</li>
<li>静态方法中不允许使用this或是super关键字</li>
<li>静态方法可以继承，不能重写，没有多态</li>
</ul>
</li>
<li>静态代码块<ul>
<li>执行顺序 ： 初始化赋值 》 静态代码块赋值 》 代码块赋值 》 构造器赋值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    只执行一次</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态代码块<ul>
<li>创建对象时，触发动态代码块的执行。</li>
<li>执行地位：初始化属性之后，构造方法代码之前</li>
<li>作用：可为实例属性赋值，或必要的初始行为</li>
</ul>
</li>
</ul>
<h2 id="11-3-final关键字"><a href="#11-3-final关键字" class="headerlink" title="11.3 final关键字"></a>11.3 final关键字</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672889388365.png" alt="1672889388365"></p>
<ul>
<li>final关键字<ul>
<li>概念：最后的，不可更改的</li>
<li>修饰类：final修饰类，此类蹦被继承</li>
<li>修饰方法：final修饰方法：此方法不能被重写</li>
<li>修饰变量： final修饰变量 ： 此变量不能被改变（常量）</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672890392223.png" alt="1672890392223"></p>
<ul>
<li>常量<ul>
<li>实例常量：实例常量不在提供默认值，必须手动赋予初始值。<ul>
<li>赋值时机：显示初始化、动态代码。</li>
</ul>
</li>
<li>静态常量：静态常量不在提供默认值，必须手动赋予初始值。<ul>
<li>赋值时机：显示初始化，静态代码块</li>
</ul>
</li>
<li>不同常量类的特点<ul>
<li>基本数据类型常量：值不可变</li>
<li>引用数据类型常量：地址不可变</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> AGE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String NAME;  <span class="comment">// 实例常量  只能在显示初始化 、动态代码块 、 构造器中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> sex;  <span class="comment">// 静态常量 只能在显示初始化 、静态代码块中赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">        NAME = <span class="string">&quot;张三&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FinalTest1</span><span class="params">(<span class="type">int</span> AGE)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.AGE = AGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-接口"><a href="#12-接口" class="headerlink" title="12 接口"></a>12 接口</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672903735937.png" alt="1672903735937"></p>
<ul>
<li><p>接口中的属性都是静态常量 public static final ,通常可默认不写</p>
</li>
<li><p>jdk1.8以前，接口中的方法都是使用abstract修饰的抽象方法</p>
<ul>
<li>使用abstract修饰，供子类实现使用，没有方法体</li>
<li>默认使用public abstract修饰，可省略不写</li>
</ul>
</li>
<li><p>jdk 1.8中，新增default修饰方法</p>
<ul>
<li>使用default修饰，不可省略，供子类调用或重写（只能通过最终实现类调用，不能通过抽象类调用）</li>
</ul>
</li>
<li><p>静态方法：jdk8</p>
<ul>
<li>用static修饰，供接口直接调用，只能通过接口名称调用，实现类不能重写或实现</li>
</ul>
</li>
<li><p>私有方法：jdk9</p>
<ul>
<li>用private修饰，只能在本类中使用</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>接口不能创建对象</li>
<li>接口的子类必须实现接口中所有的抽象方法</li>
<li>接口中没有构造方法，没有代码块</li>
</ul>
</li>
<li><p>函数式接口</p>
<ul>
<li>抽象方法只有一个</li>
<li>加个注解：@FunctionalInterface</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//该注解限制该抽象类中只能有一个抽象方法</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface IStudent &#123;</span><br><span class="line">    public void a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="13-设计模式"><a href="#13-设计模式" class="headerlink" title="13 设计模式"></a>13 设计模式</h1><h2 id="13-1-单例设计模式"><a href="#13-1-单例设计模式" class="headerlink" title="13.1 单例设计模式"></a>13.1 单例设计模式</h2><h3 id="13-1-1-饿汉式"><a href="#13-1-1-饿汉式" class="headerlink" title="13.1.1 饿汉式"></a>13.1.1 饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  实现序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        判断flag是否为true，如果为true，说明不是第一次访问，直接抛出异常，否则的话，说明第一次执行。</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不能创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    私有化对象，使用Volatile 使其可见，有序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span>  <span class="type">Singleton</span> <span class="variable">install</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="comment">//    公有方法，使外界可以通过该方法创建对象</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> install;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-1-2-懒汉式"><a href="#13-1-2-懒汉式" class="headerlink" title="13.1.2 懒汉式"></a>13.1.2 懒汉式</h3><h4 id="13-1-2-1-懒汉式-静态内部类"><a href="#13-1-2-1-懒汉式-静态内部类" class="headerlink" title="13.1.2.1 懒汉式-静态内部类"></a>13.1.2.1 懒汉式-静态内部类</h4><p>原理：由于JVM在加载外部类的过程中，是不会加载静态内部类的，<br>只有内部类的属性&#x2F;方法被调用时才会被加载，并初始化其静态属性。<br>静态属性由于被static修饰，保证只被实例化一次，并且严格保证实例化顺序</p>
<p> 说明：第一次加载Singleton类时不会初始化instance,只有第一次调用getInstance,<br> 虚拟机加载SingletonDemo并初始化instance,这样不仅能确保线程安全，<br> 也能保证Singleton的唯一性</p>
<p> 小结：静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的<br> 一种单例模式，在没有加任何锁的情况下，保证了多线程下的安全，并且<br> 没有任何性能影响和空间浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不可以创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo1</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton1</span> <span class="variable">install</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonDemo1.install;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    序列化时直接放回该对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonDemo1.install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="13-2-1-2-懒汉式-双重锁"><a href="#13-2-1-2-懒汉式-双重锁" class="headerlink" title="13.2.1.2 懒汉式-双重锁"></a>13.2.1.2 懒汉式-双重锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="comment">//    1.创建一个私有的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不可以创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    volatie 保证指令的可见性和有序性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">install</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Singleton.install;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        第一次判斷如果install的值不為null，不需要抢占锁，直接返回对象</span></span><br><span class="line">        <span class="keyword">if</span>(install == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="comment">//                第二次判断，判断install是否为null，如果</span></span><br><span class="line">                <span class="keyword">if</span> (install == <span class="literal">null</span>) &#123;</span><br><span class="line">                    install = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> install;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-1-3-枚举方式"><a href="#13-1-3-枚举方式" class="headerlink" title="13.1.3 枚举方式"></a>13.1.3 枚举方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> enmu Singleton&#123;</span><br><span class="line">    instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-2-模板设计"><a href="#13-2-模板设计" class="headerlink" title="13.2 模板设计"></a>13.2 模板设计</h2><h2 id="13-2-1-钩子模式"><a href="#13-2-1-钩子模式" class="headerlink" title="13.2.1 钩子模式"></a>13.2.1 钩子模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HookAbstract</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;装箱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">()</span>&#123;</span><br><span class="line">        a();</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook1</span> <span class="keyword">extends</span> <span class="title class_">HookAbstract</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步，打开舱门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步，存放进去&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook2</span> <span class="keyword">extends</span> <span class="title class_">HookAbstract</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;剁成肉馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包入面团&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="14-内部类"><a href="#14-内部类" class="headerlink" title="14 内部类"></a>14 内部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 内部类</span></span><br><span class="line"><span class="comment">    * 定义：在一个类的内部在定义一个类</span></span><br><span class="line"><span class="comment">    * 特点：1.变异之后可以产生独立的字节码文件，.class文件</span></span><br><span class="line"><span class="comment">    *      2.内部类可以直接访问外部类的私有成员，而不破坏封装</span></span><br><span class="line"><span class="comment">    *      3.可为外部类提供必要的内部功能组件</span></span><br><span class="line"><span class="comment">    * 成员内部类:</span></span><br><span class="line"><span class="comment">    *              1.在类的内部定义，与实例变量，实例方法同级别的类</span></span><br><span class="line"><span class="comment">    *              2.外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象</span></span><br><span class="line"><span class="comment">    *              Outer out = new Outer();</span></span><br><span class="line"><span class="comment">    *              Outer.Inner in = out.new Inner();</span></span><br><span class="line"><span class="comment">    *              3.当外部类，内部类，存在重名属性时，会优先访问内部类属性</span></span><br><span class="line"><span class="comment">    *              4.成员内部类不能访问静态成员</span></span><br><span class="line"><span class="comment">    *  静态内部类：</span></span><br><span class="line"><span class="comment">    *              1. 不依赖外部对象，可直接创建或通过类名访问，可声明静态成员</span></span><br><span class="line"><span class="comment">    *              2.只能直接访问外部类的静态成员（实例成员需实例化外部对象）</span></span><br><span class="line"><span class="comment">    *              Outer.Inner inner = new Outer.Inner();</span></span><br><span class="line"><span class="comment">    *              Outer.Inner.show();</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 局部内部类： 1.定义在外部类方法中，作用范围和创建对象范围仅限于当前方法</span></span><br><span class="line"><span class="comment">    *                  也就是说只能在方法中new 对象</span></span><br><span class="line"><span class="comment">    *              2.局部内部类访问外部类当前方法中的局部变量时，无法保障变量的生命周期与自身相同</span></span><br><span class="line"><span class="comment">    *                  也就是说，局部类中使用方法的变量，生成的class文件会在变量前自动添加final,限制类的使用范围</span></span><br><span class="line"><span class="comment">    *                  也就是只能在方法内部使用</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 匿名内部类：1.没有类名的局部内部类(一切特征都与局部内部类相同)</span></span><br><span class="line"><span class="comment">    *             2.必须继承一个父类或者实现一个接口</span></span><br><span class="line"><span class="comment">    *             3.定义类、实现类、创建方法的语法合并，只能创建一个该类的对象</span></span><br><span class="line"><span class="comment">    *             4.优点：减少代码量</span></span><br><span class="line"><span class="comment">    *             5.缺点：可读性较差</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OutClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>();</span><br><span class="line"><span class="comment">//        OutClass.InnerClass in = out.new InnerClass();</span></span><br><span class="line"><span class="comment">//        in.aa();</span></span><br><span class="line"><span class="comment">//        InnerClass2.aa();</span></span><br><span class="line">        <span class="type">InnerClass2</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass2</span>();</span><br><span class="line">        OutClass.<span class="type">InnerClass2</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>.InnerClass2();</span><br><span class="line">        inner.aaa();</span><br><span class="line">        i2.aaa();</span><br><span class="line">        InnerClass2.aa();</span><br><span class="line">        <span class="type">IA</span> <span class="variable">c</span> <span class="operator">=</span> out.c();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass2</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> IA <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass3</span> <span class="keyword">implements</span> <span class="title class_">IA</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerClass3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="15-Object类"><a href="#15-Object类" class="headerlink" title="15 Object类"></a>15 Object类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 概述：  1.所有类的祖宗，自定义类乜有父类，那么直接继承Object,如果有父类，那么间接继承Object</span><br><span class="line"> *         2.Object多态：做方法参数或者返回值时，可以指向任何对象</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *  方法 ： 1.getClass  返回引用中存储的实际对象类型</span><br><span class="line"> *          2.hashCode: (1)返回该对象的十进制的哈希码值</span><br><span class="line"> *                      （2）哈希算法根据对象的地址或字符串或数字计算出来的int类型的数值</span><br><span class="line"> *                      （3）哈希码并不唯一，可保证相同对象返回相同哈希码，尽量保障不同对象返回不同哈希码</span><br><span class="line"> *          3.toString: (1)返回该对象的字符串表示（表现形式）</span><br><span class="line"> *                      （2）可以根据程序需求覆盖该方法，如：展示对象各个属性值</span><br><span class="line"> *          4.equals():   可以判断两个对象是否相同</span><br><span class="line"> *          5.finalize(): (1)当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象，进入回收队列</span><br><span class="line"> *          ·             （2）垃圾对象 --- 没有有效引用指向此对象时，即为垃圾对象</span><br><span class="line"> *                          （3）垃圾回收： 有GC销毁垃圾对象，释放数据存储空间</span><br><span class="line"> *                          （4）自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象</span><br><span class="line"> *                          （5）手动回收机制，使用System.gc()，通知JVM进行垃圾回收</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Object1 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws NoSuchFieldException &#123;</span><br><span class="line">        Object1 o1 = new Object1();</span><br><span class="line">        Class&lt;? extends Object1&gt; aClass = o1.getClass();</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">        String name = aClass.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String filedTypeName = aClass.getField(&quot;b&quot;).getType().getName();</span><br><span class="line">        System.out.println(&quot;b的类型&quot;+filedTypeName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void aa()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-1-应用的分类"><a href="#15-1-应用的分类" class="headerlink" title="15.1 应用的分类"></a>15.1 应用的分类</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1672998345117.png" alt="1672998345117"></p>
<h2 id="15-2-x3D-x3D-与-equals的区别"><a href="#15-2-x3D-x3D-与-equals的区别" class="headerlink" title="15.2 &#x3D;&#x3D; 与 equals的区别"></a>15.2 &#x3D;&#x3D; 与 equals的区别</h2><ul>
<li>在Object底层中，&#x3D;&#x3D; 和 equals没有区别，都是使用&#x3D;&#x3D;进行判断，比较的是两个对象的地址值</li>
<li>在一些常用的类中，比如String等类，对equals进行了重写，之后equals比较的为实际值</li>
<li>如果自己定义的类，需要比较类中成员是否相等，需要对equals进行重写</li>
</ul>
<h1 id="16-包装类"><a href="#16-包装类" class="headerlink" title="16 包装类"></a>16 包装类</h1><ol>
<li>类 属性和方法 对象 调用方法 方法调用方法</li>
<li>继承 接口 多态</li>
<li>if for while</li>
<li>三层结构</li>
<li>dao  &#x3D;&#x3D;》 IO 文件</li>
<li>server</li>
<li>controller &#x3D;&#x3D;&gt; test测试</li>
</ol>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673227287802.png" alt="1673227287802"></p>
<ul>
<li><p>概念 </p>
<ul>
<li>基本数据类型所对应的引用数据类型</li>
<li>Object可统一所有数据，包装类的默认值是null</li>
</ul>
</li>
<li><p>装箱拆箱  </p>
<ul>
<li>JDK 5.0之后，自动装箱，拆箱，基本数据类型和包装类自动转换</li>
<li>如果有，可以采用parseXX和valueOf</li>
<li>注意，需保证类型兼容，否则抛出NumberFormatException异常</li>
<li>Java预先创建了256个常用的整数包装类型对象。（-128  ~ 127）的常数在实际应用当中，对已经创建的对象进行复用，节约内存效果明显。</li>
</ul>
</li>
<li><p>parseInt  将String类型转换为基本数据类型。</p>
</li>
<li><p>valueOf   将基本数据类型转换为String类型</p>
</li>
</ul>
<h1 id="17-String类"><a href="#17-String类" class="headerlink" title="17 String类"></a>17 String类</h1><h2 id="17-1-说明"><a href="#17-1-说明" class="headerlink" title="17.1 说明"></a>17.1 说明</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673244235423.png" alt="1673244235423"></p>
<h2 id="17-2-代码"><a href="#17-2-代码" class="headerlink" title="17.2 代码"></a>17.2 代码</h2><ul>
<li><ol>
<li>charAt() 根据下标获取字符</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//      1.  charAt()  根据下标获取字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span><span class="string">&quot;1ddg34tge4&quot;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str1.charAt(<span class="number">3</span>);</span><br><span class="line">        System.out.println(c);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>判断当前字符串是否包含str contains()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;345&quot;</span>;</span><br><span class="line">System.out.println(str1.contains(str2));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>将字符串转化为数组</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span>  <span class="operator">=</span> <span class="string">&quot;1fft356&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] array = str3.toCharArray();</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>查找str第一次出现的下标，存在，则返回该下标，否则，则返回-1</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查找str第一次出现的下标，存在，则返回该下标，否则，则返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;300dfgj2393&quot;</span>;</span><br><span class="line">        System.out.println(str4.indexOf(<span class="string">&quot;d34&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="5">
<li>返回字符串的长度 length()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回字符串的长度 length()</span></span><br><span class="line">str4.length();</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="6">
<li>去掉字符串前后的空格 trim</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        去掉字符串前后的空格</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot; dfas32 &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> str5.trim();</span><br><span class="line">        System.out.println(trim);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="7">
<li>将小写字母转换为大写字母</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        将小写转换成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="string">&quot;efsdt&quot;</span>;</span><br><span class="line">        System.out.println(str6.toUpperCase());</span><br><span class="line"><span class="comment">// 将大写字母转化为小写</span></span><br><span class="line">        str6.toLowerCase();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="8">
<li>判断是否以str开头  &#x2F;  是否以str结尾</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        是否以str开头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str7</span> <span class="operator">=</span> <span class="string">&quot;132fyerty&quot;</span>;</span><br><span class="line">        System.out.println(str7.startsWith(<span class="string">&quot;133e&quot;</span>));</span><br><span class="line"><span class="comment">//        是否以str结尾</span></span><br><span class="line">        System.out.println(str7.endsWith(<span class="string">&quot;y&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="9">
<li>将字符串替换为新字符串</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        将字符串替换为新字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str8</span> <span class="operator">=</span> <span class="string">&quot;1,t,6,rfey,7,ds&quot;</span>;</span><br><span class="line">        System.out.println(str8.replace(<span class="string">&quot;,6&quot;</span>, <span class="string">&quot;s&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="10">
<li>根据str做拆分</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        根据str做拆分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str9</span> <span class="operator">=</span> <span class="string">&quot;2/443/3/fad/3/d&quot;</span>;</span><br><span class="line">        String[] ss = str9.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(ss));</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="11">
<li>在字符串中截取出来一个字符串</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    在字符串中截取出来一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str10</span> <span class="operator">=</span> <span class="string">&quot;er34t54rrf2&quot;</span>;</span><br><span class="line">        System.out.println(str10.substring(<span class="number">4</span>));</span><br><span class="line">        System.out.println(str10.substring(<span class="number">3</span>, <span class="number">8</span>));</span><br></pre></td></tr></table></figure>

<h1 id="18-可变字符串"><a href="#18-可变字符串" class="headerlink" title="18 可变字符串"></a>18 可变字符串</h1><h2 id="18-1-概念："><a href="#18-1-概念：" class="headerlink" title="18.1 概念："></a>18.1 概念：</h2><ul>
<li>可在内存中创建可变的缓存空间，存储频繁改变的字符串</li>
</ul>
<h2 id="18-2-两个类："><a href="#18-2-两个类：" class="headerlink" title="18.2 两个类："></a>18.2 两个类：</h2><ul>
<li><p>Java中提供了两个字符串类：</p>
<ul>
<li>StringBuilder：可变字符串，JDK 1.5提供，运行效率快，线程不安全</li>
<li>StringBuffer: 可变长字符串，JDK1.0提供，运行效率慢，线程安全</li>
<li>这两个类中方法和属性完全一致</li>
</ul>
</li>
<li><ol>
<li>追加内容 append()</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//追加内容</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append();</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>将指定字符串插入此序列中</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将指定字符串插入此序列中</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.insert(插入的位置，插入的内容);  </span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>delete() 移出此序列的字符串中的字符</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移出此序列的字符串中的字符</span></span><br><span class="line"><span class="comment">// delete(开始下标，结束下标+1)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.delete()</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>replace() 使用给定字符串替换此序列的子字符串的字符，start开始位置，end结束位置</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); </span><br><span class="line">build.replace(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&quot;iii&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="5">
<li>返回长度（字符数）</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> build.length();</span><br></pre></td></tr></table></figure>

<h1 id="19-小数的计算"><a href="#19-小数的计算" class="headerlink" title="19 小数的计算"></a>19 小数的计算</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673253618875.png" alt="1673253618875"></p>
<ul>
<li>BigDeicmal<ul>
<li>位置：java.math包中</li>
<li>作用：精确计算浮点数</li>
<li>创建方式：BigDecimal bd &#x3D; new BigDecimal(“1.0”)。</li>
</ul>
</li>
<li>方法名：<ul>
<li>BigDecimal add(BigDecimal bd)      加</li>
<li>BigDecimal subtract(BigDecimal bd)      减</li>
<li>BigDecimal multiply(BigDecimal bd)    乘</li>
<li>BigDecimal divide(BigDecimal db)        除</li>
</ul>
</li>
<li>除法<ul>
<li>divide(BigDecimal bd,int scal,RoundingMode mode)。</li>
<li>参数scale: 指定精确到小数点后几位</li>
<li>参数mode:<ul>
<li>指定小数部分的取舍模式，通常采用四舍五入的模式</li>
<li>取值为BigDecimal.Round_HALE_UP</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="19-1-参数mode选择概述"><a href="#19-1-参数mode选择概述" class="headerlink" title="19.1 参数mode选择概述"></a>19.1 参数mode选择概述</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">八种舍入模式解释如下</span><br><span class="line">1、ROUND<span class="built_in">_</span>UP</span><br><span class="line"></span><br><span class="line">舍入远离零的舍入模式。</span><br><span class="line"></span><br><span class="line">在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会减少计算值的大小。</span><br><span class="line"></span><br><span class="line">2、ROUND<span class="built_in">_</span>DOWN</span><br><span class="line"></span><br><span class="line">接近零的舍入模式。</span><br><span class="line"></span><br><span class="line">在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会增加计算值的大小。</span><br><span class="line"></span><br><span class="line">3、ROUND<span class="built_in">_</span>CEILING</span><br><span class="line"></span><br><span class="line">接近正无穷大的舍入模式。</span><br><span class="line"></span><br><span class="line">如果 BigDecimal 为正，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;</span><br><span class="line"></span><br><span class="line">如果为负，则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会减少计算值。</span><br><span class="line"></span><br><span class="line">4、ROUND<span class="built_in">_</span>FLOOR</span><br><span class="line"></span><br><span class="line">接近负无穷大的舍入模式。</span><br><span class="line"></span><br><span class="line">如果 BigDecimal 为正，则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同;</span><br><span class="line"></span><br><span class="line">如果为负，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同。</span><br><span class="line"></span><br><span class="line">注意，此舍入模式始终不会增加计算值。</span><br><span class="line"></span><br><span class="line">5、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>UP</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。</span><br><span class="line"></span><br><span class="line">如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;否则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</span><br><span class="line"></span><br><span class="line">6、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>DOWN</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。</span><br><span class="line"></span><br><span class="line">如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND<span class="built_in">_</span>UP 相同;否则舍入行为与 ROUND<span class="built_in">_</span>DOWN 相同(五舍六入)。</span><br><span class="line"></span><br><span class="line">7、ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>EVEN</span><br><span class="line"></span><br><span class="line">向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</span><br><span class="line"></span><br><span class="line">如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>UP 相同;</span><br><span class="line"></span><br><span class="line">如果为偶数，则舍入行为与 ROUND<span class="built_in">_</span>HALF<span class="built_in">_</span>DOWN 相同。</span><br><span class="line"></span><br><span class="line">注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。</span><br><span class="line"></span><br><span class="line">此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。</span><br><span class="line"></span><br><span class="line">如果前一位为奇数，则入位，否则舍去。</span><br><span class="line"></span><br><span class="line">以下例子为保留小数点1位，那么这种舍入方式下的结果。</span><br><span class="line"></span><br><span class="line">1.15&gt;1.2 1.25&gt;1.2</span><br><span class="line"></span><br><span class="line">8、ROUND<span class="built_in">_</span>UNNECESSARY</span><br><span class="line">断言请求的操作具有精确的结果，因此不需要舍入。</span><br><span class="line">如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自学部分！</span><br></pre></td></tr></table></figure>



<h1 id="20-日期类"><a href="#20-日期类" class="headerlink" title="20 日期类"></a>20 日期类</h1><h2 id="20-1-Date"><a href="#20-1-Date" class="headerlink" title="20.1 Date"></a>20.1 Date</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673254384462.png" alt="1673254384462"></p>
<ul>
<li><p>Date表示特定的瞬间，精确到毫秒</p>
</li>
<li><p>时间单位</p>
<ul>
<li>1秒：1000毫秒</li>
<li>1毫秒：1000徽章秒</li>
<li>1微秒：1000纳秒</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li>xx.getTime()              获取当前时间的毫秒数</li>
<li>new Date(毫秒数)      创建日期对象</li>
<li>date1.before(date2)   比较两个日期</li>
<li>date1.after(date2)     比较两个日期</li>
<li>date1.compareTo(date2)   比较两个日期</li>
<li>date1.equals(date2)      比较两个日期</li>
</ul>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        当前毫秒数</span></span><br><span class="line">System.out.println(currDate.getTime());</span><br><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line"><span class="comment">//        比较两个日期</span></span><br><span class="line">System.out.println(d1.before(d2));</span><br><span class="line">System.out.println(d1.after(d2));</span><br></pre></td></tr></table></figure>

<h2 id="20-2-Calendar"><a href="#20-2-Calendar" class="headerlink" title="20.2 Calendar"></a>20.2 Calendar</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673313213812.png" alt="1673313213812"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="comment">//        这是本周的第几天，周日为第一天</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是一周的第&quot;</span>+c.get(Calendar.DAY_OF_WEEK)+<span class="string">&quot;天&quot;</span>);</span><br><span class="line"><span class="comment">//        这是本月的第几天</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是一月的第&quot;</span>+c.get(Calendar.DAY_OF_MONTH)+<span class="string">&quot;天&quot;</span>);</span><br><span class="line"><span class="comment">//        获取是哪一年信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今年是&quot;</span>+c.get(Calendar.SUNDAY)+<span class="string">&quot;年&quot;</span>);</span><br><span class="line"><span class="comment">//        Calendaar.year  今年是哪一年</span></span><br><span class="line">        System.out.println(c.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">//        Calendar.Month   这是今年的第几个月，从0开始</span></span><br><span class="line">        System.out.println(c.get(Calendar.MONTH));</span><br><span class="line"><span class="comment">//        Calendar.Date    这是本月的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DATE));</span><br><span class="line"><span class="comment">//        Calendar.DAY_OF_MONTH  获取本月的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_MONTH));</span><br><span class="line"><span class="comment">//        Calendar.DAY_OF_WEEK   获取本周的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_WEEK));</span><br><span class="line"><span class="comment">//         Calendar.DAY_OF_WEEK_IN_MONTH  指示当前月中的第几个星期。</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_WEEK_IN_MONTH));</span><br><span class="line"><span class="comment">//      Calendar.DAY_OF_YEAR     表示一年中的第几天</span></span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取前一天的信息</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">        c.setTime(date);</span><br><span class="line">        System.out.println(c.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======Calendar ======&gt;  Date==================&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">        System.out.println(time.toLocaleString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">		<span class="comment">//获取本月中前一天的信息</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.get(Calendar.DAY_OF_MONTH));</span><br><span class="line"></span><br><span class="line">·		<span class="comment">//获取本月中后一天·的信息</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取上个月的信息</span></span><br><span class="line">        c2.add(Calendar.MONTH,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line">       <span class="comment">//获取下个月的信息</span></span><br><span class="line">        c2.add(Calendar.YEAR,<span class="number">1</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        30分钟后</span></span><br><span class="line">        c2.add(Calendar.MINUTE,<span class="number">30</span>);</span><br><span class="line">        System.out.println(c2.getTime().toLocaleString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeInMillis</span> <span class="operator">=</span> c2.getTimeInMillis();</span><br><span class="line"><span class="comment">//        第一次getTime获取的是Date类型，第二次getTime获取的是long类型毫秒数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> c2.getTime().getTime();</span><br><span class="line">        System.out.println(timeInMillis == time1);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="20-3-SimpleDateFormat-格式化日期"><a href="#20-3-SimpleDateFormat-格式化日期" class="headerlink" title="20.3 SimpleDateFormat 格式化日期"></a>20.3 SimpleDateFormat 格式化日期</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673315018410.png" alt="1673315018410"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println(d1.toLocaleString());</span><br><span class="line"><span class="comment">//        指定日期格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        把日期对象 ==》 指定格式的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(d1);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        把字符串 == 》 Date  字符串满足格式要求</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-01-10 10:40:10&quot;</span>);</span><br><span class="line">        System.out.println(parse.toLocaleString());</span><br></pre></td></tr></table></figure>

<h1 id="21-System"><a href="#21-System" class="headerlink" title="21 System"></a>21 System</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673315501923.png" alt="1673315501923"></p>
<h1 id="22-集合-容器"><a href="#22-集合-容器" class="headerlink" title="22 集合 容器"></a>22 集合 容器</h1><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321077517.png" alt="1673321077517"></p>
<h2 id="22-1-List"><a href="#22-1-List" class="headerlink" title="22.1 List"></a>22.1 List</h2><h3 id="22-1-1-ArrayList"><a href="#22-1-1-ArrayList" class="headerlink" title="22.1.1 ArrayList"></a>22.1.1 ArrayList</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321395522-1673330603391.png" alt="1673321395522"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673321698758.png" alt="1673321698758"></p>
<h4 id="2-1-1-1-插入元素源码"><a href="#2-1-1-1-插入元素源码" class="headerlink" title="2.1.1.1 插入元素源码"></a>2.1.1.1 插入元素源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-2-删除元素源码"><a href="#2-1-1-2-删除元素源码" class="headerlink" title="2.1.1.2 删除元素源码"></a>2.1.1.2 删除元素源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">          System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                           numMoved);</span><br><span class="line">      elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>add()   添加一个对象数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">list.add(<span class="number">11</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li>addAll() 将一个集合中的所有对象添加到此集合汇总</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list1.add(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">list.addAll(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>clean()  清空此集合中的所有对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;========清除clear========&quot;</span>);</span><br><span class="line">list.clear();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<ul>
<li>contains()    检查此集合中是否包含o对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;contains&quot;</span>);</span><br><span class="line"><span class="type">String</span>  <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;yyy&quot;</span>;</span><br><span class="line">System.out.println(list1.contains(s));</span><br></pre></td></tr></table></figure>

<ul>
<li>equals()   比较此集合是否与对象相等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=========equals====&quot;</span>);</span><br><span class="line">System.out.println(list.equals(list1));</span><br></pre></td></tr></table></figure>

<ul>
<li>判断此集合是否为空</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;====isEmpty:是否为空&quot;</span>);</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> list1.isEmpty();</span><br><span class="line">       System.out.println(empty);</span><br></pre></td></tr></table></figure>

<ul>
<li>remove()   在此集合中移出o对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;====remove========&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">list4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(<span class="number">1</span>);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        list4.add(ss);</span><br><span class="line">        System.out.println(list4);</span><br><span class="line"><span class="comment">//     删除指定的元素，只删除一个</span></span><br><span class="line">        list4.remove(ss);</span><br><span class="line">        System.out.println(list4);</span><br></pre></td></tr></table></figure>

<ul>
<li>size()   返回此集合中的元素个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.size();</span><br></pre></td></tr></table></figure>

<ul>
<li>将此集合转化成数组形式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] objects = list.toArray();</span><br></pre></td></tr></table></figure>

<h3 id="22-1-2-LinkedList"><a href="#22-1-2-LinkedList" class="headerlink" title="22.1.2 LinkedList"></a>22.1.2 LinkedList</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673336272586.png" alt="1673336272586"></p>
<h4 id="22-1-2-1代码实现"><a href="#22-1-2-1代码实现" class="headerlink" title="22.1.2.1代码实现"></a>22.1.2.1代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        list1.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        list1.add(<span class="number">11</span>);</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class="line">            System.out.println(list1.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        迭代器循环</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line"><span class="comment">//        插入</span></span><br><span class="line">        list1.add(<span class="number">1</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        长度</span></span><br><span class="line">        System.out.println(list1.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list1.remove()  删除</span></span><br><span class="line">        list1.remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================Vector&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br></pre></td></tr></table></figure>



<h3 id="22-1-3-Vector"><a href="#22-1-3-Vector" class="headerlink" title="22.1.3 Vector"></a>22.1.3 Vector</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673337193299.png" alt="1673337193299"></p>
<h3 id="22-1-4-ArrayList、LinkedList、Vector的优点和区别"><a href="#22-1-4-ArrayList、LinkedList、Vector的优点和区别" class="headerlink" title="22.1.4: ArrayList、LinkedList、Vector的优点和区别"></a>22.1.4: ArrayList、LinkedList、Vector的优点和区别</h3><h4 id="22-1-4-0-list"><a href="#22-1-4-0-list" class="headerlink" title="22.1.4.0 list"></a>22.1.4.0 list</h4><ul>
<li>可重复添加，有序</li>
</ul>
<h4 id="22-1-4-1-ArrayList的优缺点"><a href="#22-1-4-1-ArrayList的优缺点" class="headerlink" title="22.1.4.1 ArrayList的优缺点"></a>22.1.4.1 ArrayList的优缺点</h4><ul>
<li>数组结构，底层使用顺序表进行编写，</li>
<li>默认初始化长度为10，空间不够后，扩容为原来的1.5倍</li>
<li>查询快，增删慢</li>
<li>线程不安全</li>
</ul>
<h4 id="22-1-4-2-LinkedList的优缺点"><a href="#22-1-4-2-LinkedList的优缺点" class="headerlink" title="22.1.4.2 LinkedList的优缺点"></a>22.1.4.2 LinkedList的优缺点</h4><ul>
<li>底层使用链表结构实现</li>
<li>LinkedList使用双向链表实现，增加和删除较快，查询慢</li>
<li>可以有效利用内存空间</li>
<li>线程不安全</li>
</ul>
<h4 id="22-1-4-3-Vector的优缺点"><a href="#22-1-4-3-Vector的优缺点" class="headerlink" title="22.1.4.3 Vector的优缺点"></a>22.1.4.3 Vector的优缺点</h4><ul>
<li>线程安全，运行效率比ArrayList慢</li>
<li>默认初始化长度为10，默认扩容为原来的2倍，查询速度及慢</li>
<li>不常用</li>
</ul>
<h2 id="22-2-Set集合"><a href="#22-2-Set集合" class="headerlink" title="22.2 Set集合"></a>22.2 Set集合</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673343065185.png" alt="1673343065185"></p>
<h3 id="22-2-0-set"><a href="#22-2-0-set" class="headerlink" title="22.2.0 set()"></a>22.2.0 set()</h3><ul>
<li>没有下标，不能重复，无序</li>
</ul>
<h3 id="22-2-1-HashSet"><a href="#22-2-1-HashSet" class="headerlink" title="22.2.1 HashSet()"></a>22.2.1 HashSet()</h3><ul>
<li>基于HashCode实现元素不重复</li>
<li>当存入元素的哈希码相同时，会调用&#x3D;&#x3D;或equals进行确认，结果为true,拒绝猴子存入</li>
<li>采用的哈希表（散列表） 数组+链表+树</li>
</ul>
<ol>
<li>根据hashcode计算保存的位置，如果此位置为空，则直接保存，如果不为空，则执行第二步</li>
<li>在执行equals方法，如果equals方法为true,则认为是重复，否则，形成链表。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set : 没有下标， 无素不可重复， 没有顺序</span></span><br><span class="line">       <span class="comment">//1多态</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       set1.add(<span class="number">1</span>);</span><br><span class="line">       set1.add(<span class="number">2</span>);</span><br><span class="line">       set1.add(<span class="number">3</span>);</span><br><span class="line">       set1.add(<span class="number">99</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line"></span><br><span class="line">       set1.remove(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line">       <span class="comment">//set1.clear();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//循环</span></span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set1.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       System.out.println( <span class="string">&quot;size=&quot;</span>+ set1.size());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object o : set1) &#123;</span><br><span class="line">           System.out.println(o);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="22-2-2-LinkedSet"><a href="#22-2-2-LinkedSet" class="headerlink" title="22.2.2 LinkedSet()"></a>22.2.2 LinkedSet()</h3><ul>
<li>链表实现的HashSet,根据链表进行存储，即可保留元素的插入顺序</li>
<li>set集合虽然无序，但是LinkedSet采用链表方式存储，保留了元素的插入顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">       set1.add(<span class="number">9</span>);</span><br><span class="line">       set1.add(<span class="number">90</span>);</span><br><span class="line">       set1.add(<span class="number">0</span>);</span><br><span class="line">       set1.add(<span class="number">11</span>);</span><br><span class="line">       System.out.println(set1);</span><br><span class="line">       <span class="keyword">for</span> (Integer integer : set1) &#123;</span><br><span class="line">           System.out.println(integer);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Iterator&lt;Integer&gt; iterator = set1.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="22-2-3-TreeSet"><a href="#22-2-3-TreeSet" class="headerlink" title="22.2.3 TreeSet()"></a>22.2.3 TreeSet()</h3><ul>
<li>基于排列实现元素不重复</li>
<li>实现了SortedSet接口，对集合元素自动排序</li>
<li>排序<ul>
<li>排序一：<ul>
<li>元素对象的类型必须实现Comparable接口，指定排序规则（自然排序）</li>
<li>通过CompareTo方法确定是否为重复元素</li>
</ul>
</li>
<li>排序二：<ul>
<li>Comparator接口：</li>
<li>比较器，实现定制比较</li>
<li>compare(o1,o2)方法的返回值0，表示重复</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;User&gt; ct1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> o1.id == o2.id ? <span class="number">0</span> : o1.id &gt; o2.id ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">18</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">9</span>);</span><br><span class="line">       <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(ct1);</span><br><span class="line">       set.add(u1);</span><br><span class="line">       set.add(u2);</span><br><span class="line">       set.add(u3);</span><br><span class="line">       System.out.println(set);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;User1&gt;  ct = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User1&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User1 o1, User1 o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>  o1.id &gt; o2.id ? <span class="number">1</span> : (o1.id==o2.id) ?<span class="number">0</span>: -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="22-3-Map集合"><a href="#22-3-Map集合" class="headerlink" title="22.3 Map集合"></a>22.3 Map集合</h2><ul>
<li>用于存储任意键值对（key - value）</li>
<li>键：无下标，不可以重复，唯一 ，使用set集合存储</li>
<li>值：无下标，可以重复</li>
<li>Map集合<ul>
<li>HashMap()集合</li>
<li>HashTable()集合<ul>
<li>Proerties()集合</li>
</ul>
</li>
<li>SortedMsp()集合<ul>
<li>TreeMpa()集合</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>	</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400164901.png" alt="1673400164901"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400217316.png" alt="1673400217316"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673400228045.png" alt="1673400228045"></p>
<h3 id="22-3-1-HashMap"><a href="#22-3-1-HashMap" class="headerlink" title="22.3.1 HashMap()"></a>22.3.1 HashMap()</h3><ul>
<li>jkk1.2 版本，线程不安全，运行效率快</li>
<li>运行null,作为key或是value</li>
<li>存储结构：哈希表</li>
</ul>
<ol>
<li>添加： put(键，值)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">1001</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除：remove(键&#x2F;下标)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(键)    或者</span><br><span class="line">map.remove(键，值)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改： put(键，值)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果添加的键相同的话，执行的就是修改操作</span></span><br><span class="line">map.put(键，值);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>遍历</p>
<ol>
<li><p>获取key集合</p>
<ol>
<li><p>增强for循环遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">       <span class="keyword">for</span>(String key:keys)&#123;</span><br><span class="line">           System.out.println(map.get(key));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代器循环遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">Iterator&lt;String&gt; iterator = keys.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hashNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>获取entry对象</p>
<ol>
<li><p>增强for循环</p>
<ol>
<li><pre><code class="java">Set&lt;Map.Entry&lt;String,String&gt;&gt; set = map.entrySet();
     for(Map.Entry&lt;String,String&gt; entry:set)&#123;
         System.out.println(entry.getKey());
         System.out.println(entry.getValue());
     &#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 迭代器循环</span><br><span class="line"></span><br><span class="line">   1. ```java</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator1 = set.iterator();</span><br><span class="line">            while (iterator1.hasNext())&#123;</span><br><span class="line">                Map.Entry&lt;String, String&gt; entry = iterator1.next();</span><br><span class="line">                System.out.println(entry.getKey());</span><br><span class="line">                System.out.println(entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
<li><p>可以获取所有值</p>
<ol>
<li><pre><code class="java">Collection&lt;String&gt; values = map.values();
       System.out.println(values);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 22.3.2 TreeMap()集合</span><br><span class="line"></span><br><span class="line">+ 和TreeSet类似,基于key值排列不重复</span><br><span class="line"></span><br><span class="line">+ 排序方法分为自然派系和定制排序</span><br><span class="line"></span><br><span class="line">+ 排序</span><br><span class="line"></span><br><span class="line">  + 自然排序：</span><br><span class="line">    + 元素对象的类型必须实现Comparable接口，指定排序规则（自然排序）</span><br><span class="line">    + 通过CompareTo方法确定是否为重复元素</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  //自然排序代码</span><br><span class="line">    @Override</span><br><span class="line">      public int compareTo(User u) &#123;</span><br><span class="line">          int name = this.name.compareTo(u.name);</span><br><span class="line">          int id = Integer.compare(this.id,u.id);</span><br><span class="line">          int age = Integer.compare(this.age,u.age);</span><br><span class="line">          if(id != 0)&#123;</span><br><span class="line">              return id;</span><br><span class="line">          &#125;else if(age != 0)&#123;</span><br><span class="line">              return age;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              return name;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;  </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li>定制排序：<ul>
<li>Comparator接口：</li>
<li>比较器，实现定制比较</li>
<li>compare(o1,o2)方法的返回值0，表示重复</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制排序代码</span></span><br><span class="line">    Comparator&lt;User&gt; ct = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> o1.name.compareTo(o2.name);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.compare(o1.age, o2.age);</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.compare(o1.id, o2.id);</span><br><span class="line">                <span class="keyword">if</span>(id != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> id;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> age;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>



<h3 id="22-3-3-HashTable-集合"><a href="#22-3-3-HashTable-集合" class="headerlink" title="22.3.3 HashTable() 集合"></a>22.3.3 HashTable() 集合</h3><ul>
<li>jdk1.0 版本,线程安全,运行效率慢,不允许null作为key或value</li>
</ul>
<h2 id="22-4-Collections-工具类"><a href="#22-4-Collections-工具类" class="headerlink" title="22.4 Collections 工具类"></a>22.4 Collections 工具类</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673342191449.png" alt="1673342191449"></p>
<ul>
<li>reverse(List&lt;?&gt; list)   反转集合中元素的顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        反转</span></span><br><span class="line">        Collections.reverse(list1);</span><br><span class="line">        System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>shuffle(List&lt;?&gt; list)    随机重置集合元素的顺序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.shuffle(list1);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>sort(List&lt;?&gt; list)    升序排序（元素类型必须实现comparable接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list1);</span><br><span class="line">System.out.println(list1);</span><br></pre></td></tr></table></figure>

<ul>
<li>binarySearch(list,T key)   二分查找</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(list1, <span class="number">299</span>);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure>



<h2 id="22-5-泛型"><a href="#22-5-泛型" class="headerlink" title="22.5 泛型"></a>22.5 泛型</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1673337398781.png" alt="1673337398781"></p>
<ul>
<li>在类上用泛型： 属性，方法的参数和返回值都可以带上泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &lt;T,V&gt;&#123;</span><br><span class="line">    T a;</span><br><span class="line">    V b;</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">sout</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test1&lt;String,List&gt; t = <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        t.a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        t.list.add(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">yyy</span> <span class="operator">=</span> t.sout(<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">a</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类实现被实现的类时，被实现类可以指定泛型类型，不指定的话，重写的方法类型默认为Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> <span class="keyword">implements</span> <span class="title class_">Test2</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果被实现类的泛型类型依然为泛型，那么实现类在重写被实现类的方法时，需要带上泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Test2</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">a</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test4&lt;Double&gt; d = <span class="keyword">new</span> <span class="title class_">Test4</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>泛型方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在方法上单独加泛型，必须要有指定的地方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;T <span class="title function_">a</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>泛型修饰集合</p>
<ul>
<li>参数化类型、类型安全的集合、强制集合元素的类型必须一致</li>
<li>特点<ul>
<li>编译时即可检查，而非运行时抛出异常</li>
<li>访问时，不必类型转换（拆箱）</li>
<li>不同泛型之间饮用不能相互赋值，泛型不存在多条</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="23-异常"><a href="#23-异常" class="headerlink" title="23 异常"></a>23 异常</h1><h2 id="23-1-异常的分类"><a href="#23-1-异常的分类" class="headerlink" title="23.1 异常的分类"></a>23.1 异常的分类</h2><ul>
<li>概念:<ul>
<li>程序在运行过程中出现的特殊情况</li>
</ul>
</li>
<li>必要性:<ul>
<li>任何程序都可能存在大量的位置问题,错误</li>
<li>如果不对这些额问题进行正确处理,则可能导致程序的中断,造成不必要的损失</li>
</ul>
</li>
<li>分类:<ul>
<li>错误<ul>
<li>Error:JVM  &#x2F; 硬件&#x2F;执行逻辑错误&#x2F;不能手动处理</li>
<li>常见错误: StackOverflowError&#x2F; OutOfMemoryError等</li>
<li>StackOverflowError: 如果是由于逻辑代码问题,需要改正,比如死循环</li>
</ul>
</li>
<li>异常:<ul>
<li>Exception:程序在运行和配置中产生的问题,可处理</li>
<li>RuntimeException: 运行时异常,可处理,可不处理</li>
<li>CheckedException: 检查时异常,必须处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667181501165.png" alt="1667181501165"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667184253962.png" alt="1667184253962"></p>
<h2 id="23-2-常见的异常举例"><a href="#23-2-常见的异常举例" class="headerlink" title="23.2 常见的异常举例"></a>23.2 常见的异常举例</h2><p><img src="F:\java学习\千峰\个人总结\java\java.assets\1667181560237.png" alt="1667181560237"></p>
<h1 id="24-IO流"><a href="#24-IO流" class="headerlink" title="24 IO流"></a>24 IO流</h1><ul>
<li><pre><code class="tex">1.对于文本文件（txt,.java,.c,.cpp），使用字符流处理
2.对于非文本文件（jpg,mp3,mp4,avi,doc,ppt,...）使用字节流处理
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  /*W</span><br><span class="line">  一：流的分类：</span><br><span class="line">  1.操作数据单位：字节流、字符流</span><br><span class="line">  2.数据的流行：输入流、输出流</span><br><span class="line">  3.流的角色：节点流和处理流</span><br><span class="line">  </span><br><span class="line">  二：流的体系结构：</span><br><span class="line">  抽象基类：               节点流(或文件流)                   缓冲流（或处理流的一种）</span><br><span class="line">  InputStream         FileInputStream                 BufferedInputStream</span><br><span class="line">  OutputStream        FileOutputStream                BufferedOutputStream</span><br><span class="line">  Reader              FileRead                        BufferedReader</span><br><span class="line">  Writer              FileWriter                      BufferedWriter</span><br><span class="line">   */</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667200569515.png" alt="1667200569515"></p>
<h2 id="24-1-字节流："><a href="#24-1-字节流：" class="headerlink" title="24.1 字节流："></a>24.1 字节流：</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667202757485.png" alt="1667202757485"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667203628884.png" alt="1667203628884"></p>
<h3 id="24-1-1-文件字节输入流FileInputStream"><a href="#24-1-1-文件字节输入流FileInputStream" class="headerlink" title="24.1.1 文件字节输入流FileInputStream"></a>24.1.1 文件字节输入流FileInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStream1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        a();</span></span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    字节输入流测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        1.多态字节流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.获取里面的内容  字节: === &gt; 数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//        一个字节一个字节的读,最后没有的时候返回-1</span></span><br><span class="line">        <span class="keyword">while</span> ((c = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-1-2-FileOutputStream-文件字节输出流"><a href="#24-1-2-FileOutputStream-文件字节输出流" class="headerlink" title="24.1.2 FileOutputStream 文件字节输出流"></a>24.1.2 FileOutputStream 文件字节输出流</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//            os.write(&#x27;c&#x27;);</span></span><br><span class="line"><span class="comment">//            os.write(&#x27;\n&#x27;);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello,worlf&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">            os.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            os.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-1-3-练习-完成文件的复制"><a href="#24-1-3-练习-完成文件的复制" class="headerlink" title="24.1.3 练习,完成文件的复制"></a>24.1.3 练习,完成文件的复制</h3><h4 id="24-1-3-1-复制一"><a href="#24-1-3-1-复制一" class="headerlink" title="24.1.3.1 复制一:"></a>24.1.3.1 复制一:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String url,String dUrl)</span>&#123;</span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(url);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dUrl);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!= -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer);</span><br><span class="line">                bos.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="24-1-3-2-final复制"><a href="#24-1-3-2-final复制" class="headerlink" title="24.1.3.2 final复制"></a>24.1.3.2 final复制</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667264546258.png" alt="1667264546258"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyImage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CopyImage</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyImage</span>();</span><br><span class="line">        System.out.println(c.copy(<span class="string">&quot;F:\\20.jpg&quot;</span>, <span class="string">&quot;F:\\1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Results <span class="title function_">copy</span><span class="params">(String url, String dUrl)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(url == <span class="literal">null</span> || dUrl == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">false</span>,<span class="number">1001</span>,<span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> url.substring(url.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> dUrl.substring(<span class="number">0</span>, dUrl.indexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.isEnd(url))&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">          <span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> s.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">          dUrl = substring+replace+<span class="string">&quot;_&quot;</span>+oldName;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">            System.out.println(dUrl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            初始化</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(url);</span><br><span class="line">                bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">                os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dUrl);</span><br><span class="line">                bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">true</span>,<span class="number">1002</span>,<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis!= <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bos.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        os.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Results</span>(<span class="literal">false</span>,<span class="number">1003</span>,<span class="string">&quot;其他异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;jpg&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;png&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(str != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> str.substring(str.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (list.contains(substring)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-2-字符流-文本"><a href="#24-2-字符流-文本" class="headerlink" title="24.2 字符流(文本)"></a>24.2 字符流(文本)</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667272749316-1673672151203.png" alt="1667272749316"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667272739635-1673672151203.png" alt="1667272739635"></p>
<h3 id="24-2-1-最终版字符写流-重点"><a href="#24-2-1-最终版字符写流-重点" class="headerlink" title="24.2.1 最终版字符写流(重点)"></a>24.2.1 最终版字符写流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>();</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-2-2-最终版字符读流-重点"><a href="#24-2-2-最终版字符读流-重点" class="headerlink" title="24.2.2 最终版字符读流(重点)"></a>24.2.2 最终版字符读流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            char[] c = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(c))!= -1)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(new String(c,0,len));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">while</span> ((s =  br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-2-3-最终版字符写流-重点"><a href="#24-2-3-最终版字符写流-重点" class="headerlink" title="24.2.3 最终版字符写流(重点)"></a>24.2.3 最终版字符写流(重点)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;F:\\1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">            bw.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bw.write(<span class="string">&quot;你好,世界&quot;</span>);</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-3-对象字节流"><a href="#24-3-对象字节流" class="headerlink" title="24.3 对象字节流"></a>24.3 对象字节流</h2><h3 id="24-3-1-对象字节输入流-ObjectOutputStream"><a href="#24-3-1-对象字节输入流-ObjectOutputStream" class="headerlink" title="24.3.1 对象字节输入流 ObjectOutputStream"></a>24.3.1 对象字节输入流 ObjectOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTest</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        Io流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\2.bin&quot;</span>);</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     2.准备要写的对象</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1002</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-3-2-对象字节输出流-ObjectInputStream"><a href="#24-3-2-对象字节输出流-ObjectInputStream" class="headerlink" title="24.3.2 对象字节输出流 ObjectInputStream"></a>24.3.2 对象字节输出流 ObjectInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\2.bin&quot;</span>);</span><br><span class="line">           ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">           <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> (Student) o1;</span><br><span class="line">           <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) o2;</span><br><span class="line">           System.out.println(s1);</span><br><span class="line">           System.out.println(s2);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(ois != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   ois.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   is.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-4-转换流"><a href="#24-4-转换流" class="headerlink" title="24.4 转换流"></a>24.4 转换流</h2><h3 id="24-4-1-字符转换输出流-OutputStreamWriter"><a href="#24-4-1-字符转换输出流-OutputStreamWriter" class="headerlink" title="24.4.1 字符转换输出流 OutputStreamWriter"></a>24.4.1 字符转换输出流 OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">           osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">           bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">               bw.write(<span class="string">&quot;马上过年了&quot;</span>);</span><br><span class="line">              bw.newLine();</span><br><span class="line">              bw.flush();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   bw.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(osw != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   osw.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   os.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="24-4-2-字符转换输入流-OutputStreamReader"><a href="#24-4-2-字符转换输入流-OutputStreamReader" class="headerlink" title="24.4.2 字符转换输入流 OutputStreamReader"></a>24.4.2 字符转换输入流 OutputStreamReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"><span class="comment">//            char[] chars = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(chars))!= -1)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(new String(chars,0,len));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                isr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="24-5-打印流"><a href="#24-5-打印流" class="headerlink" title="24.5 打印流"></a>24.5 打印流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;F:\\1.txt&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;我是xxx&quot;</span>);</span><br><span class="line">            pw.println(<span class="number">1</span>);</span><br><span class="line">            pw.print(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(pw != <span class="literal">null</span>)&#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="25-文件-x2F-目录的类File"><a href="#25-文件-x2F-目录的类File" class="headerlink" title="25 文件&#x2F;目录的类File"></a>25 文件&#x2F;目录的类File</h1><h2 id="25-1-常用方法-重点"><a href="#25-1-常用方法-重点" class="headerlink" title="25.1 常用方法(重点)"></a>25.1 常用方法(重点)</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667293437351-1673673624544.png" alt="1667293437351"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1667293455938-1673673624544.png" alt="1667293455938"></p>
<h2 id="25-2-代码实现"><a href="#25-2-代码实现" class="headerlink" title="25.2 代码实现"></a>25.2 代码实现</h2><h3 id="25-2-1-文件操作"><a href="#25-2-1-文件操作" class="headerlink" title="25.2.1 文件操作"></a>25.2.1 文件操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建File对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\2.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        判断文件是否存在  file.exists();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在:&quot;</span>+file.exists());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        如果不存在</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                创建文件</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径：&quot;</span>+file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;路径：&quot;</span>+file.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名：&quot;</span>+file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;父目录：&quot;</span>+file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的长度:&quot;</span>+file.length());</span><br><span class="line"><span class="comment">//        文件的创建日期 file.lastModified()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的创建日期：&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified()).toLocaleString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否可写：&quot;</span>+file.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否可读：&quot;</span>+file.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否隐藏：&quot;</span>+file.isHidden());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是文件：&quot;</span>+file.isFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除文件 delete()</span></span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-2-2-目录操作"><a href="#25-2-2-目录操作" class="headerlink" title="25.2.2 目录操作"></a>25.2.2 目录操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\a\\b\\c&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在：&quot;</span>+file.exists());</span><br><span class="line"><span class="comment">//        mkdir 如果需要创建的目录，其父目录不在，则该目录也不会被创建</span></span><br><span class="line"><span class="comment">//        mkdirs 如果需要创建的目录，其父目录不在，则会连同父目录一块创建</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">           file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否是目录&quot;</span>+file.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是文件&quot;</span>+file.isFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        delete()  删除文件或空目录</span></span><br><span class="line"><span class="comment">//        file.delete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="25-3-递归实现-获取文件目录"><a href="#25-3-递归实现-获取文件目录" class="headerlink" title="25.3 递归实现 获取文件目录"></a>25.3 递归实现 获取文件目录</h2><h3 id="25-3-1-方法一"><a href="#25-3-1-方法一" class="headerlink" title="25.3.1 方法一:"></a>25.3.1 方法一:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    用来展示目录下的所有东西</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">showFile</span><span class="params">(String  path)</span>&#123;</span><br><span class="line">        str+=<span class="string">&quot;--&quot;</span>;</span><br><span class="line"><span class="comment">//        1.file</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="comment">//        拿到当前目录下的所有东西： 目录 + 文件</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line"><span class="comment">//        String str = &quot;&quot;;</span></span><br><span class="line">        <span class="keyword">for</span>(File file1: files)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">              showFile(file1.getPath());</span><br><span class="line">          &#125;</span><br><span class="line">            System.out.println(str+file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-3-2-方法二"><a href="#25-3-2-方法二" class="headerlink" title="25.3.2 方法二:"></a>25.3.2 方法二:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFile1</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file1:files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">                showFile1(file1.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str+file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str = str.substring(<span class="number">0</span>,str.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="25-3-3-方法三"><a href="#25-3-3-方法三" class="headerlink" title="25.3.3 方法三"></a>25.3.3 方法三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFile2</span><span class="params">(String path,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">       str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level ; i++)&#123;</span><br><span class="line">           str+=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       File[] files = file.listFiles();</span><br><span class="line">       <span class="keyword">for</span>(File file1 : files)&#123;</span><br><span class="line">           <span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">               showFile2(file1.getAbsolutePath(),++level);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(str+file1.getName());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="25-4-过滤器-FileFilter-次重点"><a href="#25-4-过滤器-FileFilter-次重点" class="headerlink" title="25.4 过滤器 FileFilter(次重点)"></a>25.4 过滤器 FileFilter(次重点)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilleterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        筛选File</span></span><br><span class="line">        <span class="type">FileFilter</span> <span class="variable">fileFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(pathname.isDirectory())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\a&quot;</span>);</span><br><span class="line">        File[] files = file.listFiles(fileFilter);</span><br><span class="line">        <span class="keyword">for</span>(File file1 : files)&#123;</span><br><span class="line">            System.out.println(file1.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="25-5-Properties-读取方式"><a href="#25-5-Properties-读取方式" class="headerlink" title="25.5 Properties  读取方式"></a>25.5 Properties  读取方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day13_file&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//        1.创建对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//       2.加载io流</span></span><br><span class="line">           is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day13_file\\QQ.properties&quot;</span>);</span><br><span class="line">           reader = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            pro.load(reader);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            3.获取元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            System.out.println(user+<span class="string">&quot;=&quot;</span>+pass);</span><br><span class="line"></span><br><span class="line">            Set&lt;Object&gt; set = pro.keySet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//            以下为写入</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(str+<span class="string">&quot;\\QQ.properties&quot;</span>);</span><br><span class="line">            <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            pro.setProperty(<span class="string">&quot;111&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            pro.put(<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line">            pro.store(osw,<span class="string">&quot;注释&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(reader != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="26-枚举类"><a href="#26-枚举类" class="headerlink" title="26 枚举类"></a>26 枚举类</h1><h2 id="26-1-枚举定义"><a href="#26-1-枚举定义" class="headerlink" title="26.1 枚举定义"></a>26.1 枚举定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP, <span class="comment">// 上</span></span><br><span class="line">    DOWN, <span class="comment">//下</span></span><br><span class="line">    LEFT, <span class="comment">//左</span></span><br><span class="line">    RIGHT; <span class="comment">//右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="26-2-特点"><a href="#26-2-特点" class="headerlink" title="26.2. 特点"></a>26.2. 特点</h2><p>类用关键字Enum</p>
<p>特殊的常量类</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/image-2023013115013247112.png" alt="image-20230131150132472"></p>
<p>默认构造器是私有的</p>
<p>查看class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP,</span><br><span class="line">    DOWN,</span><br><span class="line">    LEFT,</span><br><span class="line">    RIGHT;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GameEnum</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里边的常量相当于枚举对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GameEnum</span>&#123;</span><br><span class="line">    UP(),</span><br><span class="line">    DOWN(),</span><br><span class="line">    LEFT(),</span><br><span class="line">    RIGHT();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GameEnum</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="符号"><a href="#符号" class="headerlink" title="符号,;"></a>符号,;</h2><p>用逗号分割, 用;结尾</p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则:"></a>命名规则:</h2><p>类名带Enum,常量全部大写,多个单词有_分割</p>
<h2 id="26-3-枚举的应用"><a href="#26-3-枚举的应用" class="headerlink" title="26.3 枚举的应用"></a>26.3 枚举的应用</h2><h3 id="26-3-1-常量"><a href="#26-3-1-常量" class="headerlink" title="26.3.1 常量"></a>26.3.1 常量</h3><h3 id="26-3-2-可以应用到switch当中"><a href="#26-3-2-可以应用到switch当中" class="headerlink" title="26.3.2 可以应用到switch当中"></a>26.3.2 可以应用到switch当中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取里边的常量</span></span><br><span class="line"><span class="type">Test01Enum</span> <span class="variable">e</span> <span class="operator">=</span> Test01Enum.UP;</span><br><span class="line"><span class="keyword">switch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">case</span> UP:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LEFT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DOWN:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> RIGHT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SKIP:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-3-有参数的枚举常量对象"><a href="#26-3-3-有参数的枚举常量对象" class="headerlink" title="26.3.3 有参数的枚举常量对象"></a>26.3.3 有参数的枚举常量对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Test03Enum</span> &#123;</span><br><span class="line">    <span class="comment">//四套：  success code msg 信息 整合的对象</span></span><br><span class="line">    SELECT_SUCCESS(<span class="literal">true</span>,<span class="number">1001</span>,<span class="string">&quot;查询成功&quot;</span>),</span><br><span class="line">    DELETE_SUCCESS(<span class="literal">true</span>,<span class="number">1002</span>,<span class="string">&quot;删除成功&quot;</span>),</span><br><span class="line">    UPDATE_ERROR(<span class="literal">false</span>,<span class="number">1003</span>,<span class="string">&quot;更新失败&quot;</span>),</span><br><span class="line">    ADD_ERROR(<span class="literal">false</span>,<span class="number">1004</span>,<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">    <span class="comment">//返回码： success  code  msg</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span>  String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器方法</span></span><br><span class="line">    Test03Enum(<span class="type">boolean</span> success, <span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取有参构造器的枚举对象</span></span><br><span class="line">        <span class="type">Test03Enum</span> <span class="variable">e</span> <span class="operator">=</span> Test03Enum.SELECT_SUCCESS;</span><br><span class="line"></span><br><span class="line">        System.out.println(e.isSuccess());</span><br><span class="line">        System.out.println(e.getCode());</span><br><span class="line">        System.out.println(e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-4-可以重写toString方法"><a href="#26-3-4-可以重写toString方法" class="headerlink" title="26.3.4 可以重写toString方法"></a>26.3.4 可以重写toString方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.success + <span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.code+<span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-5-枚举-类可以实现接口"><a href="#26-3-5-枚举-类可以实现接口" class="headerlink" title="26.3.5  枚举 类可以实现接口"></a>26.3.5  枚举 类可以实现接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test05Interface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">Test05Enum</span> <span class="keyword">implements</span>  <span class="title class_">Test05Interface</span>&#123;</span><br><span class="line">    UP</span><br><span class="line">    ;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个方法可以调到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-6在接口中：-枚举类"><a href="#26-3-6在接口中：-枚举类" class="headerlink" title="26.3.6在接口中： 枚举类"></a>26.3.6在接口中： 枚举类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Test06Interface &#123;</span><br><span class="line"></span><br><span class="line">    //1.可以在接口中定义枚举</span><br><span class="line">    enum  Test06Enum implements Test06Interface &#123;</span><br><span class="line">        UP,DOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Test06Interface</span>  <span class="variable">e</span>  <span class="operator">=</span> Test06Interface.Test06Enum.DOWN;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="26-3-7-枚举-可用放到集合当中"><a href="#26-3-7-枚举-可用放到集合当中" class="headerlink" title="26.3.7 枚举 可用放到集合当中"></a>26.3.7 枚举 可用放到集合当中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">Test07Enum</span> &#123;</span><br><span class="line"></span><br><span class="line">    DOWN,UP,LEFT,SKIP,RIGHT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个泛型是枚举的集合</span></span><br><span class="line">        List&lt;Test07Enum&gt;  list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 添加元素</span></span><br><span class="line">        list.add(Test07Enum.UP);</span><br><span class="line">        list.add(Test07Enum.UP);</span><br><span class="line">        list.add(Test07Enum.DOWN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Test07Enum test07Enum : list) &#123;</span><br><span class="line">            System.out.println(test07Enum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//set 当中的元素是不重复的，所以，我可以去重</span></span><br><span class="line">        <span class="comment">// 利用 EnumSet可以去重</span></span><br><span class="line">        EnumSet&lt;Test07Enum&gt; test07Enums = EnumSet.copyOf(list);</span><br><span class="line">        System.out.println(test07Enums);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="comment">// 利用 EnumSet  可以返回一个 EnumSet类型的集合 : 范围： 区间</span></span><br><span class="line">        EnumSet&lt;Test07Enum&gt; range = EnumSet.range(Test07Enum.UP, Test07Enum.SKIP);</span><br><span class="line">        System.out.println(range);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;EnumMap==========================&quot;</span>);</span><br><span class="line">        <span class="comment">//EnumMap: key是枚举 类型  : 参数是枚举 的class类型</span></span><br><span class="line"></span><br><span class="line">        EnumMap&lt;Test07Enum,String&gt;  map = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(Test07Enum.class);</span><br><span class="line">        map.put(Test07Enum.UP,<span class="string">&quot;上&quot;</span>);</span><br><span class="line">        map.put(Test07Enum.DOWN,<span class="string">&quot;下&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.get(Test07Enum.UP);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//EnumMap 数组结构 : 专门为 枚举 类型设计的map结构</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="26-4-父类-java-lang-Enum"><a href="#26-4-父类-java-lang-Enum" class="headerlink" title="26.4 父类 java.lang.Enum"></a>26.4 父类 java.lang.Enum</h2><table>
<thead>
<tr>
<th>values()</th>
<th>以数组形式返回枚举类型的所有成员</th>
</tr>
</thead>
<tbody><tr>
<td>valueOf()</td>
<td>将普通字符串转换为枚举实例</td>
</tr>
<tr>
<td>compareTo()</td>
<td>比较两个枚举成员在定义时的顺序</td>
</tr>
<tr>
<td>ordinal()</td>
<td>获取枚举成员的索引位置</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Test08Enum</span> &#123;</span><br><span class="line">    DOWN,UP,LEFT,SKIP,RIGHT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. values : 以数组形式返回枚举类型的所有成员</span></span><br><span class="line">Test08Enum[] values = Test08Enum.values();</span><br><span class="line">System.out.println(Arrays.toString(values));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. valueOf 将普通字符串转换为枚举实例</span></span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">up</span> <span class="operator">=</span> Test08Enum.valueOf(<span class="string">&quot;UP&quot;</span>);</span><br><span class="line">System.out.println(up);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.比较定义的顺序</span></span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">down</span> <span class="operator">=</span> Test08Enum.DOWN;</span><br><span class="line"><span class="type">Test08Enum</span> <span class="variable">skip</span> <span class="operator">=</span> Test08Enum.SKIP;</span><br><span class="line"><span class="type">int</span> <span class="variable">before</span> <span class="operator">=</span> down.compareTo(skip);</span><br><span class="line"><span class="type">int</span> <span class="variable">after</span> <span class="operator">=</span> skip.compareTo(down);</span><br><span class="line"><span class="type">int</span> <span class="variable">equ</span> <span class="operator">=</span> down.compareTo(down);</span><br><span class="line"></span><br><span class="line">System.out.println(before);  <span class="comment">//-3 左倒第3个</span></span><br><span class="line">System.out.println(after);<span class="comment">//3  右第3个</span></span><br><span class="line">System.out.println(equ); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. ordinal: 索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> down.ordinal();</span><br><span class="line">System.out.println(ordinal);</span><br></pre></td></tr></table></figure>

<h2 id="26-5-问题"><a href="#26-5-问题" class="headerlink" title="26.5 问题"></a>26.5 问题</h2><h3 id="26-5-1-枚举为什么是线程安全的？"><a href="#26-5-1-枚举为什么是线程安全的？" class="headerlink" title="26.5.1 枚举为什么是线程安全的？"></a>26.5.1 枚举为什么是线程安全的？</h3><ul>
<li><p>枚举类最终会被编译为被 <code>final</code> 修饰的普通类常量是用static final 修饰</p>
</li>
<li><p>枚举类在项目启动时就会被 JVM 加载并初始化，而这个执行过程是线程安全的，所以枚举类也是线程安全的类</p>
</li>
</ul>
<h1 id="27-反射"><a href="#27-反射" class="headerlink" title="27 反射"></a>27 反射</h1><h2 id="27-1-通过类来创建对象"><a href="#27-1-通过类来创建对象" class="headerlink" title="27.1 通过类来创建对象"></a>27.1 通过类来创建对象</h2><h3 id="27-1-1-对象-getClass获取类"><a href="#27-1-1-对象-getClass获取类" class="headerlink" title="27.1.1 对象.getClass获取类"></a>27.1.1 对象.getClass获取类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        1.通过getClass()方法,获取类</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; aClass = c1.getClass();</span><br><span class="line"><span class="comment">//      2.通过newInstance()方法来创建对象</span></span><br><span class="line">	 <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)aClass1.newInstance();`</span><br></pre></td></tr></table></figure>

<h3 id="27-1-2-Class-forName-获取类"><a href="#27-1-2-Class-forName-获取类" class="headerlink" title="27.1.2 Class.forName() 获取类"></a>27.1.2 Class.forName() 获取类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        2.通过forName()方法 获取类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)aClass1.newInstance();</span><br><span class="line">            car.a();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-2-通过构造器来创建对象"><a href="#27-2-通过构造器来创建对象" class="headerlink" title="27.2 通过构造器来创建对象"></a>27.2 通过构造器来创建对象</h2><h3 id="27-2-1-无参构造器"><a href="#27-2-1-无参构造器" class="headerlink" title="27.2.1 无参构造器"></a>27.2.1 无参构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.获取对应的构造器</span></span><br><span class="line">            Constructor&lt;?&gt; cr1 = c1.getConstructor();</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)cr1.newInstance();</span><br><span class="line">            System.out.println(car);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-2-2-有参构造器"><a href="#27-2-2-有参构造器" class="headerlink" title="27.2.2 有参构造器"></a>27.2.2 有参构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.获取对应的构造器</span></span><br><span class="line">            Constructor&lt;?&gt; cr1 = c1.getConstructor(String.class,String.class);</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)cr1.newInstance(<span class="string">&quot;晋A111&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">            System.out.println(car);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-3-通过反射调用方法"><a href="#27-3-通过反射调用方法" class="headerlink" title="27.3 通过反射调用方法"></a>27.3 通过反射调用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//        1.获取类对象的class对象</span></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;day15_reflect.Car&quot;</span>);</span><br><span class="line"><span class="comment">//        2.创建对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line"><span class="comment">//        3.获取到方法对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;a&quot;</span>, String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="comment">//        4.调用方法 invoke执行</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> method.invoke(o, <span class="string">&quot;哈哈&quot;</span>,<span class="number">111</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="27-4-反射的常用方法"><a href="#27-4-反射的常用方法" class="headerlink" title="27.4 反射的常用方法"></a>27.4 反射的常用方法</h2><h3 id="27-4-1-获取类名-包名-父类-接口列表"><a href="#27-4-1-获取类名-包名-父类-接口列表" class="headerlink" title="27.4.1 获取类名 + 包名 + 父类 + 接口列表"></a>27.4.1 获取类名 + 包名 + 父类 + 接口列表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//    1.获取Class对象的方式</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;day15_reflect.reflect_method.Game&quot;</span>);</span><br><span class="line"><span class="comment">//        2.类名 + 包名 + 父类 + 接口列表</span></span><br><span class="line">            System.out.println(<span class="string">&quot;类名：&quot;</span> + c1.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;包名：&quot;</span>+ c1.getPackage().getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;父类：&quot;</span>+ c1.getSuperclass().getName());</span><br><span class="line">            Class&lt;?&gt;[] interfaces = c1.getInterfaces();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接口列表：&quot;</span> + anInterface.getName());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-2-获取所有属性：getFields"><a href="#27-4-2-获取所有属性：getFields" class="headerlink" title="27.4.2 获取所有属性：getFields()"></a>27.4.2 获取所有属性：getFields()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            属性 Field public 类型</span></span><br><span class="line"><span class="comment">//            获取所有属性：getFields，只能获取public所有属性</span></span><br><span class="line">            Field[] fields = c1.getFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;属性：&quot;</span>+field.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="27-4-3-获取所有权限的属性：-getDeclaredFields"><a href="#27-4-3-获取所有权限的属性：-getDeclaredFields" class="headerlink" title="27.4.3 获取所有权限的属性： getDeclaredFields();"></a>27.4.3 获取所有权限的属性： getDeclaredFields();</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            获取所有权限的所有属性</span></span><br><span class="line">            System.out.println(<span class="string">&quot;==========获取所有权限的所有属性===========&quot;</span>);</span><br><span class="line">            Field[] fields1 = c1.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">                System.out.println(field.getName());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-4获取单个属性：-getField"><a href="#27-4-4获取单个属性：-getField" class="headerlink" title="27.4.4获取单个属性： getField()"></a>27.4.4获取单个属性： getField()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;============获取单个属性对象：getField===========&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">           System.out.println(name.getName());</span><br></pre></td></tr></table></figure>

<h3 id="27-4-5-获取所有权限的的单个属性：getDeclaredField"><a href="#27-4-5-获取所有权限的的单个属性：getDeclaredField" class="headerlink" title="27.4.5 获取所有权限的的单个属性：getDeclaredField()"></a>27.4.5 获取所有权限的的单个属性：getDeclaredField()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;============获取所有权限的单个属性对象：getField===========&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">           System.out.println(size.getName());</span><br></pre></td></tr></table></figure>

<h3 id="27-4-6-获取所有方法-getDeclaredMethods"><a href="#27-4-6-获取所有方法-getDeclaredMethods" class="headerlink" title="27.4.6 获取所有方法 getDeclaredMethods()"></a>27.4.6 获取所有方法 getDeclaredMethods()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=============获取所有方法：getDeclaedMethods===========&quot;</span>);</span><br><span class="line">           Method[] methods = c1.getDeclaredMethods();</span><br><span class="line">           <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;方法名&quot;</span>+method.getName());</span><br><span class="line">               System.out.println(<span class="string">&quot;方法的返回值：&quot;</span>+method.getReturnType());</span><br><span class="line">               Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">               <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">               <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                   sb.append(parameterType.getName()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(<span class="string">&quot;方法的参数列表：&quot;</span>+sb.toString());</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-7-获取单个方法-getMethod"><a href="#27-4-7-获取单个方法-getMethod" class="headerlink" title="27.4.7 获取单个方法 getMethod()"></a>27.4.7 获取单个方法 getMethod()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;==============获取单个方法=============&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">setSize</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setSize&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">            System.out.println(setSize);</span><br></pre></td></tr></table></figure>

<h3 id="27-4-8-获取所有权限的构造器：-getDeclaredConstructor"><a href="#27-4-8-获取所有权限的构造器：-getDeclaredConstructor" class="headerlink" title="27.4.8 获取所有权限的构造器： getDeclaredConstructor()"></a>27.4.8 获取所有权限的构造器： getDeclaredConstructor()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;=============获取所有权限的构造器===========&quot;</span>);</span><br><span class="line">         Constructor&lt;?&gt;[] declaredConstructors = c1.getDeclaredConstructors();</span><br><span class="line">         <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;构造器：&quot;</span>+declaredConstructor.getName());</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-4-9-获取单个构造器：-getDeclaredConstructor"><a href="#27-4-9-获取单个构造器：-getDeclaredConstructor" class="headerlink" title="27.4.9 获取单个构造器： getDeclaredConstructor()"></a>27.4.9 获取单个构造器： getDeclaredConstructor()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;==========获取单个构造器=================&quot;</span>);</span><br><span class="line">           Constructor&lt;?&gt; declaredConstructor = c1.getDeclaredConstructor(String.class, Date.class,<span class="type">int</span>.class,String.class);</span><br><span class="line">           System.out.println(<span class="string">&quot;有参构造器:&quot;</span>+declaredConstructor.getName());</span><br></pre></td></tr></table></figure>

<h1 id="28-多线程"><a href="#28-多线程" class="headerlink" title="28 多线程"></a>28 多线程</h1><h2 id="28-1-创建线程"><a href="#28-1-创建线程" class="headerlink" title="28.1  创建线程"></a>28.1  创建线程</h2><p>证明Java天生多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1工具获取当前 线程管理对象</span></span><br><span class="line">        <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取 thread 线程的数组</span></span><br><span class="line">        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.循环  一下</span></span><br><span class="line">        <span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">            System.out.println(threadInfo.getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java创建线程主要有两种方式：</p>
<ul>
<li>继承Thread类</li>
<li>实现Runnable</li>
</ul>
<h3 id="28-1-1继承Thread类"><a href="#28-1-1继承Thread类" class="headerlink" title="28.1.1继承Thread类"></a>28.1.1继承Thread类</h3><p>步骤：</p>
<ul>
<li>编写类、继承Thread</li>
<li>重写run方法</li>
<li>创建线程对象</li>
<li>调用start方法启动线程</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种实现方式 ：extends Thread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-1-2-实现Runnable接口"><a href="#28-1-2-实现Runnable接口" class="headerlink" title="28.1.2 实现Runnable接口"></a>28.1.2 实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">////        1.创建Runnable对象</span></span><br><span class="line"><span class="comment">//        Runnable t = new Thread2();</span></span><br><span class="line"><span class="comment">////        2.创建Thread对象</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(t);</span></span><br><span class="line"><span class="comment">//        Thread t2 = new Thread(t);</span></span><br><span class="line"><span class="comment">//        t1.setName(&quot;线程一&quot;);</span></span><br><span class="line"><span class="comment">//        t2.setName(&quot;线程二&quot;);</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line"><span class="comment">//        t2.start();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        匿名内部类</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="28-2-线程的状态"><a href="#28-2-线程的状态" class="headerlink" title="28.2 线程的状态"></a>28.2 线程的状态</h2><p>线程一共有六种状态</p>
<ul>
<li>NEW 新建</li>
<li>RUNNABLE 可运行</li>
<li>BLOCKED 阻塞</li>
<li>WAITING 等待</li>
<li>TIMED_WAITING 计时等待</li>
<li>TERMINATED 终止</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/0052344.png" alt="00522"></p>
<h2 id="28-3-常用方法"><a href="#28-3-常用方法" class="headerlink" title="28.3 常用方法"></a>28.3 常用方法</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167523588725899.png" alt="167523588725878"></p>
<h3 id="28-3-1-sleep-方法"><a href="#28-3-1-sleep-方法" class="headerlink" title="28.3.1 sleep()方法"></a>28.3.1 sleep()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: sleep 休眠</span></span><br><span class="line"><span class="comment"> *  Thread.sleep(毫秒)  位置 ：当前线程</span></span><br><span class="line"><span class="comment"> *  调用些方法==》 有限等待  ==》  就绪状态  重新抢时间片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//                    Thread.sleep(100);</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Thread.sleep(100);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-2-yield-方法"><a href="#28-3-2-yield-方法" class="headerlink" title="28.3.2 yield()方法"></a>28.3.2 yield()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: yield     Thread.yield();</span></span><br><span class="line"><span class="comment"> *  *</span></span><br><span class="line"><span class="comment"> *  * //1  让出时间片  ==》  直接进入 就结状态，   有可能会直接又抢到时间片，所以可以线程 在外观上不会中断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&quot;</span>+i);</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">50</span>)&#123;</span><br><span class="line">                        Thread.<span class="keyword">yield</span>();</span><br><span class="line"><span class="comment">//                        try &#123;</span></span><br><span class="line"><span class="comment">//                            Thread.sleep(100);</span></span><br><span class="line"><span class="comment">//                        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-3-join-方法"><a href="#28-3-3-join-方法" class="headerlink" title="28.3.3 join()方法"></a>28.3.3 join()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 17:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: 希望不要出现交替执行的状态</span></span><br><span class="line"><span class="comment"> *  * 让线程执行的逻辑有顺序：   一个线程 执行完 再执行另外一个线程</span></span><br><span class="line"><span class="comment"> *  *</span></span><br><span class="line"><span class="comment"> *  * 线程对象.join();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=111&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=222&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-4-setPriority（）方法"><a href="#28-3-4-setPriority（）方法" class="headerlink" title="28.3.4  setPriority（）方法"></a>28.3.4  setPriority（）方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 18:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>: 优先级别 了解部分： 不一定准确</span></span><br><span class="line"><span class="comment"> *  默认5  1-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&quot;</span>+ i );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-3-5-setDaemon-方法-表示守护线程"><a href="#28-3-5-setDaemon-方法-表示守护线程" class="headerlink" title="28.3.5 setDaemon()方法  表示守护线程"></a>28.3.5 setDaemon()方法  表示守护线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day_16.thread_method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-01 18:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>:</span></span><br><span class="line"><span class="comment"> * 1. 守护线程 依赖主线程 ， 主线程结束， 守护线程结束</span></span><br><span class="line"><span class="comment"> * 2. 线程对象.setDaemon(true)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;999&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        t1.setDaemon(<span class="literal">true</span>);  <span class="comment">// 表示守护线程</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-4-线程安全"><a href="#28-4-线程安全" class="headerlink" title="28.4 线程安全"></a>28.4 线程安全</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753021844179.png" alt="16753021844170"></p>
<h2 id="28-5-死锁"><a href="#28-5-死锁" class="headerlink" title="28.5 死锁"></a>28.5 死锁</h2><ul>
<li>当地一个线程拥有A对象锁标记,并等待B对象锁标记,同时第二个线程拥有B对象锁标记,并等待A对象锁标记时,产生死锁.</li>
<li>一个线程可以同时拥有多个对象的锁标记,当线程阻塞时,不会释放已经拥有的锁标记,由此可能造成死锁.</li>
</ul>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167530923814297.png" alt="1675309238142978"></p>
<h2 id="28-6-线程池"><a href="#28-6-线程池" class="headerlink" title="28.6 线程池"></a>28.6 线程池</h2><h3 id="28-6-1-概念"><a href="#28-6-1-概念" class="headerlink" title="28.6.1 概念"></a>28.6.1 概念</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167532890856785598.png" alt="167532890559978"></p>
<h3 id="28-6-2-API"><a href="#28-6-2-API" class="headerlink" title="28.6.2 API"></a>28.6.2 API</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167532898731429.png" alt="1675328931485729"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753289453451682.png" alt="16753284543941682"></p>
<h3 id="28-6-3-线程池的参数"><a href="#28-6-3-线程池的参数" class="headerlink" title="28.6.3 线程池的参数"></a>28.6.3 线程池的参数</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167534124329943360.png" alt="16753244339943360"></p>
<h3 id="28-6-4-执行流程"><a href="#28-6-4-执行流程" class="headerlink" title="28.6.4 执行流程"></a>28.6.4 执行流程</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16753305434147063.png" alt="167533054347063"></p>
<h3 id="28-6-5-拒绝"><a href="#28-6-5-拒绝" class="headerlink" title="28.6.5 拒绝"></a>28.6.5 拒绝</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675331527444733.png" alt="167533152337733"></p>
<h3 id="28-6-6-关闭"><a href="#28-6-6-关闭" class="headerlink" title="28.6.6 关闭"></a>28.6.6 关闭</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675331780378.png" alt="1675331780378"></p>
<h2 id="28-7-有返回值的线程"><a href="#28-7-有返回值的线程" class="headerlink" title="28.7 有返回值的线程"></a>28.7 有返回值的线程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675389223012.png" alt="1675389223012"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 兰晓东</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-03 9:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Callable&lt;Integer&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> task.get();</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-8-Lock锁"><a href="#28-8-Lock锁" class="headerlink" title="28.8 Lock锁"></a>28.8 Lock锁</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167533392046369.png" alt="167539203346369"></p>
<h3 id="28-8-1-Lock-锁"><a href="#28-8-1-Lock-锁" class="headerlink" title="28.8.1 Lock 锁"></a>28.8.1 Lock 锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    String[] arr = &#123;<span class="string">&quot;刘&quot;</span>,<span class="string">&quot;关&quot;</span>,<span class="string">&quot;张&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArr</span><span class="params">(String value)</span>&#123;</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        arr[index++] = value;</span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String[] getArr()&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoctTestMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">LockTest</span> <span class="variable">lt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LockTest</span>();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                lt.setArr(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            executorService.submit(r);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        System.out.println(Arrays.toString(lt.getArr()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-8-2-读写锁"><a href="#28-8-2-读写锁" class="headerlink" title="28.8.2 读写锁"></a>28.8.2 读写锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    1.创建读写锁</span></span><br><span class="line">   <span class="type">ReentrantReadWriteLock</span> <span class="variable">rrw</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    读锁</span></span><br><span class="line">    ReentrantReadWriteLock.<span class="type">ReadLock</span> <span class="variable">readLock</span> <span class="operator">=</span> rrw.readLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    写锁</span></span><br><span class="line">    ReentrantReadWriteLock.<span class="type">WriteLock</span> <span class="variable">writeLock</span> <span class="operator">=</span> rrw.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLock3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="type">ReadWriteLock</span> <span class="variable">rw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteLock</span>();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                rw.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">write</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                rw.setValue(<span class="string">&quot;写&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            executorService.submit(read);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) &#123;</span><br><span class="line">            executorService.submit(write);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-9-安全集合"><a href="#28-9-安全集合" class="headerlink" title="28.9 安全集合"></a>28.9 安全集合</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16754234111997349.png" alt="167541193397349"></p>
<h3 id="28-9-1-copyOnWriteArrayList"><a href="#28-9-1-copyOnWriteArrayList" class="headerlink" title="28.9.1 copyOnWriteArrayList"></a>28.9.1 copyOnWriteArrayList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">111</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">2222</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">333</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">444</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">555</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">666</span>); <span class="comment">//新增</span></span><br><span class="line">        list1.add(<span class="number">0</span>,<span class="number">2222</span>);<span class="comment">// update</span></span><br><span class="line">        System.out.println(list1);</span><br><span class="line">        System.out.println( list1.get(<span class="number">0</span>)); <span class="comment">//获取</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-9-2-CopyOnWriteAyyaySet"><a href="#28-9-2-CopyOnWriteAyyaySet" class="headerlink" title="28.9.2 CopyOnWriteAyyaySet"></a>28.9.2 CopyOnWriteAyyaySet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//       set 没有下标,没有顺序 ,不能重复</span></span><br><span class="line">        Set&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        线程安全 : 加锁</span></span><br><span class="line">        Set&lt;Object&gt; set1 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="28-9-3-ConcurrentHashMap"><a href="#28-9-3-ConcurrentHashMap" class="headerlink" title="28.9.3 ConcurrentHashMap"></a>28.9.3 ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map =  <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            添加</span></span><br><span class="line">            map.put(<span class="string">&quot;1&quot;</span>+i,i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        取值 key</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;11&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; next = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> next.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> next.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="29-10-队列"><a href="#29-10-队列" class="headerlink" title="29.10 队列"></a>29.10 队列</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1623475416407007.png" alt="167541640337007"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167541642294142.png" alt="167541336494142"></p>
<h4 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675416979341.png" alt="1675416979341"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675416994175.png" alt="1675416994175"></p>
<h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675417343172810.png" alt="167541712272810"></p>
<h1 id="20-网络编程"><a href="#20-网络编程" class="headerlink" title="20 网络编程"></a>20 网络编程</h1><h2 id="20-1-网络编程"><a href="#20-1-网络编程" class="headerlink" title="20.1 网络编程"></a>20.1 网络编程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167431245473178188.png" alt="16754の731378188"></p>
<ul>
<li>解释:<ul>
<li>让计算机与计算机之间建立连接,进行通讯</li>
</ul>
</li>
<li>OSI:<ul>
<li>(Open System Interconnet), 即开放式系统互联，是ISO组织在1985年研究的网路互联模型</li>
</ul>
</li>
<li>TCP&#x2F;IP 模型<ul>
<li>是因特网使用的参考模型，基于TCP&#x2F;IP的参考模型将协议分成四个层次,该模型中最重要的两个协议是TCP和IP协议</li>
</ul>
</li>
</ul>
<h2 id="20-2-OSI-TCP-x2F-IP"><a href="#20-2-OSI-TCP-x2F-IP" class="headerlink" title="20.2 OSI TCP&#x2F;IP"></a>20.2 OSI TCP&#x2F;IP</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675473563678.png" alt="1675473563678"></p>
<h2 id="20-3-TCP连接-三次握手-四次挥手"><a href="#20-3-TCP连接-三次握手-四次挥手" class="headerlink" title="20.3 TCP连接 : 三次握手 + 四次挥手"></a>20.3 TCP连接 : 三次握手 + 四次挥手</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167547364494178.png" alt="167547363394178"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167547223706073.png" alt="167547370622073"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675474189437.png" alt="1675474189437"></p>
<h2 id="20-4-TCP可靠性"><a href="#20-4-TCP可靠性" class="headerlink" title="20.4 TCP可靠性"></a>20.4 TCP可靠性</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167222474531180.png" alt="34"></p>
<p>滑动窗口机制</p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1432423675474807030.png" alt="167547422807030"></p>
<h2 id="20-5-UDP-传输层的另外一种协议"><a href="#20-5-UDP-传输层的另外一种协议" class="headerlink" title="20.5 UDP 传输层的另外一种协议"></a>20.5 UDP 传输层的另外一种协议</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675474960413.png" alt="1675474960413"></p>
<h2 id="20-6-TCP-x2F-IP-包"><a href="#20-6-TCP-x2F-IP-包" class="headerlink" title="20.6 TCP&#x2F;IP 包"></a>20.6 TCP&#x2F;IP 包</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475241333556.png" alt="167547335241556"></p>
<h2 id="20-7-IP"><a href="#20-7-IP" class="headerlink" title="20.7 IP"></a>20.7 IP</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475369778.png" alt="1675475369778"></p>
<h2 id="20-8-端口"><a href="#20-8-端口" class="headerlink" title="20.8 端口"></a>20.8 端口</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475470296.png" alt="1675475470296"></p>
<h2 id="20-9-InetAddress"><a href="#20-9-InetAddress" class="headerlink" title="20.9 InetAddress"></a>20.9 InetAddress</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675475575542345586.png" alt="167547445575586"></p>
<h2 id="20-10-Socket-编程"><a href="#20-10-Socket-编程" class="headerlink" title="20.10 Socket 编程"></a>20.10 Socket 编程</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167542276368812.png" alt="167547632268812"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675477114067.png" alt="1675477114067"></p>
<h3 id="20-10-1-客户端连接服务端发送字符信息"><a href="#20-10-1-客户端连接服务端发送字符信息" class="headerlink" title="20.10.1 客户端连接服务端发送字符信息"></a>20.10.1 客户端连接服务端发送字符信息</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接到&quot;</span> + socket.getLocalAddress() + <span class="string">&quot;: &quot;</span> + socket);</span><br><span class="line"></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">            bw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bw!= <span class="literal">null</span>)&#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(osw != <span class="literal">null</span>)&#123;</span><br><span class="line">                    osw.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            创建服务器端对象</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//            接受客户端传送过来的socket数据</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress()+<span class="string">&quot;连接上来了&quot;</span>+socket);</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-10-2-客户端连接服务端发送字节信息"><a href="#20-10-2-客户端连接服务端发送字节信息" class="headerlink" title="20.10.2 客户端连接服务端发送字节信息"></a>20.10.2 客户端连接服务端发送字节信息</h3><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;10.70.60.12&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">imgSrc</span> <span class="operator">=</span> <span class="string">&quot;F:\\java学习\\千峰\\workspace\\java\\javaBasic\\src\\day17_TCP_UDP\\img\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        client2(ip,port,imgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">client2</span><span class="params">(String ip,<span class="type">int</span> port,String imgSrc)</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到服务端&quot;</span>+socket);</span><br><span class="line">            is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imgSrc + <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(os != <span class="literal">null</span>)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建serverSocket对象</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2.阻塞方法等待客户 端</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端连上来了......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//自已定义的写流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\003.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ( (count = in.read(buf)) !=-<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buf,<span class="number">0</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-10-3-多个客户端连接服务端"><a href="#20-10-3-多个客户端连接服务端" class="headerlink" title="20.10.3 多个客户端连接服务端"></a>20.10.3 多个客户端连接服务端</h3><h4 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节字符转换流+ 缓冲流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line"></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>( os,<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制台输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            bw.write(next);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="type">Thread3</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread3</span>(socket);</span><br><span class="line">            thread3.start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多线程运行"><a href="#多线程运行" class="headerlink" title="多线程运行"></a>多线程运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread3</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有Socket对象</span></span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread3</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取内容</span></span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//通道读流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in,<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">//读不要停止： 死循环</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> buf.readLine();</span><br><span class="line">                    <span class="keyword">if</span>(line==<span class="literal">null</span>  || <span class="string">&quot;886&quot;</span>.equals(line)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(socket.getInetAddress().getHostName() + <span class="string">&quot;说：&quot;</span>+ line);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                    buf.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;退出了......&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="21-jdk8新特性"><a href="#21-jdk8新特性" class="headerlink" title="21 jdk8新特性"></a>21 jdk8新特性</h1><h2 id="21-1-总结"><a href="#21-1-总结" class="headerlink" title="21.1 总结"></a>21.1 总结</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675645595489.png" alt="1675645595489"></p>
<h2 id="21-2-Lambda"><a href="#21-2-Lambda" class="headerlink" title="21.2 Lambda"></a>21.2 Lambda</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167564650900fasdfawe675662790247.png" alt="167564650933008"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUuser3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//    1.匿名内部类</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IUser</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//     Lambda表达式</span></span><br><span class="line"><span class="comment">//        函数式接口: 只有一个重写方法</span></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">i1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        i1.a();</span><br><span class="line">        <span class="comment">//    有参数的</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">i2</span> <span class="operator">=</span> a -&gt;&#123;</span><br><span class="line">            System.out.println(a+<span class="string">&quot;有参Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        i2.a(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        有返回值的</span></span><br><span class="line">        <span class="type">IUuser3</span> <span class="variable">i3</span> <span class="operator">=</span> a-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(i3.a(<span class="number">5</span>));</span><br><span class="line">        <span class="type">IUser4</span> <span class="variable">i4</span> <span class="operator">=</span> (a,b) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个参数的Lambda表达式&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(i4.a(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756342346547352.png" alt="16756463547352"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span>  <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态添加方法,没有参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态添加方法,有参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(Hero hero)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Hero <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        标准匿名类</span></span><br><span class="line"><span class="comment">//        IUser1 u1 = new IUser1() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void a(String name) &#123;</span></span><br><span class="line"><span class="comment">//                Hero hero = new Hero();</span></span><br><span class="line"><span class="comment">//                hero.setName(name);</span></span><br><span class="line"><span class="comment">//                Hero.add(name);</span></span><br><span class="line"><span class="comment">////                System.out.println(hero.toString());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        u1.a(&quot;张三&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="comment">////        简化写法 : 对象::方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i1</span> <span class="operator">=</span> hero::setName;</span><br><span class="line">        i1.a(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(hero.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        类: 静态方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i2</span> <span class="operator">=</span> Hero::add;</span><br><span class="line">        i2.a(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line"><span class="comment">//        类:实例方法</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">user2</span> <span class="operator">=</span> Hero::getName;</span><br><span class="line">        user2.a(hero);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">////        类:: new</span></span><br><span class="line">        <span class="type">IUser3</span> <span class="variable">i3</span> <span class="operator">=</span> Hero::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">a</span> <span class="operator">=</span> i3.a();</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="comment">////        简化写法 : 对象::方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i1</span> <span class="operator">=</span> hero::setName;</span><br><span class="line">        i1.a(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(hero.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        类: 静态方法</span></span><br><span class="line">        <span class="type">IUser1</span> <span class="variable">i2</span> <span class="operator">=</span> Hero::add;</span><br><span class="line">        i2.a(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line"><span class="comment">//        类:实例方法</span></span><br><span class="line">        <span class="type">IUser2</span> <span class="variable">user2</span> <span class="operator">=</span> Hero::getName;</span><br><span class="line">        user2.a(hero);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">////        类:: new</span></span><br><span class="line">        <span class="type">IUser3</span> <span class="variable">i3</span> <span class="operator">=</span> Hero::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">a</span> <span class="operator">=</span> i3.a();</span><br><span class="line">        System.out.println(a.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="21-3-函数式接口"><a href="#21-3-函数式接口" class="headerlink" title="21.3 函数式接口"></a>21.3 函数式接口</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756472323657564.png" alt="167564763357564"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String, args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. accept 接受  Consumer :消费</span></span><br><span class="line"><span class="comment">//        有参数,没有返回值的</span></span><br><span class="line"><span class="comment">//        Consumer&lt;String&gt; c = new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(String s) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;s=&quot;+s);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        Consumer&lt;String&gt; c1 = s-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">        &#125;;</span><br><span class="line">        c1.accept(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        没有参数,有返回值的接口   ----  供給型接口</span></span><br><span class="line">        Supplier&lt;Integer&gt; s1 = ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.有参数,有返回值 apply:执行   ==== 函数式接口</span></span><br><span class="line">        Function&lt;String,Integer&gt; f1 = a -&gt;&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">222</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f1.apply(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    断言</span></span><br><span class="line">    Predicate&lt;String&gt; p1 = <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (s==<span class="literal">null</span>)?<span class="literal">false</span>:(s.length()==<span class="number">0</span>)?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Predicate&lt;String&gt; p2 = (s)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> (s==<span class="literal">null</span>)?<span class="literal">false</span>:(s.length()==<span class="number">0</span>)?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="21-4-Stream"><a href="#21-4-Stream" class="headerlink" title="21.4 Stream"></a>21.4 Stream</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675653785066.png" alt="1675653785066"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756554944437456734.png" alt="167565549443343"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756554884323428.png" alt="16756554838438"></p>
<h3 id="21-4-1-获取流"><a href="#21-4-1-获取流" class="headerlink" title="21.4.1 获取流"></a>21.4.1 获取流</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取Stream流对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">//        集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========集合==========&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        Stream&lt;String&gt; stringStream = list.parallelStream();</span><br><span class="line">        stream.forEach(System.out::print );</span><br><span class="line">        System.out.println();</span><br><span class="line">        stringStream.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======数组=======&quot;</span>);</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">        stream1.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============静态方法=======&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        Stream&lt;String[]&gt; generate = Stream.generate(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String[]&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] get() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        integerStream.forEach(System.out::print);</span><br><span class="line"><span class="comment">//        generate.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======long:range 范围=======&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">LongStream</span> <span class="variable">range</span> <span class="operator">=</span> LongStream.range(<span class="number">100</span>, <span class="number">1000</span>);</span><br><span class="line">        range.forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        传入一个List&#123;0,1,2,3,4,5,6</span></span><br><span class="line"><span class="comment">//        返回其中大于三的数值</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getRs</span><span class="params">(List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line"><span class="comment">//        Stream: 读写</span></span><br><span class="line"><span class="comment">//        1.再创建爱你一个List用来装返回的结果</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; rsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(next &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                rsList.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-4-2-使用流的中间操作"><a href="#21-4-2-使用流的中间操作" class="headerlink" title="21.4.2 使用流的中间操作"></a>21.4.2 使用流的中间操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; baseList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        baseList.add(<span class="number">15</span>);</span><br><span class="line">        baseList.add(<span class="number">52</span>);</span><br><span class="line">        baseList.add(<span class="number">35</span>);</span><br><span class="line">        baseList.add(<span class="number">5</span>);</span><br><span class="line">        baseList.add(<span class="number">57</span>);</span><br><span class="line">        baseList.add(<span class="number">95</span>);</span><br><span class="line"><span class="comment">//        获取对应它的Stream流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====获取对应集合的Stream流&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream = baseList.stream();</span><br><span class="line">        baseList.forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        stream.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======过滤=====&quot;</span>);</span><br><span class="line"><span class="comment">//        过滤</span></span><br><span class="line">        Stream&lt;Integer&gt; integerStream = stream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (integer &gt;= <span class="number">35</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        integerStream.forEach(System.out::print);</span></span><br><span class="line"></span><br><span class="line">        integerStream.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======limit============&quot;</span>);</span><br><span class="line">        baseList.stream().limit(<span class="number">3</span>).forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====skip========&quot;</span>);</span><br><span class="line">        baseList.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======sorted========&quot;</span>);</span><br><span class="line">        baseList.stream().sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========map================&quot;</span>);</span><br><span class="line">       baseList.stream().map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">apply</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> integer + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-4-3-串行-x2F-并行"><a href="#21-4-3-串行-x2F-并行" class="headerlink" title="21.4.3 串行&#x2F;并行"></a>21.4.3 串行&#x2F;并行</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675668489530.png" alt="1675668489530"></p>
<h3 id="21-4-4-Stream终止"><a href="#21-4-4-Stream终止" class="headerlink" title="21.4.4 Stream终止"></a>21.4.4 Stream终止</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/16756623238589210.png" alt="16756685892310"></p>
<h2 id="21-5-LocalDateTime"><a href="#21-5-LocalDateTime" class="headerlink" title="21.5 LocalDateTime"></a>21.5 LocalDateTime</h2><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675669534505.png" alt="1675669534505"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取到当前日期</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"><span class="comment">//    年月日</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年=&quot;</span>+now.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;月=&quot;</span>+now.getMonthValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;日=&quot;</span>+now.getDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">&quot;周/日&quot;</span>+now.getDayOfWeek());</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.plusYears(<span class="number">1</span>);</span><br><span class="line">        System.out.println(localDateTime.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;去年:&quot;</span>+now.plusYears(-<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;今年&quot;</span>+now.getYear());</span><br><span class="line">        System.out.println(<span class="string">&quot;明年:&quot;</span>+now.plusYears(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;上个月:&quot;</span>+now.minusMonths(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;下个月:&quot;</span>+now.minusMonths(-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675674843250793.png" alt="167567485073393"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parse = sdf.parse(format);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"><span class="comment">//        定义格式</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd : HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> dtf.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse2</span> <span class="operator">=</span> dtf.parse(<span class="string">&quot;2023-02-06 : 19:32:23&quot;</span>);</span><br><span class="line">        System.out.println(parse2);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse1</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-02-06 : 19:30:49&quot;</span>,dtf);</span><br><span class="line">        System.out.println(parse1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/167567545195121.png" alt="16756754531951"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        获取当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        toString</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime();</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取毫秒数: 计算</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> now.toEpochMilli();</span><br><span class="line">        System.out.println(l);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        计算秒  plusxxx</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> now.plusSeconds(<span class="number">60</span>);</span><br><span class="line">        System.out.println(instant);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        计算两个Instant之间的毫秒数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> Duration.between(instant,Instant.now()).toMillis();</span><br><span class="line"><span class="comment">//        获取系统时区</span></span><br><span class="line">        System.out.println(<span class="string">&quot;系统时区:&quot;</span>+ ZoneId.systemDefault().toString());</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        获取所有时区</span></span><br><span class="line">        Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">        System.out.println(availableZoneIds);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/1675676040095.png" alt="1675676040095"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        1.Date ==== &gt; Instant   调用里边独有的方法</span></span><br><span class="line"><span class="comment">//        date1.toInstant();</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date1.toInstant();</span><br><span class="line"><span class="comment">//        Instant ==== &gt;LocalDateTime</span></span><br><span class="line"><span class="comment">//        LocalDateTime.ofInstant(instant,系统时区)</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line"><span class="comment">//        LocalDateTime   ===== &gt; instant</span></span><br><span class="line"><span class="comment">//        localDateTime.atZone(系统时区).toInstant()</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line"><span class="comment">//        instant === &gt; Date</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="22-链表的设计与实现"><a href="#22-链表的设计与实现" class="headerlink" title="22 链表的设计与实现"></a>22 链表的设计与实现</h1><h2 id="22-1单向链表的实现"><a href="#22-1单向链表的实现" class="headerlink" title="22.1单向链表的实现"></a>22.1单向链表的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedLIst</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SingleLinkedLIst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">HeroNode</span>();</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在末尾添加节点到单项链表中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = node;</span><br><span class="line">        size++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照编号插入元素到链表中去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrderBy</span><span class="params">(<span class="type">int</span> index,HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.no &gt; node.no)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.no == node.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;准备插入的英雄编号&quot;</span>+ node.no +<span class="string">&quot;已经存在了,不能加入&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.next = cur.next;</span><br><span class="line">            cur.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入指定位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.next = cur.next;</span><br><span class="line">        cur.next = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改节点的信息,根据no编号来修改,即no编号不能变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.no == node.no)&#123;</span><br><span class="line">                cur.name = node.name;</span><br><span class="line">                cur.nickName = node.nickName;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编号没有找到等于&quot;</span>+node.no+<span class="string">&quot;的值,不能修改&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示链表遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HeroNode node)</span>&#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.next.no == node.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             cur.next = cur.next.next;</span><br><span class="line">             size--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要删除的节点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找单链表中的倒数第K个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getHeroNode</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span> || k &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (size-k); i++) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表的最前端</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            next = cur.next;  <span class="comment">//先暂时保存当前节点的下一个节点</span></span><br><span class="line">            cur.next = dummy.next;  <span class="comment">//将cur节点的下一个节点指向新的链表的最前端</span></span><br><span class="line">            dummy.next = cur;</span><br><span class="line">            cur = next;    <span class="comment">//让cur后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        head.next = dummy.next;   <span class="comment">//实现单链表的反转</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  从尾到头打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> )&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    String name;</span><br><span class="line">    String nickName;</span><br><span class="line">    HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName, HeroNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="22-2-双向链表的设计与实现"><a href="#22-2-双向链表的设计与实现" class="headerlink" title="22.2 双向链表的设计与实现"></a>22.2 双向链表的设计与实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLInkedList</span> &#123;</span><br><span class="line">     HeroNode2 head;</span><br><span class="line">     <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleLInkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">HeroNode2</span>();</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = node;</span><br><span class="line">            node.pre = head;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">        node.pre = cur;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode2 node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(cur.io == node.io)&#123;</span><br><span class="line">                cur.name = node.name;</span><br><span class="line">                cur.nickName = node.nickName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> io</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> io)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//       判断当前链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空,无法修改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;  <span class="comment">//辅助节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.io == io)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            cur.pre.next = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                cur.next.pre = cur.pre;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历双向链表的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> io;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> io, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.io = io;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;io=&quot;</span> + io +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2019/04/24/quartz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-mjSRXmWg" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/Quartz_Logo_large.jpg" alt="Quartz_Logo_large"></p>
<blockquote>
<p>Author：Shine</p>
<p>Version：9.0.2</p>
</blockquote>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><blockquote>
<p><strong>Quartz</strong> ：<a href="http://www.quartz-scheduler.org/">http://www.quartz-scheduler.org/</a></p>
<p>是一个<a href="">定时任务调度框架</a>。比如你遇到这样的问题：</p>
<ul>
<li>想在30分钟后，查看订单是否支付，未支付则取消订单</li>
<li>想在每月29号，信用卡自动还款</li>
<li>…</li>
<li>想定时在某个时间，去做某件事(任务)。</li>
</ul>
</blockquote>
<blockquote>
<p>Quartz是要做定时任务的调度，设置好触发时间规则，以及相应的任务(Job)即可。</p>
</blockquote>
<h3 id="二、Quartz使用"><a href="#二、Quartz使用" class="headerlink" title="二、Quartz使用"></a>二、Quartz使用</h3><hr>
<h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Quartz任务调度--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-定义Job"><a href="#2-2-定义Job" class="headerlink" title="2.2 定义Job"></a>2.2 定义Job</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作类的具体实现，即需要定时执行的“某件事”</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloQuartz</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">         <span class="comment">//创建工作详情</span></span><br><span class="line">        JobDetail jobDetail=context.getJobDetail();</span><br><span class="line">        <span class="comment">//获取工作的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> jobDetail.getKey().getName();<span class="comment">//任务名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jobGroup</span> <span class="operator">=</span> jobDetail.getKey().getGroup();<span class="comment">//任务group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;job执行，job：&quot;</span>+jobName+<span class="string">&quot; group:&quot;</span>+jobGroup);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-API测试"><a href="#2-3-API测试" class="headerlink" title="2.3 API测试"></a>2.3 API测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建scheduler，调度器</span></span><br><span class="line">            <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            <span class="comment">//定义一个Trigger,触发条件类</span></span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                	.withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                	.startNow()<span class="comment">//一旦加入scheduler，立即生效，即开始计时</span></span><br><span class="line">                	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                              .withIntervalInSeconds(<span class="number">1</span>) <span class="comment">//每隔一秒执行一次</span></span><br><span class="line">                              .repeatForever()) <span class="comment">//一直执行，直到结束时间</span></span><br><span class="line">                	.endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2019</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">0</span>).getTime());<span class="comment">//设置结束时间</span></span><br><span class="line">            <span class="comment">//定义一个JobDetail</span></span><br><span class="line">            <span class="comment">//定义Job类为HelloQuartz类，这是真正的执行逻辑所在</span></span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">job</span> <span class="operator">=</span> JobBuilder.newJob(HelloQuartz.class) </span><br><span class="line">                    .withIdentity(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name/group</span></span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">//调度器 中加入 任务和触发器</span></span><br><span class="line">            scheduler.scheduleJob(job, trigger);</span><br><span class="line">            <span class="comment">//启动任务调度</span></span><br><span class="line">            scheduler.start();            </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-配置"><a href="#2-4-配置" class="headerlink" title="2.4 配置"></a>2.4 配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 名为：quartz.properties，放置在classpath下，如果没有此配置则按默认配置启动</span></span><br><span class="line"><span class="comment"># 指定调度器名称，非实现类</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span> = <span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="comment"># 指定线程池实现类</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment"># 线程池线程数量</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span> = <span class="string">10 </span></span><br><span class="line"><span class="comment"># 优先级，默认5</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br><span class="line"><span class="comment"># 非持久化job</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span> = <span class="string">org.quartz.simpl.RAMJobStore</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-核心类说明"><a href="#2-5-核心类说明" class="headerlink" title="2.5 核心类说明"></a>2.5 核心类说明</h4><blockquote>
<p>Scheduler：调度器。所有的调度都是由它控制，是Quartz的大脑，所有任务都是由它来管理</p>
<p>Job：任务，想定时执行的事情(定义业务逻辑)</p>
<p>JobDetail：基于Job，进一步包装。其中关联一个Job，并为Job指定更详细的属性，比如标识等</p>
<p>Trigger：触发器。可以指定给某个任务，指定任务的触发机制。</p>
</blockquote>
<h3 id="三、Trigger"><a href="#三、Trigger" class="headerlink" title="三、Trigger"></a>三、Trigger</h3><hr>
<h4 id="3-1-SimpleTrigger"><a href="#3-1-SimpleTrigger" class="headerlink" title="3.1 SimpleTrigger"></a>3.1 SimpleTrigger</h4><blockquote>
<p>以一定的时间间隔（单位是毫秒）执行的任务。</p>
<ul>
<li>指定起始和截止时间(时间段)</li>
<li>指定时间间隔、执行次数</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">            	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                          .withIntervalInSeconds(<span class="number">1</span>) <span class="comment">//每秒执行一次</span></span><br><span class="line">                          .repeatForever())<span class="comment">// 不限执行次数</span></span><br><span class="line">                .endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">0</span>).getTime())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">            	.withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                          .withIntervalInMinutes(<span class="number">3</span>) <span class="comment">// 每3分钟执行一次</span></span><br><span class="line">                          .withRepeatCount(<span class="number">3</span>)) <span class="comment">// 执行次数不超过3次</span></span><br><span class="line">                .endAt(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">0</span>).getTime()) </span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

<h4 id="3-2-CronTrigger-【重点】"><a href="#3-2-CronTrigger-【重点】" class="headerlink" title="3.2 CronTrigger 【重点】"></a>3.2 CronTrigger 【<code>重点</code>】</h4><blockquote>
<p>适合于更复杂的任务，它支持类型于Linux Cron的语法（并且更强大）。</p>
<ul>
<li>指定Cron表达式即可</li>
</ul>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每天10:00-12:00，每隔2分钟执行一次</span></span><br><span class="line"><span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;t1&quot;</span>, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0 0/2 10-12 * * ?&quot;</span>)).build(); </span><br></pre></td></tr></table></figure>

<h5 id="3-2-1-Cron表达式组成"><a href="#3-2-1-Cron表达式组成" class="headerlink" title="3.2.1 Cron表达式组成"></a>3.2.1 Cron表达式组成</h5><blockquote>
<p>表达式组成：”秒 分 时 日 月 星期几 [年]” ，其中”年” 是可选的，一般不指定。</p>
<ul>
<li>如：”10 20 18 3 5 ?”代表”5月3日18点20分10秒，星期几不确定 “</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>位置</th>
<th>时间域</th>
<th>允许值</th>
<th>特殊值</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秒</td>
<td>0-59</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>2</td>
<td>分钟</td>
<td>0-59</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>3</td>
<td>小时</td>
<td>0-23</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>4</td>
<td>日期</td>
<td>1-31</td>
<td>, - * ? &#x2F; L W</td>
</tr>
<tr>
<td>5</td>
<td>月份</td>
<td>1-12</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>6</td>
<td>星期</td>
<td>1-7</td>
<td>, - * ? &#x2F; L  #</td>
</tr>
<tr>
<td>7</td>
<td>年份（可选）</td>
<td></td>
<td>, - * &#x2F;</td>
</tr>
</tbody></table>
<h5 id="3-2-2-Cron表达式符号"><a href="#3-2-2-Cron表达式符号" class="headerlink" title="3.2.2 Cron表达式符号"></a>3.2.2 Cron表达式符号</h5><blockquote>
<p>表达式中可使用的特殊符号的含义如下</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">星号(*)</td>
<td>可用在所有字段中，表示对应时间域的每一个时刻，例如， 在分钟字段时，表示“每分钟”</td>
</tr>
<tr>
<td align="center">问号(?)</td>
<td>该字符只在日期和星期字段中使用，它通常指定为“不确定值”</td>
</tr>
<tr>
<td align="center">减号(-)</td>
<td>表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12</td>
</tr>
<tr>
<td align="center">逗号(,)</td>
<td>表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五</td>
</tr>
<tr>
<td align="center">斜杠(&#x2F;)</td>
<td>x&#x2F;y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0&#x2F;15，则表示为0,15,30和45秒，而5&#x2F;15在分钟字段		 中表示5,20,35,50</td>
</tr>
<tr>
<td align="center">井号(#)</td>
<td>该字符只用在星期字段中，”4#2”代表第二个星期3，“5#4”代表第4个星期四</td>
</tr>
<tr>
<td align="center">L</td>
<td>该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。</td>
</tr>
<tr>
<td align="center"></td>
<td>如果L用在星期字段里，则表示星期六，等同于7</td>
</tr>
<tr>
<td align="center"></td>
<td>L出现在星期字段里，而且在前面有一个数值x，则表示“这个月的最后一个周x”，例如，6L表示该月的最后星期五</td>
</tr>
<tr>
<td align="center"></td>
<td>L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号</td>
</tr>
<tr>
<td align="center">W</td>
<td>该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日</td>
</tr>
<tr>
<td align="center"></td>
<td>例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号	 是星期二，那结果就是15号星期二；但必须注意关联的匹配日期不能够跨月</td>
</tr>
<tr>
<td align="center">LW组合</td>
<td>在日期字段可以组合使用LW，它的意思是当月的最后一个工作日</td>
</tr>
</tbody></table>
<h5 id="3-2-3-Cron表达式示例"><a href="#3-2-3-Cron表达式示例" class="headerlink" title="3.2.3 Cron表达式示例"></a>3.2.3 Cron表达式示例</h5><blockquote>
<p>演示实例</p>
</blockquote>
<table>
<thead>
<tr>
<th>表示式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0 0 12 * * ?</td>
<td>每天12点运行</td>
</tr>
<tr>
<td>0 15 10 * * ?</td>
<td>每天10:15运行</td>
</tr>
<tr>
<td>0 15 10 * * ? 2008</td>
<td>在2008年的每天10：15运行</td>
</tr>
<tr>
<td>0 * 14 * * ?</td>
<td>每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。</td>
</tr>
<tr>
<td>0 0&#x2F;5 14 * * ?</td>
<td>每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。</td>
</tr>
<tr>
<td>0 0&#x2F;5 14,18 * * ?</td>
<td>每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。</td>
</tr>
<tr>
<td>0 0-5 14 * * ?</td>
<td>每天14:00点到14:05，每分钟运行一次。</td>
</tr>
<tr>
<td>0 0-5&#x2F;2 14 * * ?</td>
<td>每天14:00点到14:05，每2分钟运行一次。</td>
</tr>
<tr>
<td>0 10,44 14 ? 3 4</td>
<td>3月每周三的14:10分和14:44分，各运行一次。</td>
</tr>
<tr>
<td>0 15 10 ? * 2-6</td>
<td>每周一，二，三，四，五的10:15分运行一次。</td>
</tr>
<tr>
<td>0 15 10 15 * ?</td>
<td>每月15日10:15分运行。</td>
</tr>
<tr>
<td>0 15 10 L * ?</td>
<td>每月最后一天10:15分运行。</td>
</tr>
<tr>
<td>0 15 10 ? * 6L</td>
<td>每月最后一个星期五10:15分运行。【此时天必须是”?”】</td>
</tr>
<tr>
<td>0 15 10 ? * 6L 2007-2009</td>
<td>在2007,2008,2009年每个月的最后一个星期五的10:15分运行。</td>
</tr>
</tbody></table>
<h3 id="四、Spring整合Quartz-【重点】"><a href="#四、Spring整合Quartz-【重点】" class="headerlink" title="四、Spring整合Quartz 【重点】"></a>四、Spring整合Quartz 【<code>重点</code>】</h3><h4 id="4-1-依赖"><a href="#4-1-依赖" class="headerlink" title="4.1 依赖"></a>4.1 依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">quartz.version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">quartz.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;quartz.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-定义Job"><a href="#4-2-定义Job" class="headerlink" title="4.2 定义Job"></a>4.2 定义Job</h4><blockquote>
<p>定义一个Job类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;job 执行&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-配置"><a href="#4-3-配置" class="headerlink" title="4.3 配置"></a>4.3 配置</h4><blockquote>
<p>调度器   SchedulerFactoryBean</p>
<p>触发器   CronTriggerFactoryBean</p>
<p>JobDetail   JobDetailFactoryBean</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Spring整合Quartz进行配置遵循下面的步骤：</span></span><br><span class="line"><span class="comment">        1：定义工作任务的Job</span></span><br><span class="line"><span class="comment">        2：定义触发器Trigger，并将触发器与工作任务绑定</span></span><br><span class="line"><span class="comment">        3：定义调度器，并将Trigger注册到Scheduler</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1：定义任务的bean ，这里使用JobDetailFactoryBean,也可以使用MethodInvokingJobDetailFactoryBean ，配置类似--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;lxJob&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定job的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;job1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定job的分组 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;group&quot;</span> <span class="attr">value</span>=<span class="string">&quot;job_group1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定具体的job类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qf.quartz.MyJob&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cronTrigger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Trigger的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trigger1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Trigger的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;group&quot;</span> <span class="attr">value</span>=<span class="string">&quot;trigger_group1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Tirgger绑定的JobDetail --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobDetail&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;lxJob&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Cron 的表达式 ，当前是每隔5s运行一次 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cronExpression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*/5 * * * * ?&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.定义调度器，并将Trigger注册到调度器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;triggers&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;cronTrigger&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加 quartz 配置，如下两种方式均可 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;quartzProperties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                # 指定调度器名称，实际类型为：QuartzScheduler</span><br><span class="line">                org.quartz.scheduler.instanceName = MyScheduler</span><br><span class="line">                # 指定连接池</span><br><span class="line">                org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool</span><br><span class="line">                # 连接池线程数量</span><br><span class="line">                org.quartz.threadPool.threadCount = 11</span><br><span class="line">                # 优先级</span><br><span class="line">                org.quartz.threadPool.threadPriority = 5</span><br><span class="line">                # 不持久化job</span><br><span class="line">                org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-操作"><a href="#4-4-操作" class="headerlink" title="4.4 操作"></a>4.4 操作</h4><h5 id="4-4-1-启动任务"><a href="#4-4-1-启动任务" class="headerlink" title="4.4.1 启动任务"></a>4.4.1 启动任务</h5><blockquote>
<p>工厂启动，调度器启动，任务调度开始</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;	</span><br><span class="line">    <span class="comment">// 工厂启动，任务启动，工厂关闭，任务停止</span></span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-2-任务操作"><a href="#4-4-2-任务操作" class="headerlink" title="4.4.2 任务操作"></a>4.4.2 任务操作</h5><h6 id="4-4-2-1-删除任务"><a href="#4-4-2-1-删除任务" class="headerlink" title="4.4.2.1 删除任务"></a>4.4.2.1 删除任务</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 删除Job</span></span><br><span class="line">    scheduler.deleteJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-4-2-2-暂停、恢复"><a href="#4-4-2-2-暂停、恢复" class="headerlink" title="4.4.2.2 暂停、恢复"></a>4.4.2.2 暂停、恢复</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 暂停，恢复工作</span></span><br><span class="line">    scheduler.pauseJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));<span class="comment">// 暂停工作</span></span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    scheduler.resumeJob(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>,<span class="string">&quot;job_group1&quot;</span>));<span class="comment">// 恢复工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-4-2-3-批量操作"><a href="#4-4-2-3-批量操作" class="headerlink" title="4.4.2.3 批量操作"></a>4.4.2.3 批量操作</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SchedulerException &#123;		</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="type">StdScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> (StdScheduler) context.getBean(<span class="string">&quot;scheduler&quot;</span>);</span><br><span class="line">    System.out.println(scheduler.getClass());</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    GroupMatcher&lt;JobKey&gt; group1 = GroupMatcher.groupEquals(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    scheduler.pauseJobs(group1); <span class="comment">// 暂停组中所有工作</span></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    scheduler.resumeJobs(group1); <span class="comment">// 恢复组中所有工作 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>定时任务</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>日志</title>
    <url>/2019/04/24/Log/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>

    <div id="aplayer-nRfjZpju" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-日志介绍"><a href="#1-1-日志介绍" class="headerlink" title="1.1 日志介绍"></a>1.1 日志介绍</h4><blockquote>
<p>用于记录系统中发生的各种事件。记录的位置常见的有 ：控制台、磁盘文件等</p>
</blockquote>
<h4 id="1-2-日志级别"><a href="#1-2-日志级别" class="headerlink" title="1.2 日志级别"></a>1.2 日志级别</h4><blockquote>
<p>日志级别从低到高：</p>
<p>TRACE、DEBUG、INFO、WARN、ERROR、FATAL</p>
</blockquote>
<h4 id="1-3-日志作用"><a href="#1-3-日志作用" class="headerlink" title="1.3 日志作用"></a>1.3 日志作用</h4><blockquote>
<ul>
<li>通过日志观察、分析项目的运行情况 (项目维护)</li>
<li>通过日志分析用户的使用情况 (大数据分析)</li>
<li>…</li>
</ul>
</blockquote>
<h3 id="二、解决方案1"><a href="#二、解决方案1" class="headerlink" title="二、解决方案1"></a>二、解决方案1</h3><hr>
<h4 id="2-1-Log4j-Commons-Logging"><a href="#2-1-Log4j-Commons-Logging" class="headerlink" title="2.1 Log4j+Commons-Logging"></a>2.1 Log4j+Commons-Logging</h4><h5 id="2-1-1-导入依赖"><a href="#2-1-1-导入依赖" class="headerlink" title="2.1.1 导入依赖"></a>2.1.1 导入依赖</h5><blockquote>
<p>项目中添加 Log4j和Commons-Logging的依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-基本使用"><a href="#2-1-2-基本使用" class="headerlink" title="2.1.2 基本使用"></a>2.1.2 基本使用</h5><blockquote>
<p>基本API</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloLog</span> &#123;</span><br><span class="line">	<span class="comment">// 需要输出日志的类，可以创建一个log属性</span></span><br><span class="line">    <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(HelloLog.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;hello trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;hello debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hello info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;hello warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;hello error&quot;</span>);</span><br><span class="line">        log.fatal(<span class="string">&quot;hello fatal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-配置信息"><a href="#2-1-3-配置信息" class="headerlink" title="2.1.3 配置信息"></a>2.1.3 配置信息</h5><blockquote>
<p>定义配置文件 <a href="">log4j.xml</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%p</td>
<td>输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</td>
</tr>
<tr>
<td>%r</td>
<td>输出自应用启动到输出该log信息耗费的毫秒数</td>
</tr>
<tr>
<td>%c</td>
<td>输出所在类的全名</td>
</tr>
<tr>
<td>%t</td>
<td>输出产生该日志事件的线程名</td>
</tr>
<tr>
<td>%n</td>
<td>输出一个回车换行符</td>
</tr>
<tr>
<td>%d</td>
<td>输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd  HH:mm:ss,SSS}，输出类似：2002-10-18  22:10:28,921</td>
</tr>
<tr>
<td>%l</td>
<td>输出日志事件的发生位置，包括类名、发生的线程，以及在代码中的行数。举例：Testlo4.main(TestLog4.java:10)</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>  encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">PUBLIC</span> <span class="string">&quot;-//LOGGER&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://org/apache/log4j/xml/log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- org.apache.log4j.ConsoleAppender 输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myConsole&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 输出到文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myFile1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">value</span>=<span class="string">&quot;d:/log/hello.log&quot;</span>/&gt;</span><span class="comment">&lt;!--文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Append&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!--是否选择追加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxFileSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1kb&quot;</span>/&gt;</span><span class="comment">&lt;!--文件最大字节数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxBackupIndex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span><span class="comment">&lt;!--新文件数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myFile2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.DailyRollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">value</span>=<span class="string">&quot;d:/log/hello2.log&quot;</span>/&gt;</span><span class="comment">&lt;!--文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Append&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!--是否选择追加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根logger的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--优先级设置，all &lt; trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal &lt; off --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">&quot;all&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myConsole&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myFile2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="三、解决方案2"><a href="#三、解决方案2" class="headerlink" title="三、解决方案2"></a>三、解决方案2</h3><hr>
<h4 id="3-1-Logback-SLF4j"><a href="#3-1-Logback-SLF4j" class="headerlink" title="3.1 Logback+SLF4j"></a>3.1 Logback+SLF4j</h4><h5 id="3-1-1-导入依赖"><a href="#3-1-1-导入依赖" class="headerlink" title="3.1.1 导入依赖"></a>3.1.1 导入依赖</h5><blockquote>
<p>项目中导入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Logback依赖，还会传递 slf4j 和 logback-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-1-2-基本使用"><a href="#3-1-2-基本使用" class="headerlink" title="3.1.2 基本使用"></a>3.1.2 基本使用</h5><blockquote>
<p>Logback+SLF4J 基本API</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.runtime.Log;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloLog</span> &#123;</span><br><span class="line">    <span class="comment">// 需要输出日志的类，可以创建一个log属性</span></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloLog.class);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(log.getClass());</span><br><span class="line">        log.trace(<span class="string">&quot;hello trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;hello debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hello info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;hello warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;hello error&quot;</span>);</span><br><span class="line">        <span class="comment">// 注意，logback中没有fatal日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-1-3-配置信息"><a href="#3-1-3-配置信息" class="headerlink" title="3.1.3 配置信息"></a>3.1.3 配置信息</h5><blockquote>
<p>定义<a href="">logback.xml</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%d{yyyy-MM-dd  HH:mm:ss.SSS}</td>
<td>日期</td>
</tr>
<tr>
<td>%5p</td>
<td>日志级别，5位字符长度显示，如果内容占不满5位则内容右对齐并在左侧补空格</td>
</tr>
<tr>
<td>%-5p</td>
<td>5位字符长度显示日志级别，如果内容占不满5位则内容左对齐并在右侧补空格                                 -代表左对齐</td>
</tr>
<tr>
<td>%logger</td>
<td>日志所在包和类</td>
</tr>
<tr>
<td>%M</td>
<td>日志所在方法名</td>
</tr>
<tr>
<td>%L</td>
<td>日志所在代码行</td>
</tr>
<tr>
<td>%m</td>
<td>日志正文</td>
</tr>
<tr>
<td>%n</td>
<td>换行</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。</span></span><br><span class="line"><span class="comment">	 默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义变量，可通过 $&#123;log.path&#125;和$&#123;CONSOLE_LOG_PATTERN&#125; 得到变量值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D:/log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; |-[%-5p] in %logger.%M[line-%L] -%m%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Threshold=即最低日志级别，此appender输出大于等于对应级别的日志</span></span><br><span class="line"><span class="comment">             (当然还要满足root中定义的最低级别)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志格式(引用变量) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 追加到文件中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/hello2.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动追加到文件中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/hello.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录</span></span><br><span class="line"><span class="comment">             文件超过最大尺寸后，会新建文件，然后新的日志文件中继续写入</span></span><br><span class="line"><span class="comment">             如果日期变更，也会新建文件，然后在新的日志文件中写入当天日志</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 新建文件后，原日志改名为如下  %i=文件序号，从0开始 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/hello-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每个日志文件的最大体量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>8kb<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件保留天数，1=则只保留昨天的归档日志文件 ,不设置则保留所有日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>1<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/2019/04/24/AJAX/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>

    <div id="aplayer-uuoluLGJ" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>
</blockquote>
<p>[toc]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-什么是JSON"><a href="#1-1-什么是JSON" class="headerlink" title="1.1 什么是JSON"></a>1.1 什么是JSON</h4><blockquote>
<p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (W3C制定的JS规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p>
</blockquote>
<h4 id="1-2-JSON语法"><a href="#1-2-JSON语法" class="headerlink" title="1.2 JSON语法"></a>1.2 JSON语法</h4><blockquote>
<ul>
<li><p>[]  表示数组</p>
</li>
<li><p>{}  表示对象</p>
</li>
<li><p>“”  表示是属性名或字符串类型的值</p>
</li>
<li><p>:   表示属性和值之间的间隔符</p>
</li>
<li><p>,   表示多个属性的间隔符或者是多个元素的间隔符</p>
</li>
</ul>
</blockquote>
<h3 id="二、JSON解析【重点】"><a href="#二、JSON解析【重点】" class="headerlink" title="二、JSON解析【重点】"></a>二、JSON解析【<code>重点</code>】</h3><hr>
<blockquote>
<p>要解析的字符串：将字符串解析为Java对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象嵌套数组嵌套对象</span></span><br><span class="line"><span class="title class_">String</span> json1=<span class="string">&quot;&#123;&#x27;id&#x27;:1,&#x27;name&#x27;:&#x27;JAVAEE-1703&#x27;,&#x27;stus&#x27;:[&#123;&#x27;id&#x27;:101,&#x27;name&#x27;:&#x27;刘一&#x27;,&#x27;age&#x27;:16&#125;]&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="title class_">String</span> json2=<span class="string">&quot;[&#x27;北京&#x27;,&#x27;天津&#x27;,&#x27;杭州&#x27;]&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>初始的类：<ul>
<li>Student.java</li>
<li>Grade.java</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; stus;</span><br><span class="line">    <span class="comment">//此处省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-FastJSON解析"><a href="#2-1-FastJSON解析" class="headerlink" title="2.1 FastJSON解析"></a>2.1 FastJSON解析</h4><blockquote>
<ul>
<li>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象</li>
<li>提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换：<ul>
<li>调用toJSONString方 法即可将对象转换成 JSON 字符串</li>
<li>parseObject 方法则反过来将 JSON 字符串转换成对象。</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>parseObject方法：字符串转换成对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FASTJson</span> &#123;</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json1</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#x27;id&#x27;:1,&#x27;name&#x27;:&#x27;JAVAEE-1703&#x27;,&#x27;stus&#x27;:[&#123;&#x27;id&#x27;:101,&#x27;name&#x27;:&#x27;刘铭&#x27;,&#x27;age&#x27;:16&#125;]&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;[&#x27;北京&#x27;,&#x27;天津&#x27;,&#x27;杭州&#x27;]&quot;</span>;</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        Grade grade=JSON.parseObject(json1, Grade.class);</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        List&lt;String&gt; list=JSON.parseArray(json2, String.class);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>toJSONString方法：对象转换成 JSON 字符串</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FASTJson</span> &#123;</span><br><span class="line"><span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">101</span>+i, <span class="string">&quot;码子&quot;</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> <span class="title class_">Grade</span>(<span class="number">100001</span>,<span class="string">&quot;张三&quot;</span>, list);</span><br><span class="line">        String json=JSON.toJSONString(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Jackson解析"><a href="#2-2-Jackson解析" class="headerlink" title="2.2 Jackson解析"></a>2.2 Jackson解析</h4><blockquote>
<ul>
<li>Jackson 是一个能够将Java对象序列化为JSON字符串，也能够将JSON字符串反序列化为Java对象的框架；</li>
<li>通过方法readValue和writeValue实现；</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JackSonTest</span> &#123;</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;JAVAEE-1703\&quot;,\&quot;stus\&quot;:[&#123;\&quot;id\&quot;:101,\&quot;name\&quot;:\&quot;刘一\&quot;,\&quot;age\&quot;:16&#125;]&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;北京\&quot;,\&quot;天津\&quot;,\&quot;杭州\&quot;]&quot;</span>;</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        Grade grade=mapper.readValue(json1, Grade.class);</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        ArrayList&lt;String&gt; list=mapper.readValue(json2, </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">101</span>+i, <span class="string">&quot;码子&quot;</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> <span class="title class_">Grade</span>(<span class="number">100001</span>,<span class="string">&quot;张三&quot;</span>, list);</span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式字符串</span></span><br><span class="line">        String json=mapper.writeValueAsString(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-浏览器处理JSON字符串"><a href="#2-3-浏览器处理JSON字符串" class="headerlink" title="2.3 浏览器处理JSON字符串"></a>2.3 浏览器处理JSON字符串</h4><blockquote>
<ul>
<li>JSON.stringify()</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json=&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">34</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> str=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json);</span><br><span class="line"><span class="title function_">alert</span>(str);</span><br></pre></td></tr></table></figure>

<h4 id="2-4-流览器转换为json对象"><a href="#2-4-流览器转换为json对象" class="headerlink" title="2.4 流览器转换为json对象"></a>2.4 流览器转换为json对象</h4><blockquote>
<p>JSON.parse()</p>
</blockquote>
<h3 id="三、Ajax使用【重点】"><a href="#三、Ajax使用【重点】" class="headerlink" title="三、Ajax使用【重点】"></a>三、Ajax使用【<code>重点</code>】</h3><hr>
<h4 id="3-1-什么是AJAX"><a href="#3-1-什么是AJAX" class="headerlink" title="3.1 什么是AJAX?"></a>3.1 什么是AJAX?</h4><blockquote>
<ul>
<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>
<li>AJAX &#x3D; Asynchronous异步 JavaScript and XML。</li>
<li>AJAX 是一种用于创建快速动态网页的技术。</li>
<li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li>
<li>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页。</li>
</ul>
</blockquote>
<h4 id="3-2-AJAX工作原理"><a href="#3-2-AJAX工作原理" class="headerlink" title="3.2 AJAX工作原理"></a>3.2 AJAX工作原理</h4><table>
<thead>
<tr>
<th align="center">AJAX工作原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/img1.png" alt="img1"></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>AJAX是基于现有的Internet标准，并且联合使用它们：</p>
</li>
<li><p>XMLHttpRequest 对象 (异步的与服务器交换数据)</p>
</li>
<li><p>JavaScript&#x2F;DOM (信息显示&#x2F;交互)</p>
</li>
<li><p>CSS (给数据定义样式)</p>
</li>
<li><p>XML (作为转换数据的格式)</p>
</li>
</ul>
</blockquote>
<h4 id="3-3-AJAX实例"><a href="#3-3-AJAX实例" class="headerlink" title="3.3 AJAX实例"></a>3.3 AJAX实例</h4><blockquote>
<ul>
<li><p>html代码，上面的 AJAX 应用程序包含一个 div 和一个按钮。</p>
</li>
<li><p>div 部分用于显示来自服务器的信息。当按钮被点击时，它负责调用名为 loadXMLDoc() 的函数：</p>
</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadXMLDoc()&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>接下来，在页面的 head 部分添加一个 &lt; script&gt; 标签。该标签中包含了这个 loadXMLDoc() 函数：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    .... <span class="variable constant_">AJAX</span> 脚本执行 ...</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-创建XMLHttpRequest对象"><a href="#3-4-创建XMLHttpRequest对象" class="headerlink" title="3.4 创建XMLHttpRequest对象"></a>3.4 创建XMLHttpRequest对象</h4><blockquote>
<ul>
<li><p>XMLHttpRequest对象是AJAX的基础。</p>
</li>
<li><p>所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。</p>
</li>
<li><p>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
</li>
<li><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。创建 XMLHttpRequest 对象的语法：</p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-XMLHttpRequest请求"><a href="#3-5-XMLHttpRequest请求" class="headerlink" title="3.5 XMLHttpRequest请求"></a>3.5 XMLHttpRequest请求</h4><blockquote>
<p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>open(<em>method</em>,<em>url</em>,<em>async</em>)</td>
<td>规定请求的类型、URL 以及是否异步处理请求。<em>method</em>：请求的类型；GET 或 POST；<em>url</em>：文件在服务器上的位置；<em>async</em>：true（异步）或 false（同步），并且XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true；</td>
</tr>
<tr>
<td>send(<em>string</em>)</td>
<td>将请求发送到服务器。<em>string</em>：仅用于 POST 请求</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>GET 还是 POST？</p>
</li>
<li><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>
</li>
<li><p>然而，在以下情况中，请使用 POST 请求：</p>
<ul>
<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
<li>向服务器发送大量数据（POST 没有数据量限制）</li>
<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>GET 请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例一：一个简单的 GET 请求：</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">//示例二：在上面的例子中，您可能得到的是缓存的结果，为了避免这种情况，请向 URL 添加一个唯一的 ID：</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get.php?t=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">//示例三：如果您希望通过 GET 方法发送信息，请向 URL 添加信息：</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>POST 请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例一：一个简单 POST 请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/try/ajax/demo_post.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">//如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/try/ajax/demo_post2.php&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>setRequestHeader(<em>header,value</em>)</td>
<td>向请求添加 HTTP 头。<em>header</em>: 规定头的名称    <em>value</em>: 规定头的值</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p>
</li>
<li><p>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>
<ul>
<li>在等待服务器响应时执行其他脚本</li>
<li>当响应就绪后对响应进行处理</li>
</ul>
</li>
<li><p>当使用Async&#x3D;true时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：</p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定执行函数：</span></span><br><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>如需使用 async&#x3D;false，请将 open() 方法中的第三个参数改为 false：</p>
</li>
<li><p>我们不推荐使用 async&#x3D;false，但是对于一些小型的请求，也是可以的。</p>
</li>
<li><p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p>
</li>
<li><p><strong>注意：</strong>当您使用 async&#x3D;false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</p>
</li>
</ul>
</blockquote>
<h4 id="3-6-readyState"><a href="#3-6-readyState" class="headerlink" title="3.6 readyState"></a>3.6 readyState</h4><blockquote>
<ul>
<li><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p>
</li>
<li><p>在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</p>
</li>
<li><p>readyState 属性存有 XMLHttpRequest 的状态信息。</p>
</li>
<li><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p>
</li>
<li><p>下面是 XMLHttpRequest 对象的三个重要的属性：</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onreadystatechange</td>
<td>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td>status</td>
<td>例：200: “OK” ；404: 未找到页面</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>响应码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>客户必须继续发出请求</td>
</tr>
<tr>
<td>101</td>
<td>客户要求服务器根据请求转换HTTP协议版本</td>
</tr>
<tr>
<td>200</td>
<td>交易成功</td>
</tr>
<tr>
<td>201</td>
<td>提示知道新文件的URL</td>
</tr>
<tr>
<td>202</td>
<td>接受和处理、但处理未完成</td>
</tr>
<tr>
<td>203</td>
<td>返回信息不确定或不完整</td>
</tr>
<tr>
<td>204</td>
<td>请求收到，但返回信息为空</td>
</tr>
<tr>
<td>205</td>
<td>服务器完成了请求，用户代理必须复位当前已经浏览过的文件</td>
</tr>
<tr>
<td>206</td>
<td>服务器已经完成了部分用户的GET请求</td>
</tr>
<tr>
<td>300</td>
<td>请求的资源可在多处得到</td>
</tr>
<tr>
<td>301</td>
<td>删除请求数据</td>
</tr>
<tr>
<td>302</td>
<td>在其他地址发现了请求数据</td>
</tr>
<tr>
<td>303</td>
<td>建议客户访问其他URL或访问方式</td>
</tr>
<tr>
<td>304</td>
<td>客户端已经执行了GET，但文件未变化</td>
</tr>
<tr>
<td>305</td>
<td>请求的资源必须从服务器指定的地址得到</td>
</tr>
<tr>
<td>306</td>
<td>前一版本HTTP中使用的代码，现行版本中不再使用</td>
</tr>
<tr>
<td>307</td>
<td>申明请求的资源临时性删除</td>
</tr>
<tr>
<td>400</td>
<td>错误请求，如语法错误</td>
</tr>
<tr>
<td>401</td>
<td>请求授权失败</td>
</tr>
<tr>
<td>402</td>
<td>保留有效ChargeTo头响应</td>
</tr>
<tr>
<td>403</td>
<td>请求不允许</td>
</tr>
<tr>
<td>404</td>
<td>没有发现文件、查询或URl</td>
</tr>
<tr>
<td>405</td>
<td>用户在Request-Line字段定义的方法不允许</td>
</tr>
<tr>
<td>406</td>
<td>根据用户发送的Accept拖，请求资源不可访问</td>
</tr>
<tr>
<td>407</td>
<td>类似401，用户必须首先在代理服务器上得到授权</td>
</tr>
<tr>
<td>408</td>
<td>客户端没有在用户指定的饿时间内完成请求</td>
</tr>
<tr>
<td>409</td>
<td>对当前资源状态，请求不能完成</td>
</tr>
<tr>
<td>410</td>
<td>服务器上不再有此资源且无进一步的参考地址</td>
</tr>
<tr>
<td>411</td>
<td>服务器拒绝用户定义的Content-Length属性请求</td>
</tr>
<tr>
<td>412</td>
<td>一个或多个请求头字段在当前请求中错误</td>
</tr>
<tr>
<td>413</td>
<td>请求的资源大于服务器允许的大小</td>
</tr>
<tr>
<td>414</td>
<td>请求的资源URL长于服务器允许的长度</td>
</tr>
<tr>
<td>415</td>
<td>请求资源不支持请求项目格式</td>
</tr>
<tr>
<td>416</td>
<td>请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</td>
</tr>
<tr>
<td>417</td>
<td>服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</td>
</tr>
<tr>
<td>500</td>
<td>服务器产生内部错误</td>
</tr>
<tr>
<td>501</td>
<td>服务器不支持请求的函数</td>
</tr>
<tr>
<td>502</td>
<td>服务器暂时不可用，有时是为了防止发生系统过载</td>
</tr>
<tr>
<td>503</td>
<td>服务器过载或暂停维修</td>
</tr>
<tr>
<td>504</td>
<td>关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</td>
</tr>
<tr>
<td>505</td>
<td>服务器不支持或拒绝支请求头中指定的HTTP版本</td>
</tr>
</tbody></table>
<h4 id="3-7-XMLHttpRequest响应"><a href="#3-7-XMLHttpRequest响应" class="headerlink" title="3.7 XMLHttpRequest响应"></a>3.7 XMLHttpRequest响应</h4><blockquote>
<p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>responseText</td>
<td>获得字符串形式的响应数据。</td>
</tr>
<tr>
<td>responseXML</td>
<td>获得 XML 形式的响应数据。</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>responseText 属性<ul>
<li>如果来自服务器的响应并非 XML，请使用 responseText 属性。</li>
<li>responseText 属性返回字符串形式的响应，因此您可以这样使用：</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>responseXML 属性<ul>
<li>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlDoc=xmlhttp.<span class="property">responseXML</span>;</span><br><span class="line">txt=<span class="string">&quot;&quot;</span>;</span><br><span class="line">x=xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;ARTIST&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.<span class="property">length</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span> + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=txt;</span><br></pre></td></tr></table></figure>

<h4 id="3-8-使用回调函数"><a href="#3-8-使用回调函数" class="headerlink" title="3.8 使用回调函数"></a>3.8 使用回调函数</h4><blockquote>
<ul>
<li>回调函数是一种以参数形式传递给另一个函数的函数。</li>
<li>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个<em>标准</em>的函数，并为每个 AJAX 任务调用该函数。</li>
<li>该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">loadXMLDoc</span>(<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、AJAX的使用"><a href="#四、AJAX的使用" class="headerlink" title="四、AJAX的使用"></a>四、AJAX的使用</h3><hr>
<h4 id="4-1-AJAX与服务器交互"><a href="#4-1-AJAX与服务器交互" class="headerlink" title="4.1 AJAX与服务器交互"></a>4.1 AJAX与服务器交互</h4><blockquote>
<ul>
<li><p>模拟登陆验证</p>
</li>
<li><p>验证用户是否可以注册，利用AJAX技术!进行动态验证</p>
<ul>
<li>编写注册页面</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP &#x27;index.jsp&#x27; starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;This is my page&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">   			 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span>&gt;</span>qq注册页面<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">   			 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;kp(this)&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;sp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span>	 </span><br><span class="line">   			 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">   			 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>/&gt;</span></span><br><span class="line">   		<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   			</span></span><br><span class="line"><span class="language-javascript">   			<span class="comment">//当用户名输入框输入内容就调用此方法</span></span></span><br><span class="line"><span class="language-javascript">   			<span class="keyword">function</span> <span class="title function_">kp</span>(<span class="params">ipt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   			 </span></span><br><span class="line"><span class="language-javascript">   			 <span class="comment">//1.获取input输入框的value</span></span></span><br><span class="line"><span class="language-javascript">   			   <span class="keyword">var</span> value = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">   			 <span class="comment">//2.进行验证</span></span></span><br><span class="line"><span class="language-javascript">   			   <span class="keyword">if</span>(value != <span class="literal">null</span> &amp;&amp; value !=<span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   			       	<span class="comment">//1-5</span></span></span><br><span class="line"><span class="language-javascript">   			       	<span class="comment">//1.创建Ajax</span></span></span><br><span class="line"><span class="language-javascript">   			       	<span class="keyword">var</span> xmlhttp = <span class="title function_">getAjax</span>();</span></span><br><span class="line"><span class="language-javascript">   			       	</span></span><br><span class="line"><span class="language-javascript">   			       	<span class="comment">//2.设置状态改变监听</span></span></span><br><span class="line"><span class="language-javascript">   			       	xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   			       		</span></span><br><span class="line"><span class="language-javascript">   			       		<span class="comment">//5获取响应数据</span></span></span><br><span class="line"><span class="language-javascript">   			       		<span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> ==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">   			       		&#123;</span></span><br><span class="line"><span class="language-javascript">   			       			</span></span><br><span class="line"><span class="language-javascript">   			       			<span class="keyword">var</span> result = xmlhttp.<span class="property">responseText</span>; <span class="comment">//获取结果</span></span></span><br><span class="line"><span class="language-javascript">   			       			</span></span><br><span class="line"><span class="language-javascript">   			       			<span class="comment">//  1 行    2 不行</span></span></span><br><span class="line"><span class="language-javascript">   			       			</span></span><br><span class="line"><span class="language-javascript">   			       			<span class="comment">//1.找到span标签</span></span></span><br><span class="line"><span class="language-javascript">   			       			</span></span><br><span class="line"><span class="language-javascript">   			       			<span class="keyword">var</span> sp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   			       			</span></span><br><span class="line"><span class="language-javascript">   			       			<span class="keyword">if</span>(result == <span class="string">&quot;1&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   			       				<span class="comment">//成功的 span 提示一句绿色的话		</span></span></span><br><span class="line"><span class="language-javascript">   			       				sp.<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span>; <span class="comment">//清空</span></span></span><br><span class="line"><span class="language-javascript">   			       			 	<span class="keyword">var</span> ft = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;font&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   			       				<span class="keyword">var</span> fttext = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;恭喜您!可以注册!!&quot;</span>); <span class="comment">//文本标签</span></span></span><br><span class="line"><span class="language-javascript">   			       				ft.<span class="title function_">setAttribute</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   			       				ft.<span class="title function_">appendChild</span>(fttext);</span></span><br><span class="line"><span class="language-javascript">   			       				sp.<span class="title function_">appendChild</span>(ft);  </span></span><br><span class="line"><span class="language-javascript">   			       			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">   			       				<span class="comment">//失败的 span 提示一句红色的话</span></span></span><br><span class="line"><span class="language-javascript">   			       				sp.<span class="property">innerText</span>=<span class="string">&quot;用户已经被注册!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   			       				sp.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   			       			&#125;</span></span><br><span class="line"><span class="language-javascript">   			       		&#125;</span></span><br><span class="line"><span class="language-javascript">   			       	</span></span><br><span class="line"><span class="language-javascript">   			       	&#125;</span></span><br><span class="line"><span class="language-javascript">   			       	<span class="comment">//3.设置ajax method  url</span></span></span><br><span class="line"><span class="language-javascript">   			       	xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">   			       	 <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/servlet/DealServlet&quot;</span>);			         					<span class="comment">//4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">   			        <span class="comment">//设置一个请求头</span></span></span><br><span class="line"><span class="language-javascript">   			        xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   			        xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;value=&quot;</span>+value);</span></span><br><span class="line"><span class="language-javascript">   			   </span></span><br><span class="line"><span class="language-javascript">   			   &#125;	</span></span><br><span class="line"><span class="language-javascript">   			&#125;</span></span><br><span class="line"><span class="language-javascript">   		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-编写AJAX处理servlet"><a href="#4-2-编写AJAX处理servlet" class="headerlink" title="4.2 编写AJAX处理servlet"></a>4.2 编写AJAX处理servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DealServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//0.设置编码格式</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">	    response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">		<span class="comment">//1.</span></span><br><span class="line">	    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">		<span class="comment">//2.</span></span><br><span class="line">	    <span class="type">String</span>  <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	    <span class="keyword">if</span> (value.equals(<span class="string">&quot;root&quot;</span>) | value.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">		   result = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">		   <span class="comment">//代表已经存在</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//可以注册</span></span><br><span class="line">			result = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.</span></span><br><span class="line">		response.getWriter().write(result);   </span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet</title>
    <url>/2019/04/24/Servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-ZQicXJQW" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>



<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-C-x2F-S架构和B-x2F-S架构"><a href="#1-1-C-x2F-S架构和B-x2F-S架构" class="headerlink" title="1.1 C&#x2F;S架构和B&#x2F;S架构"></a>1.1 C&#x2F;S架构和B&#x2F;S架构</h4><blockquote>
<p>C&#x2F;S和B&#x2F;S是软件发展过程中出现的两种软件架构方式。</p>
</blockquote>
<h4 id="1-2-C-x2F-S架构（Client-x2F-Server-客户端-x2F-服务器）"><a href="#1-2-C-x2F-S架构（Client-x2F-Server-客户端-x2F-服务器）" class="headerlink" title="1.2 C&#x2F;S架构（Client&#x2F;Server 客户端&#x2F;服务器）"></a>1.2 C&#x2F;S架构（Client&#x2F;Server 客户端&#x2F;服务器）</h4><blockquote>
<ul>
<li><p>特点：必须在客户端安装特定软件</p>
</li>
<li><p>优点：图形效果显示较好(如：3D游戏)</p>
</li>
<li><p>缺点：服务器的软件和功能进行升级，客户端也必须升级、不利于维护</p>
</li>
<li><p>常见的C&#x2F;S程序：QQ、微信等</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">C&#x2F;S架构</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/111C_S.png" alt="C_S"></td>
</tr>
</tbody></table>
<h4 id="1-3-B-x2F-S架构（Browser-x2F-Server-浏览器-x2F-服务器）"><a href="#1-3-B-x2F-S架构（Browser-x2F-Server-浏览器-x2F-服务器）" class="headerlink" title="1.3 B&#x2F;S架构（Browser&#x2F;Server 浏览器&#x2F;服务器）"></a>1.3 B&#x2F;S架构（Browser&#x2F;Server 浏览器&#x2F;服务器）</h4><blockquote>
<ul>
<li>特点：无需安装客户端，任何浏览器都可直接访问</li>
<li>优点：涉及到功能的升级，只需要升级服务器端</li>
<li>缺点：图形显示效果不如C&#x2F;S架构</li>
<li>需要通过HTTP协议访问</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">B&#x2F;S架构</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/111B_S.png" alt="B_S"></td>
</tr>
</tbody></table>
<h3 id="二-、服务器"><a href="#二-、服务器" class="headerlink" title="二 、服务器"></a>二 、服务器</h3><hr>
<h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><h5 id="2-1-1-什么是Web"><a href="#2-1-1-什么是Web" class="headerlink" title="2.1.1 什么是Web"></a>2.1.1 什么是Web</h5><blockquote>
<p>Web(World Wide Web) 称为万维网，简单理解就是网站，它用来表示Internet主机上供外界访问的资源。</p>
<p>Internet上供外界访问的资源分为两大类</p>
<ul>
<li><p>静态资源：指Web页面中供人们浏览的数据始终是不变的。(HTML、CSS)</p>
</li>
<li><p>动态资源：指Web页面中供人们浏览的数据是由程序产生的，不同时间点，甚至不同设备访问Web页面看到的内容各不相同。（JSP&#x2F;Servlet）</p>
</li>
</ul>
<ul>
<li>在Java中，动态Web资源开发技术我们统称为Java Web。</li>
</ul>
</blockquote>
<h5 id="2-1-2-什么是Web服务器"><a href="#2-1-2-什么是Web服务器" class="headerlink" title="2.1.2 什么是Web服务器"></a>2.1.2 什么是Web服务器</h5><blockquote>
<p>Web服务器是运行及发布Web应用的容器，只有将开发的Web项目放置到该容器中，才能使网络中的所有用户通过浏览器进行访问。</p>
</blockquote>
<h4 id="2-2-常见服务器"><a href="#2-2-常见服务器" class="headerlink" title="2.2 常见服务器"></a>2.2 常见服务器</h4><blockquote>
<ul>
<li>开源：OpenSource（1、开放源代码 2、免费）<ul>
<li>Tomcat(主流Web服务器之一，适合初学者)</li>
<li>jetty（淘宝，运行效率比Tomcat高）</li>
<li>resin（新浪，所有开源服务器软件中，运行效率最高的）</li>
<li>三者的用法从代码角度完全相同，只有在开启、关闭服务器软件时对应的命令稍有区别。掌握一个即掌握所有</li>
</ul>
</li>
<li>收费<ul>
<li>WebLogic（Oracle）</li>
<li>WebSphere（IBM）</li>
<li>提供相应的服务与支持，软件大，耗资源</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="2-3-Tomcat服务器"><a href="#2-3-Tomcat服务器" class="headerlink" title="2.3 Tomcat服务器"></a>2.3 Tomcat服务器</h4><blockquote>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，免费开源、并支持Servlet 和JSP 规范。目前Tomcat最新版本为9.0。</p>
<p>Tomcat 技术先进、性能稳定，深受Java 爱好者喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
</blockquote>
<h4 id="2-4-Tomcat安装"><a href="#2-4-Tomcat安装" class="headerlink" title="2.4 Tomcat安装"></a>2.4 Tomcat安装</h4><h5 id="2-4-1-下载"><a href="#2-4-1-下载" class="headerlink" title="2.4.1 下载"></a>2.4.1 下载</h5><blockquote>
<p>官网下载(<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a>) Tomcat8.5解压缩版本</p>
</blockquote>
<h5 id="2-4-2-解压安装"><a href="#2-4-2-解压安装" class="headerlink" title="2.4.2 解压安装"></a>2.4.2 解压安装</h5><blockquote>
<p>将Tomcat解压到一个没有特殊符号的目录中（一般纯英文即可）</p>
<p>注意</p>
<ul>
<li>不建议将服务器软件放在磁盘层次很多的文件夹</li>
<li>不建议放在中文路径下</li>
</ul>
</blockquote>
<h5 id="2-4-3-Tomcat目录结构"><a href="#2-4-3-Tomcat目录结构" class="headerlink" title="2.4.3 Tomcat目录结构"></a>2.4.3 Tomcat目录结构</h5><table>
<thead>
<tr>
<th>文件夹</th>
<th align="left">说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td align="left">该目录下存放的是二进制可执行文件</td>
<td>startup.bat启动Tomcat、shutdown.bat停止Tomcat</td>
</tr>
<tr>
<td>conf</td>
<td align="left">这是一个非常重要的目录，这个目录下有两个最为重要的文件server.xml和web.xml</td>
<td>server.xml：配置整个服务器信息。例如修改端口号，编码格式等。<br/>web.xml：项目部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。</td>
</tr>
<tr>
<td>lib</td>
<td align="left">Tomcat的类库，里面存放Tomcat运行所需要的jar文件。</td>
<td></td>
</tr>
<tr>
<td>logs</td>
<td align="left">存放日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，异常也会记录在日志文件中。</td>
<td></td>
</tr>
<tr>
<td>temp</td>
<td align="left">Tomcat的临时文件，这个目录下的东西在停止Tomcat后删除。</td>
<td></td>
</tr>
<tr>
<td>webapps</td>
<td align="left">存放web项目的目录，其中每个文件夹都是一个项目；其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目。</td>
<td></td>
</tr>
<tr>
<td>work</td>
<td align="left">运行时生成的文件，最终运行的文件都在这里。</td>
<td>当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</td>
</tr>
</tbody></table>
<h4 id="2-5-Tomcat启动和停止"><a href="#2-5-Tomcat启动和停止" class="headerlink" title="2.5 Tomcat启动和停止"></a>2.5 Tomcat启动和停止</h4><h5 id="2-5-1-启动"><a href="#2-5-1-启动" class="headerlink" title="2.5.1 启动"></a>2.5.1 启动</h5><blockquote>
<p>进入tomcat安装目录bin下，双击startup.bat 启动程序，出现如下界面</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Tomcat启动控制台</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/005.png"></td>
</tr>
</tbody></table>
<h5 id="2-5-2-验证"><a href="#2-5-2-验证" class="headerlink" title="2.5.2 验证"></a>2.5.2 验证</h5><blockquote>
<p>打开浏览器，输入 <a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>如果出现以下界面证明Tomcat启动成功。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Tomcat访问页面</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/tomcat111.png"></td>
</tr>
</tbody></table>
<h5 id="2-5-3-停止"><a href="#2-5-3-停止" class="headerlink" title="2.5.3 停止"></a>2.5.3 停止</h5><blockquote>
<p>双击shutdown.bat即可关闭Tomcat启动窗口。</p>
</blockquote>
<h5 id="2-5-4-修改端口号"><a href="#2-5-4-修改端口号" class="headerlink" title="2.5.4 修改端口号"></a>2.5.4 修改端口号</h5><blockquote>
<p>Tomcat默认端口号为8080，可以通过conf&#x2F;server.xml文件修改</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：修改端口号需要重新启动Tomcat才能生效</a></li>
</ul>
<h4 id="2-6-项目部署及访问静态资源"><a href="#2-6-项目部署及访问静态资源" class="headerlink" title="2.6 项目部署及访问静态资源"></a>2.6 项目部署及访问静态资源</h4><blockquote>
<p>Tomcat是Web服务器，我们的项目应用是部署在webapps下，然后通过特定的<a href="">URL</a>访问。</p>
</blockquote>
<h5 id="2-6-1-创建项目"><a href="#2-6-1-创建项目" class="headerlink" title="2.6.1 创建项目"></a>2.6.1 创建项目</h5><blockquote>
<ul>
<li>在webapps中建立文件夹（项目应用），比如：myweb</li>
<li>创建WEB-INF文件夹，用于存放项目的核心内容<br>-  创建classes，用于存放.class文件<br>-  创建lib，用于存放jar文件<br>-  创建web.xml，项目配置文件（到ROOT项目下的WEB-INF复制即可）</li>
<li>把网页hello.html复制到myweb文件夹中，与WEB-INF在同级目录</li>
</ul>
</blockquote>
<h5 id="2-6-2-URL访问资源"><a href="#2-6-2-URL访问资源" class="headerlink" title="2.6.2 URL访问资源"></a>2.6.2 URL访问资源</h5><blockquote>
<p>浏览器地址中输入URL：<a href="http://localhost:8080/myweb/hello.html">http://localhost:8080/myweb/hello.html</a></p>
</blockquote>
<ul>
<li><a href="">经验：URL主要有4部分组成：协议、主机、端口、资源路径</a></li>
</ul>
<table>
<thead>
<tr>
<th align="center">URL组成</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/111url.png" alt="url"></td>
</tr>
</tbody></table>
<h5 id="2-6-3-Tomcat响应流程图"><a href="#2-6-3-Tomcat响应流程图" class="headerlink" title="2.6.3 Tomcat响应流程图"></a>2.6.3 Tomcat响应流程图</h5><table>
<thead>
<tr>
<th align="center">请求响应流程图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B111.png" alt="image-20200422205742782"></td>
</tr>
</tbody></table>
<h4 id="2-7-常见错误"><a href="#2-7-常见错误" class="headerlink" title="2.7 常见错误"></a>2.7 常见错误</h4><h5 id="2-7-1-Tomcat控制台闪退"><a href="#2-7-1-Tomcat控制台闪退" class="headerlink" title="2.7.1 Tomcat控制台闪退"></a>2.7.1 Tomcat控制台闪退</h5><blockquote>
<p>闪退问题是由于JAVA_HOME配置导致的，检查JAVA_HOME配置是否正确</p>
</blockquote>
<h5 id="2-7-2-404"><a href="#2-7-2-404" class="headerlink" title="2.7.2 404"></a>2.7.2 404</h5><blockquote>
<p>访问资源不存在，出现404错误</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">404错误</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/007123123.png" alt="007"></td>
</tr>
</tbody></table>
<h3 id="三-、Servlet【重点】"><a href="#三-、Servlet【重点】" class="headerlink" title="三 、Servlet【重点】"></a>三 、Servlet【<code>重点</code>】</h3><hr>
<h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h4><blockquote>
<ul>
<li>Servlet：Server Applet的简称，是服务器端的程序（代码、功能实现），可交互式的处理客户端发送到服务端的请求，并完成操作响应。</li>
<li>动态网页技术</li>
<li>JavaWeb程序开发的基础，JavaEE规范（一套接口）的一个组成部分。</li>
</ul>
</blockquote>
<h5 id="3-1-1-Servlet作用"><a href="#3-1-1-Servlet作用" class="headerlink" title="3.1.1 Servlet作用"></a>3.1.1 Servlet作用</h5><blockquote>
<ul>
<li>接收客户端请求，完成操作。 </li>
<li>动态生成网页（页面数据可变）。</li>
<li>将包含操作结果的动态网页响应给客户端。</li>
</ul>
</blockquote>
<h4 id="3-2-Servlet开发步骤"><a href="#3-2-Servlet开发步骤" class="headerlink" title="3.2 Servlet开发步骤"></a>3.2 Servlet开发步骤</h4><h5 id="3-2-1-搭建开发环境"><a href="#3-2-1-搭建开发环境" class="headerlink" title="3.2.1 搭建开发环境"></a>3.2.1 搭建开发环境</h5><blockquote>
<p>将Servlet相关jar包<a href="">(lib\servlet-api.jar)</a> 配置到classpath中</p>
</blockquote>
<h5 id="3-2-2-编写Servlet"><a href="#3-2-2-编写Servlet" class="headerlink" title="3.2.2 编写Servlet"></a>3.2.2 编写Servlet</h5><blockquote>
<ul>
<li>实现javax.servlet.Servlet</li>
<li>重写5个主要方法</li>
<li>在核心的service()方法中编写输出语句，打印访问结果</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException&#123;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;My First Servlet!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;	</span><br><span class="line">	&#125;	</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-2-3-部署Servlet"><a href="#3-2-3-部署Servlet" class="headerlink" title="3.2.3 部署Servlet"></a>3.2.3 部署Servlet</h5><blockquote>
<p>编译MyServlet后，将生成的.class文件放在WEB-INF&#x2F;classes文件中。</p>
</blockquote>
<h5 id="3-2-4-配置Servlet"><a href="#3-2-4-配置Servlet" class="headerlink" title="3.2.4 配置Servlet"></a>3.2.4 配置Servlet</h5><blockquote>
<p>编写WEB-INF下项目配置文件web.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">  <span class="comment">&lt;!--1、添加servlet节点--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.qf.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--2、添加servlet-mapping节点  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：url-pattern配置的内容就是浏览器地址栏输入的URL中项目名称后资源的内容</a></li>
</ul>
<h4 id="3-3-运行测试"><a href="#3-3-运行测试" class="headerlink" title="3.3 运行测试"></a>3.3 运行测试</h4><blockquote>
<p>启动Tomcat，在浏览器地址栏中输入<a href="http://localhost:8080/myweb/myservlet%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%9C%A8Tomcat%E4%B8%AD%E6%89%93%E5%8D%B0%E6%97%B6%E9%97%B4%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:8080/myweb/myservlet访问，在Tomcat中打印时间表示成功。</a></p>
</blockquote>
<h4 id="3-4-常见错误"><a href="#3-4-常见错误" class="headerlink" title="3.4 常见错误"></a>3.4 常见错误</h4><h5 id="3-4-1-500错误"><a href="#3-4-1-500错误" class="headerlink" title="3.4.1 500错误"></a>3.4.1 500错误</h5><blockquote>
<p>服务端出现异常</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">500错误</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/0082312.png"></td>
</tr>
</tbody></table>
<h3 id="四、IDEA创建Web项目"><a href="#四、IDEA创建Web项目" class="headerlink" title="四、IDEA创建Web项目"></a>四、IDEA创建Web项目</h3><hr>
<h4 id="4-1-IDEA创建Web项目"><a href="#4-1-IDEA创建Web项目" class="headerlink" title="4.1 IDEA创建Web项目"></a>4.1 IDEA创建Web项目</h4><blockquote>
<p>创建项目窗口,选择JavaEE7,并勾选Web Application</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">创建Web项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/013231235.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>输入项目名称和项目保存位置，点击Finish,完成项目创建</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">项目目录设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/01634234234.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>Web项目目录介绍</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">目录结构</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/001deee7.png" alt="image-20200512142217351"></td>
</tr>
</tbody></table>
<h4 id="4-2-IDEA开发Servlet"><a href="#4-2-IDEA开发Servlet" class="headerlink" title="4.2 IDEA开发Servlet"></a>4.2 IDEA开发Servlet</h4><blockquote>
<p>使用开发工具编写Servlet，仍要手工导入<a href="">servlet-api.jar</a>文件，并与项目关联。</p>
</blockquote>
<h5 id="4-2-1-编写Servlet"><a href="#4-2-1-编写Servlet" class="headerlink" title="4.2.1 编写Servlet"></a>4.2.1 编写Servlet</h5><blockquote>
<p>创建MyServlet，实现Servlet接口，覆盖5个方法w</p>
</blockquote>
<h5 id="4-2-2-配置web-xml"><a href="#4-2-2-配置web-xml" class="headerlink" title="4.2.2 配置web.xml"></a>4.2.2 配置web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line">  <span class="comment">&lt;!--1添加servlet节点  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.qf.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--2添加servlet-mapping节点  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-2-3-部署Web项目"><a href="#4-2-3-部署Web项目" class="headerlink" title="4.2.3 部署Web项目"></a>4.2.3 部署Web项目</h5><blockquote>
<ul>
<li>在Tomcat的webapps目录下，新建WebProject项目文件夹<ul>
<li>创建WEB-INF，存放核心文件</li>
<li>在WEB-INF下，创建classes文件夹，将编译后的MyServlet.class文件复制至此。</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><a href="">问题：每当我们编写了新的Servlet或者重新编译，都需要手工将新的.class部署到Tomcat中，较为麻烦。如何实现自动部署？</a></li>
</ul>
<h4 id="4-3-IDEA部署Web项目"><a href="#4-3-IDEA部署Web项目" class="headerlink" title="4.3 IDEA部署Web项目"></a>4.3 IDEA部署Web项目</h4><blockquote>
<p>前面我们是在Tomcat的webapps目录新建应用程序目录myweb,然后把静态资源和Servlet复制到相关目录下。使用IDEA不需要我们复制了。可以通过IDEA集成Tomcat服务器，实现自动部署。</p>
</blockquote>
<h5 id="4-3-1-IDEA集成Tomcat"><a href="#4-3-1-IDEA集成Tomcat" class="headerlink" title="4.3.1 IDEA集成Tomcat"></a>4.3.1 IDEA集成Tomcat</h5><blockquote>
<p>点击File选项，选择Settings</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Settings设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/013232328.png" alt="image-20200415224650181"></td>
</tr>
</tbody></table>
<blockquote>
<p>选择Build, Execution, Deployment下的Application Servers。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">应用服务器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/033213212.png" alt="image-20200415224918038"></td>
</tr>
</tbody></table>
<blockquote>
<p>点击＋号，选择Tomcat Server</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">添加Tomcat服务器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/0332321123.png" alt="image-20200415225206629"></td>
</tr>
</tbody></table>
<blockquote>
<p>选择Tomcat安装目录，点击OK即可</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择Tomcat目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/03423123.png" alt="image-20200415225302765"></td>
</tr>
</tbody></table>
<blockquote>
<p>最后，点击OK</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">点击OK</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/0332325.png" alt="image-20200415225420316"></td>
</tr>
</tbody></table>
<h5 id="4-3-2-项目部署Tomcat"><a href="#4-3-2-项目部署Tomcat" class="headerlink" title="4.3.2 项目部署Tomcat"></a>4.3.2 项目部署Tomcat</h5><blockquote>
<p>点击 Add Configuration </p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">添加项目配置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122233241.png" alt="image-20200416110418929"></td>
</tr>
</tbody></table>
<blockquote>
<p>点击＋号，选择Tomcat Server，选择Local</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择Tomcat服务器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122234068.png" alt="image-20200416110623115"></td>
</tr>
</tbody></table>
<blockquote>
<p>点击＋号 ，选择 Artifact，添加当前项目</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">添加当前项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures%5C038.png" alt="image-20200416111320798"></td>
</tr>
</tbody></table>
<blockquote>
<p>点击运行按钮，即可运行项目</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">运行</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122234887.png" alt="image-20200416111837116"></td>
</tr>
</tbody></table>
<h4 id="4-4-其他操作"><a href="#4-4-其他操作" class="headerlink" title="4.4 其他操作"></a>4.4 其他操作</h4><h5 id="4-4-1-关联第三方jar包"><a href="#4-4-1-关联第三方jar包" class="headerlink" title="4.4.1 关联第三方jar包"></a>4.4.1 关联第三方jar包</h5><blockquote>
<p>在<a href="">WEB-INF</a>目录下新建lib目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">WEB-INF下新建lib目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122235436.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>输入lib目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">文件夹名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236286.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>复制jar包到lib目录中</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">复制Jar文件</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236263.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>右击lib目录，选择Add as Library…</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">项目集成</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236152.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>选择Project Library,完成。</p>
<ul>
<li>Global Library  表示所有工程都可以使用。</li>
<li>Project Library 表示当前工程中所有模块都可以使用。</li>
<li>Module Library  表示当前模块可以使用。</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">关键项目环境</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236837.png"></td>
</tr>
</tbody></table>
<h5 id="4-4-2-如何导出war包"><a href="#4-4-2-如何导出war包" class="headerlink" title="4.4.2 如何导出war包"></a>4.4.2 如何导出war包</h5><blockquote>
<p>项目完成后，有时候需要打成war方便部署。war包可以直接放入Tomcat的webapps目录中，启动Tomcat后自动解压，即可访问。</p>
</blockquote>
<blockquote>
<p>点击项目结构</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">项目结构配置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236398.png">****</td>
</tr>
</tbody></table>
<blockquote>
<p>选择Artifacts，点击+号</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">添加</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236774.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>选择Archive—&gt;For…</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择项目对应格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236793.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>构建项目</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">构建项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236644.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>在out\artifacts\目录中,查看生产的war包，把war放入Tomcat的webapps目录，启动Tomcat自动解压即可访问。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">War包目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122236923.png"></td>
</tr>
</tbody></table>
<h3 id="五、HTTP协议"><a href="#五、HTTP协议" class="headerlink" title="五、HTTP协议"></a>五、HTTP协议</h3><hr>
<h4 id="5-1-什么是HTTP"><a href="#5-1-什么是HTTP" class="headerlink" title="5.1 什么是HTTP"></a>5.1 什么是HTTP</h4><blockquote>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议,是一个基于请求与响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。</p>
</blockquote>
<h4 id="5-2-HTTP协议特点"><a href="#5-2-HTTP协议特点" class="headerlink" title="5.2 HTTP协议特点"></a>5.2 HTTP协议特点</h4><blockquote>
<ul>
<li><p>支持客户端（浏览器）&#x2F;服务器模式。</p>
</li>
<li><p>简单快速：客户端只向服务器发送请求方法和路径，服务器即可响应数据，因而通信速度很快。请求方法常用的有GET、POST等。</p>
</li>
<li><p>灵活：HTTP允许传输任意类型的数据，传输的数据类型由Content-Type标识。</p>
</li>
<li><p>无连接：无连接指的是每次TCP连接只处理一个或多个请求，服务器处理完客户的请求后，即断开连接。采用这种方式可以节省传输时间。</p>
<ul>
<li>HTTP1.0版本是一个请求响应之后，直接就断开了。称为短连接。</li>
<li>HTTP1.1版本不是响应后直接就断开了，而是等几秒钟,这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒钟用户没有发送新的请求，就会断开连接。称为长连接。</li>
</ul>
</li>
<li><p>无状态：HTTP协议是无状态协议。</p>
<ul>
<li>无状态是指协议对于事务处理没有记忆能力。</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="5-3-HTTP协议通信流程"><a href="#5-3-HTTP协议通信流程" class="headerlink" title="5.3 HTTP协议通信流程"></a>5.3 HTTP协议通信流程</h4><blockquote>
<ul>
<li><p>客户与服务器建立连接（三次握手）。</p>
</li>
<li><p>客户向服务器发送请求。</p>
</li>
<li><p>服务器接受请求，并根据请求返回相应的文件作为应答。</p>
</li>
<li><p>客户与服务器关闭连接（四次挥手）。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">HTTP原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237543.png" alt="http"></td>
</tr>
</tbody></table>
<h4 id="5-4-请求报文和响应报文【了解】"><a href="#5-4-请求报文和响应报文【了解】" class="headerlink" title="5.4 请求报文和响应报文【了解】"></a>5.4 请求报文和响应报文【了解】</h4><h5 id="5-4-1-HTTP请求报文"><a href="#5-4-1-HTTP请求报文" class="headerlink" title="5.4.1 HTTP请求报文"></a>5.4.1 HTTP请求报文</h5><blockquote>
<p>当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息（请求报文），HTTP请求信息由4部分组成：<br>1、请求行 请求方法&#x2F;地址 URI协议&#x2F;版本<br>2、请求头(Request Header)<br>3、空行<br>4、请求正文</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">请求报文</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237833.png" alt="请求报文"></td>
</tr>
</tbody></table>
<h5 id="5-4-2-HTTP响应报文"><a href="#5-4-2-HTTP响应报文" class="headerlink" title="5.4.2 HTTP响应报文"></a>5.4.2 HTTP响应报文</h5><blockquote>
<p>HTTP响应报文与HTTP请求报文相似，HTTP响应也由4个部分组成：<br>1、状态行<br>2、响应头(Response Header)<br>3、空行<br>4、响应正文</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">响应报文</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237453.png" alt="响应报文"></td>
</tr>
</tbody></table>
<h5 id="5-4-3-常见状态码"><a href="#5-4-3-常见状态码" class="headerlink" title="5.4.3 常见状态码"></a>5.4.3 常见状态码</h5><table>
<thead>
<tr>
<th>状态代码</th>
<th>状态描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>客户端请求成功</td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
<td>临时重定向</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>请求的资源不存在，例如，输入了错误的URL。</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器发生不可预期的错误，导致无法完成客户端的请求。</td>
</tr>
</tbody></table>
<h3 id="六、Servlet详解【重点】"><a href="#六、Servlet详解【重点】" class="headerlink" title="六、Servlet详解【重点】"></a>六、Servlet详解【<code>重点</code>】</h3><hr>
<h4 id="6-1-Servlet核心接口和类"><a href="#6-1-Servlet核心接口和类" class="headerlink" title="6.1 Servlet核心接口和类"></a>6.1 Servlet核心接口和类</h4><blockquote>
<p>在Servlet体系结构中，除了实现Servlet接口，还可以通过继承GenericServlet 或 HttpServlet类，完成编写。</p>
</blockquote>
<h5 id="6-1-1-Servlet接口"><a href="#6-1-1-Servlet接口" class="headerlink" title="6.1.1 Servlet接口"></a>6.1.1 Servlet接口</h5><blockquote>
<p>在Servlet API中最重要的是Servlet接口，所有Servlet都会直接或间接的与该接口发生联系，或是直接实现该接口，或间接继承自实现了该接口的类。<br>该接口包括以下五个方法：</p>
<ul>
<li><p>init(ServletConfig config)</p>
</li>
<li><p>ServletConfig getServletConfig()</p>
</li>
<li><p>service(ServletRequest req,ServletResponse res)</p>
</li>
<li><p>String getServletInfo()</p>
</li>
<li><p>destroy( )</p>
</li>
</ul>
</blockquote>
<h5 id="6-1-2-GenericServlet抽象类"><a href="#6-1-2-GenericServlet抽象类" class="headerlink" title="6.1.2 GenericServlet抽象类"></a>6.1.2 GenericServlet抽象类</h5><blockquote>
<p>GenericServlet 使编写 Servlet 变得更容易。它提供生命周期方法 init 和 destroy 的简单实现，要编写一般的 Servlet，只需重写抽象 service 方法即可。 </p>
</blockquote>
<h5 id="6-1-3-HttpServlet类"><a href="#6-1-3-HttpServlet类" class="headerlink" title="6.1.3 HttpServlet类"></a>6.1.3 HttpServlet类</h5><blockquote>
<p>HttpServlet是继承GenericServlet的基础上进一步的扩展。<br>提供将要被子类化以创建适用于 Web 站点的 HTTP servlet 的抽象类。HttpServlet 的子类至少必须重写一个方法，该方法通常是以下这些方法之一：<br>    doGet，如果 servlet 支持 HTTP GET 请求<br>    doPost，用于 HTTP POST 请求<br>    doPut，用于 HTTP PUT 请求<br>    doDelete，用于 HTTP DELETE 请求 </p>
</blockquote>
<h4 id="6-2-Servlet两种创建方式"><a href="#6-2-Servlet两种创建方式" class="headerlink" title="6.2 Servlet两种创建方式"></a>6.2 Servlet两种创建方式</h4><h5 id="6-2-1-实现接口Servlet"><a href="#6-2-1-实现接口Servlet" class="headerlink" title="6.2.1 实现接口Servlet"></a>6.2.1 实现接口Servlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet创建的第一种方式：实现接口Servlet</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet2</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">		response.getWriter().println(<span class="string">&quot;welcome use servlet&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">该方式比较麻烦，需要实现接口中所有方法。</a></li>
</ul>
<h5 id="6-2-2-继承HttpServlet（推荐）"><a href="#6-2-2-继承HttpServlet（推荐）" class="headerlink" title="6.2.2 继承HttpServlet（推荐）"></a>6.2.2 继承HttpServlet（推荐）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> * Servlet的第二种创建方式，继承HttpServlet.也是开发中推荐的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		</span><br><span class="line">		response.getWriter().print(<span class="string">&quot;welcome use servlet&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-3-常见错误"><a href="#6-2-3-常见错误" class="headerlink" title="6.2.3 常见错误"></a>6.2.3 常见错误</h5><blockquote>
<ul>
<li><p>HTTP Status 404   资源找不到 。</p>
<ul>
<li>第一种情况：地址书写错误。</li>
<li>第二种情况：地址没有问题，把IDEA项目中out目录删除，然后重新运行。</li>
</ul>
</li>
<li><p>Serlvet地址配置重复。both mapped to the url-pattern [&#x2F;helloservlet] which is not permitted。</p>
</li>
<li><p>Serlvet地址配置错误。比如没有写&#x2F;  Invalid <url-pattern> [helloservlet2] in servlet mapping。</p>
</li>
</ul>
</blockquote>
<h4 id="6-3-Servlet两种配置方式"><a href="#6-3-Servlet两种配置方式" class="headerlink" title="6.3 Servlet两种配置方式"></a>6.3 Servlet两种配置方式</h4><h5 id="6-3-1-使用web-xml（Servlet2-5之前使用）"><a href="#6-3-1-使用web-xml（Servlet2-5之前使用）" class="headerlink" title="6.3.1 使用web.xml（Servlet2.5之前使用）"></a>6.3.1 使用web.xml（Servlet2.5之前使用）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Web_Day11<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Servlet的第二种配置  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Servlet配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet的全称类名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.qf.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动的优先级，数字越小越先起作用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--映射配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--资源的匹配规则：精确匹配  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="6-3-2-配置属性"><a href="#6-3-2-配置属性" class="headerlink" title="6.3.2 配置属性"></a>6.3.2 配置属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url-pattern定义匹配规则，取值说明：</span><br><span class="line">精确匹配     /具体的名称		只有url路径是具体的名称的时候才会触发Servlet</span><br><span class="line">后缀匹配     *.xxx		   只要是以xxx结尾的就匹配触发Servlet</span><br><span class="line">通配符匹配   /* 			   匹配所有请求，包含服务器的所有资源</span><br><span class="line">通配符匹配   /             匹配所有请求，包含服务器的所有资源，不包括.jsp</span><br><span class="line"></span><br><span class="line">load-on-startup </span><br><span class="line">1元素标记容器是否应该在web应用程序启动的时候就加载这个servlet。</span><br><span class="line">2它的值必须是一个整数，表示servlet被加载的先后顺序。</span><br><span class="line">3如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。</span><br><span class="line">4如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载。</span><br></pre></td></tr></table></figure>



<h5 id="6-3-3-使用注解-（Servlet3-0后支持，推荐）"><a href="#6-3-3-使用注解-（Servlet3-0后支持，推荐）" class="headerlink" title="6.3.3 使用注解 （Servlet3.0后支持，推荐）"></a>6.3.3 使用注解 （Servlet3.0后支持，推荐）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> * 演示Servlet注解式配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		</span><br><span class="line">		response.getWriter().print(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-3-4-WebServlet注解常用属性"><a href="#6-3-4-WebServlet注解常用属性" class="headerlink" title="6.3.4 @WebServlet注解常用属性"></a>6.3.4 @WebServlet注解常用属性</h5><blockquote>
<ul>
<li><p>name: Serlvet名字 （可选）</p>
</li>
<li><p>value: 配置url路径,可以配置多个</p>
</li>
<li><p>urlPatterns：配置url路径 ，和value作用一样，不能同时使用</p>
</li>
<li><p>loadOnStartup:配置Servlet的创建的时机， 如果是0或者正数 启动程序时创建，如果是负数，则访问时创建。 数子越小优先级越高。</p>
</li>
</ul>
</blockquote>
<h3 id="七、Servlet应用【重点】"><a href="#七、Servlet应用【重点】" class="headerlink" title="七、Servlet应用【重点】"></a>七、Servlet应用【<code>重点</code>】</h3><hr>
<h4 id="7-1-request对象"><a href="#7-1-request对象" class="headerlink" title="7.1 request对象"></a>7.1 request对象</h4><blockquote>
<p>在Servlet中用来处理客户端请求需要用doGet或doPost方法的request对象</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">request</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237202.png" alt="image-20200512135542823"></td>
</tr>
</tbody></table>
<h5 id="7-1-1-get和post区别"><a href="#7-1-1-get和post区别" class="headerlink" title="7.1.1 get和post区别"></a>7.1.1 get和post区别</h5><blockquote>
<p><a href="">get请求</a></p>
<ul>
<li>get提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连</li>
<li>get方式明文传递，数据量小，不安全</li>
<li>效率高，浏览器默认请求方式为GET请求</li>
<li>对应的Servlet的方法是doGet</li>
</ul>
<p><a href="">post请求</a></p>
<ul>
<li>post方法是把提交的数据放在HTTP包的Body中</li>
<li>密文传递数据，数据量大，安全</li>
<li>效率相对没有GET高</li>
<li>对应的Servlet的方法是doPost</li>
</ul>
</blockquote>
<h5 id="7-1-2-request主要方法"><a href="#7-1-2-request主要方法" class="headerlink" title="7.1.2 request主要方法"></a>7.1.2 request主要方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String getParameter(String name)</td>
<td>根据表单组件名称获取提交数据</td>
</tr>
<tr>
<td>void setCharacterEncoding(String charset)</td>
<td>指定每个请求的编码</td>
</tr>
</tbody></table>
<h5 id="7-1-3-request应用"><a href="#7-1-3-request应用" class="headerlink" title="7.1.3 request应用"></a>7.1.3 request应用</h5><blockquote>
<p>HTML页面</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎你<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;HelloServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Servlet代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取表单提交的姓名</span></span><br><span class="line">		String name=request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="comment">//获取年龄</span></span><br><span class="line">		String age=request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		<span class="comment">//服务端输出打印</span></span><br><span class="line">		System.out.println(request.getRemoteAddr()+<span class="string">&quot;发来信息：姓名：&quot;</span>+name+<span class="string">&quot;----&gt;年龄：&quot;</span>+age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-1-4-get请求收参问题"><a href="#7-1-4-get请求收参问题" class="headerlink" title="7.1.4 get请求收参问题"></a>7.1.4 get请求收参问题</h5><blockquote>
<p>产生乱码是因为服务器和客户端沟通的编码不一致造成的，因此解决的办法是：在客户端和服务器之间设置一个统一的编码，之后就按照此编码进行数据的传输和接收</p>
</blockquote>
<h5 id="7-1-5-get中文乱码"><a href="#7-1-5-get中文乱码" class="headerlink" title="7.1.5 get中文乱码"></a>7.1.5 get中文乱码</h5><blockquote>
<p>在Tomcat7及以下版本，客户端以UTF-8的编码传输数据到服务器端，而服务器端的request对象使用的是ISO8859-1这个字符编码来接收数据，服务器和客户端沟通的编码不一致因此才会产生中文乱码的。</p>
<ul>
<li><p>解决办法：在接收到数据后，先获取request对象以ISO8859-1字符编码接收到的原始数据的字节数组，然后通过字节数组以指定的编码构建字符串，解决乱码问题。</p>
</li>
<li><p>Tomcat8的版本中get方式不会出现乱码了，因为服务器对url的编码格式可以进行自动转换。</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> * 演示Servlet的GET请求,中文乱码的问题</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/GETServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取表单提交的姓名</span></span><br><span class="line">		String name=request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		name=<span class="keyword">new</span> <span class="title class_">String</span>(name.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="comment">//获取年龄</span></span><br><span class="line">		String age=request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		<span class="comment">//服务端输出打印</span></span><br><span class="line">		System.out.println(request.getRemoteAddr()+<span class="string">&quot;发来信息：姓名：&quot;</span>+name+<span class="string">&quot;----&gt;年龄：&quot;</span>+age);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-1-6-post中文乱码"><a href="#7-1-6-post中文乱码" class="headerlink" title="7.1.6 post中文乱码"></a>7.1.6 post中文乱码</h5><blockquote>
<p>由于客户端是以UTF-8字符编码将表单数据传输到服务器端的，因此服务器也需要设置以UTF-8字符编码进行接收。</p>
<ul>
<li>解决方案：使用从ServletRequest接口继承而来的setCharacterEncoding(charset)方法进行统一的编码设置。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> * 演示Servlet的GET请求,中文乱码的问题</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/GETServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//设置请求参数的编码格式--对GET无效</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="comment">//获取表单提交的信息</span></span><br><span class="line">		String name=request.getParameter(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">		<span class="comment">//服务端输出打印</span></span><br><span class="line">		System.out.println(request.getRemoteAddr()+<span class="string">&quot;发来信息：&quot;</span>+msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-response对象"><a href="#7-2-response对象" class="headerlink" title="7.2 response对象"></a>7.2 response对象</h4><blockquote>
<p>response对象用于响应客户请求并向客户端输出信息。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">response</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237632.png" alt="image-20200512135658133"></td>
</tr>
</tbody></table>
<h5 id="7-2-1-response主要方法"><a href="#7-2-1-response主要方法" class="headerlink" title="7.2.1 response主要方法"></a>7.2.1 response主要方法</h5><table>
<thead>
<tr>
<th align="left">方法名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">setHeader(name,value)</td>
<td align="left">设置响应信息头</td>
</tr>
<tr>
<td align="left">setContentType(String)</td>
<td align="left">设置响应文件类型、响应式的编码格式</td>
</tr>
<tr>
<td align="left">setCharacterEncoding(String)</td>
<td align="left">设置服务端响应内容编码格式</td>
</tr>
<tr>
<td align="left">getWriter()</td>
<td align="left">获取字符输出流</td>
</tr>
</tbody></table>
<h5 id="7-2-2-response应用"><a href="#7-2-2-response应用" class="headerlink" title="7.2.2 response应用"></a>7.2.2 response应用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求参数代码省略</span></span><br><span class="line"><span class="comment">//获取输出流</span></span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;&lt;h1&gt;Login Success!!!&lt;/h1&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//out.println(&quot;&lt;h1&gt;登录成功!!!&lt;/h1&gt;&quot;);</span></span><br><span class="line">out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">如果输出内容包含中文，则出现乱码，因为服务器默认采用ISO8859-1编码响应内容</a></li>
</ul>
<h5 id="7-2-3-解决输出中文乱码"><a href="#7-2-3-解决输出中文乱码" class="headerlink" title="7.2.3 解决输出中文乱码"></a>7.2.3 解决输出中文乱码</h5><blockquote>
<ul>
<li>设置服务器端响应的编码格式</li>
<li>设置客户端响应内容的头内容的文件类型及编码格式</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置响应编码格式为utf-8</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">不推荐</a></li>
</ul>
<blockquote>
<p>同时设置服务端的编码格式和客户端响应的文件类型及响应时的编码格式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">推荐</a></li>
</ul>
<h4 id="7-3-综合案例-Servlet-JDBC"><a href="#7-3-综合案例-Servlet-JDBC" class="headerlink" title="7.3 综合案例(Servlet + JDBC)"></a>7.3 综合案例(Servlet + JDBC)</h4><blockquote>
<ul>
<li><p>要求：实现登录功能、展示所有用户功能</p>
</li>
<li><p>以下仅展示关键代码</p>
</li>
</ul>
</blockquote>
<h5 id="7-3-1-数据库"><a href="#7-3-1-数据库" class="headerlink" title="7.3.1 数据库"></a>7.3.1 数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE admin(</span><br><span class="line">	username VARCHAR(20) PRIMARY KEY,</span><br><span class="line">	PASSWORD VARCHAR(20) NOT NULL,</span><br><span class="line">    phone varchar(11) NOT NULL,</span><br><span class="line">    Address varchar(20) NOT NULL</span><br><span class="line">)CHARSET=utf8;</span><br><span class="line">INSERT INTO admin(username,PASSWORD,phone,address)</span><br><span class="line">VALUES(&#x27;gavin&#x27;,&#x27;123456&#x27;,&#x27;12345678901&#x27;,&#x27;北京市昌平区&#x27;);</span><br><span class="line">INSERT INTO admin(username,PASSWORD,phone,address)</span><br><span class="line">VALUES(&#x27;aaron&#x27;,&#x27;123456&#x27;,&#x27;12345678901&#x27;,&#x27;北京市昌平区&#x27;);</span><br></pre></td></tr></table></figure>



<h5 id="7-3-2-DBUtils"><a href="#7-3-2-DBUtils" class="headerlink" title="7.3.2 DBUtils"></a>7.3.2 DBUtils</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource ds;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; THREAD_LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> DbUtils.class.getResourceAsStream(<span class="string">&quot;/database.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            ds = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection == <span class="literal">null</span>) &#123;</span><br><span class="line">                connection = ds.getConnection();</span><br><span class="line">                THREAD_LOCAL.set(connection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection();</span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection();</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeAll</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">                THREAD_LOCAL.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-3-3-AdminDaoImpl"><a href="#7-3-3-AdminDaoImpl" class="headerlink" title="7.3.3 AdminDaoImpl"></a>7.3.3 AdminDaoImpl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.dao.AdminDao;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.utils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Admin admin)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Admin admin)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Admin <span class="title function_">select</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> queryRunner.query(DbUtils.getConnection(),<span class="string">&quot;select * from admin where username=?;&quot;</span>,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Admin&gt;(Admin.class),username);</span><br><span class="line">            <span class="keyword">return</span> admin;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Admin&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Admin&gt; admins = queryRunner.query(DbUtils.getConnection(),<span class="string">&quot;select * from admin&quot;</span>,<span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Admin&gt;(Admin.class));</span><br><span class="line">            <span class="keyword">return</span> admins;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-3-4-AdminServiceImpl"><a href="#7-3-4-AdminServiceImpl" class="headerlink" title="7.3.4 AdminServiceImpl"></a>7.3.4 AdminServiceImpl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.dao.AdminDao;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.dao.impl.AdminDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.utils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AdminDao</span> <span class="variable">adminDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Admin <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">Admin</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DbUtils.begin();</span><br><span class="line">            <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> adminDao.select(username);</span><br><span class="line">            <span class="keyword">if</span>(admin!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(admin.getPassword().equals(password))&#123;</span><br><span class="line">                    result = admin;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            DbUtils.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            DbUtils.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Admin&gt; <span class="title function_">showAllAdmin</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Admin&gt; admins = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DbUtils.begin();</span><br><span class="line">            admins = adminDao.selectAll();</span><br><span class="line">            DbUtils.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            DbUtils.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> admins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-3-5-HTML页面代码"><a href="#7-3-5-HTML页面代码" class="headerlink" title="7.3.5 HTML页面代码"></a>7.3.5 HTML页面代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/WebProject_war_exploded/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-3-6-LoginServlet"><a href="#7-3-6-LoginServlet" class="headerlink" title="7.3.6 LoginServlet"></a>7.3.6 LoginServlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.AdminServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1.收参</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//2.调用业务逻辑</span></span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>();</span><br><span class="line">        <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> adminService.login(username,password);</span><br><span class="line">        <span class="comment">//3.处理结果</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span>(admin!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//响应给客户端一个结果页面，显示登录成功</span></span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;title&gt;结果页面&lt;/title&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;h1&gt;登录成功！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//响应给客户端一个结果页面，显示登录失败！</span></span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;title&gt;结果页面&lt;/title&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;h1&gt;登录失败！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-3-7-ShowAllAdminServlet"><a href="#7-3-7-ShowAllAdminServlet" class="headerlink" title="7.3.7 ShowAllAdminServlet"></a>7.3.7 ShowAllAdminServlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.AdminServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/showall&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowAllAdminServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;Admin&gt; adminList = adminService.showAllAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(adminList!=<span class="literal">null</span>)&#123;</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;title&gt;显示所有&lt;/title&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;   &lt;tr&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;       &lt;td&gt;username&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;       &lt;td&gt;password&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;       &lt;td&gt;phone&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;       &lt;td&gt;address&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;   &lt;/tr&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Admin admin : adminList)&#123;</span><br><span class="line">                printWriter.println(<span class="string">&quot;   &lt;tr&gt;&quot;</span>);</span><br><span class="line">                printWriter.println(<span class="string">&quot;       &lt;td&gt;&quot;</span>+admin.getUsername()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                printWriter.println(<span class="string">&quot;       &lt;td&gt;&quot;</span>+admin.getPassword()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                printWriter.println(<span class="string">&quot;       &lt;td&gt;&quot;</span>+admin.getPhone()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                printWriter.println(<span class="string">&quot;       &lt;td&gt;&quot;</span>+admin.getAddress()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                printWriter.println(<span class="string">&quot;   &lt;/tr&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;title&gt;显示所有&lt;/title&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;h3&gt;当前没有用户！&lt;/h3&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="八、-转发与重定向"><a href="#八、-转发与重定向" class="headerlink" title="八、 转发与重定向"></a>八、 转发与重定向</h3><hr>
<h4 id="8-1-现有问题"><a href="#8-1-现有问题" class="headerlink" title="8.1 现有问题"></a>8.1 现有问题</h4><blockquote>
<p>在之前案例中，调用业务逻辑和显示结果页面都在同一个Servlet里，就会产生设计问题</p>
<ul>
<li>不符合单一职能原则、各司其职的思想</li>
<li>不利于后续的维护</li>
</ul>
<p>应该将业务逻辑和显示结果分离开</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">现阶段问题</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122237712.png" alt="image-20200421161151487"></td>
</tr>
</tbody></table>
<h5 id="8-1-1-业务、显示分离"><a href="#8-1-1-业务、显示分离" class="headerlink" title="8.1.1 业务、显示分离"></a>8.1.1 业务、显示分离</h5><table>
<thead>
<tr>
<th align="center">业务与显示分离</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238430.png" alt="image-20200421161738926"></td>
</tr>
</tbody></table>
<ul>
<li><a href="">问题：业务逻辑和显示结果分离后，如何跳转到显示结果的Servlet？</a></li>
<li><a href="">业务逻辑得到的数据结果如何传递给显示结果的Servlet？</a></li>
</ul>
<h4 id="8-2-转发"><a href="#8-2-转发" class="headerlink" title="8.2 转发"></a>8.2 转发</h4><blockquote>
<p>转发的作用在服务器端，将请求发送给服务器上的其他资源，以共同完成一次请求的处理。</p>
</blockquote>
<h5 id="8-2-1-页面跳转"><a href="#8-2-1-页面跳转" class="headerlink" title="8.2.1 页面跳转"></a>8.2.1 页面跳转</h5><blockquote>
<p>在调用业务逻辑的Servlet中，编写以下代码</p>
<ul>
<li>request.getRequestDispatcher(“&#x2F;目标URL-pattern”).forward(request, response);</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">forward</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238665.png" alt="image-20200421161418126"></td>
</tr>
</tbody></table>
<ul>
<li><a href="">使用forward跳转时，是在服务器内部跳转，地址栏不发生变化，属于同一次请求</a></li>
</ul>
<h5 id="8-2-2-数据传递"><a href="#8-2-2-数据传递" class="headerlink" title="8.2.2 数据传递"></a>8.2.2 数据传递</h5><blockquote>
<p>forward表示一次请求，是在服务器内部跳转，可以共享同一次request作用域中的数据</p>
<ul>
<li><p>request作用域：拥有存储数据的空间，作用范围是一次请求有效(一次请求可以经过多次转发)</p>
<ul>
<li>可以将数据存入request后，在一次请求过程中的任何位置进行获取</li>
<li>可传递任何数据(基本数据类型、对象、数组、集合等)</li>
</ul>
</li>
<li><p>存数据：request.setAttribute(key,value); </p>
<ul>
<li>以键值对形式存储在request作用域中。key为String类型，value为Object类型</li>
</ul>
</li>
<li><p>取数据：request.getAttribute(key);</p>
<ul>
<li>通过String类型的key访问Object类型的value</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="8-2-3-转发特点"><a href="#8-2-3-转发特点" class="headerlink" title="8.2.3 转发特点"></a>8.2.3 转发特点</h5><blockquote>
<ul>
<li><p>转发是服务器行为</p>
</li>
<li><p>转发是浏览器只做了一次访问请求</p>
</li>
<li><p>转发浏览器地址不变</p>
</li>
<li><p>转发两次跳转之间传输的信息不会丢失，所以可以通过request进行数据的传递、</p>
</li>
<li><p>转发只能将请求转发给同一个Web应用中的组件</p>
</li>
</ul>
</blockquote>
<h4 id="8-3-重定向"><a href="#8-3-重定向" class="headerlink" title="8.3 重定向"></a>8.3 重定向</h4><blockquote>
<p>重定向作用在客户端，客户端将请求发送给服务器后，服务器响应给客户端一个新的请求地址，客户端重新发送新请求。</p>
</blockquote>
<h5 id="8-3-1-页面跳转"><a href="#8-3-1-页面跳转" class="headerlink" title="8.3.1 页面跳转"></a>8.3.1 页面跳转</h5><blockquote>
<p>在调用业务逻辑的Servlet中，编写以下代码</p>
<ul>
<li>response.sendRedirect(“目标URI”);</li>
</ul>
</blockquote>
<ul>
<li><a href="">URI:统一资源标识符(Uniform Resource Identifier)，用来表示服务器中定位一个资源，资源在web项目中的路径(&#x2F;project&#x2F;source)</a></li>
</ul>
<table>
<thead>
<tr>
<th align="center">redirect</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238053.png" alt="image-20200512151855703"></td>
</tr>
</tbody></table>
<ul>
<li><a href="">使用redirect跳转时，是在客户端跳转，地址栏发生变化，属于多次请求</a></li>
</ul>
<h5 id="8-3-2-数据传递"><a href="#8-3-2-数据传递" class="headerlink" title="8.3.2 数据传递"></a>8.3.2 数据传递</h5><blockquote>
<p>sendRedirect跳转时，地址栏改变，代表客户端重新发送的请求。属于两次请求</p>
<ul>
<li>response没有作用域，两次request请求中的数据无法共享</li>
<li>传递数据：通过URI的拼接进行数据传递(“&#x2F;WebProject&#x2F;b?username&#x3D;tom”);</li>
<li>获取数据：request.getParameter(“username”);</li>
</ul>
</blockquote>
<h5 id="8-3-3-重定向特点"><a href="#8-3-3-重定向特点" class="headerlink" title="8.3.3 重定向特点"></a>8.3.3 重定向特点</h5><blockquote>
<ul>
<li><p>重定向是客户端行为。</p>
</li>
<li><p>重定向是浏览器做了至少两次的访问请求。</p>
</li>
<li><p>重定向浏览器地址改变。</p>
</li>
<li><p>重定向两次跳转之间传输的信息会丢失（request范围）。</p>
</li>
<li><p>重定向可以指向任何的资源，包括当前应用程序中的其他资源、同一个站点上的其他应用程序中的资源、其他站点的资源。</p>
</li>
</ul>
</blockquote>
<h4 id="8-4-转发、重定向总结"><a href="#8-4-转发、重定向总结" class="headerlink" title="8.4 转发、重定向总结"></a>8.4 转发、重定向总结</h4><blockquote>
<p>当两个Servlet需要传递数据时，选择forward转发。不建议使用sendRedirect进行传递</p>
</blockquote>
<h3 id="九、-Servlet生命周期"><a href="#九、-Servlet生命周期" class="headerlink" title="九、 Servlet生命周期"></a>九、 Servlet生命周期</h3><hr>
<h4 id="9-1-生命周期四个阶段"><a href="#9-1-生命周期四个阶段" class="headerlink" title="9.1 生命周期四个阶段"></a>9.1 生命周期四个阶段</h4><h5 id="9-1-1-实例化"><a href="#9-1-1-实例化" class="headerlink" title="9.1.1 实例化"></a>9.1.1 实例化</h5><blockquote>
<p>当用户第一次访问Servlet时，由容器调用Servlet的构造器创建具体的Servlet对象。也可以在容器启动之后立刻创建实例。使用如下代码可以设置Servlet是否在服务器启动时就创建。<br><load-on-startup>1</load-on-startup> </p>
<ul>
<li>注意：只执行一次</li>
</ul>
</blockquote>
<h5 id="9-1-2-初始化"><a href="#9-1-2-初始化" class="headerlink" title="9.1.2 初始化"></a>9.1.2 初始化</h5><blockquote>
<p>在初始化阶段，init()方法会被调用。这个方法在javax.servlet.Servlet接口中定义。其中，方法以一个ServletConfig类型的对象作为参数。</p>
<ul>
<li>注意：init方法只被执行一次</li>
</ul>
</blockquote>
<h5 id="9-1-3-服务"><a href="#9-1-3-服务" class="headerlink" title="9.1.3 服务"></a>9.1.3 服务</h5><blockquote>
<p>当客户端有一个请求时，容器就会将请求ServletRequest与响应ServletResponse对象转给Servlet，以参数的形式传给service方法。</p>
<ul>
<li>此方法会执行多次</li>
</ul>
</blockquote>
<h5 id="9-1-4-销毁"><a href="#9-1-4-销毁" class="headerlink" title="9.1.4 销毁"></a>9.1.4 销毁</h5><blockquote>
<p>当Servlet容器停止或者重新启动都会引起销毁Servlet对象并调用destroy方法。</p>
<ul>
<li>destroy方法执行一次</li>
</ul>
</blockquote>
<h5 id="9-1-5-Servlet执行流程"><a href="#9-1-5-Servlet执行流程" class="headerlink" title="9.1.5 Servlet执行流程"></a>9.1.5 Servlet执行流程</h5><table>
<thead>
<tr>
<th align="center">Servlet执行流程</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238272.png" alt="Servlet声明周期"></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class LifeServlet</span></span><br><span class="line"><span class="comment"> * 演示Servlet的生命周期：</span></span><br><span class="line"><span class="comment"> * 1、实例化</span></span><br><span class="line"><span class="comment"> * 2、init:初始化</span></span><br><span class="line"><span class="comment"> * 3、service：服务</span></span><br><span class="line"><span class="comment"> * 4、destory：销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/lifeservlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;1、完成了实例化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    	<span class="built_in">super</span>.init();</span><br><span class="line">    	System.out.println(<span class="string">&quot;2、完成了初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;3、就绪中&quot;</span>);</span><br><span class="line">		response.getWriter().append(<span class="string">&quot;Served at: &quot;</span>).append(request.getContextPath());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.destroy();</span><br><span class="line">		System.out.println(<span class="string">&quot;4、销毁了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十、Servlet特性"><a href="#十、Servlet特性" class="headerlink" title="十、Servlet特性"></a>十、Servlet特性</h3><hr>
<h4 id="10-1-线程安全问题"><a href="#10-1-线程安全问题" class="headerlink" title="10.1 线程安全问题"></a>10.1 线程安全问题</h4><blockquote>
<p>Servlet在访问之后，会执行实例化操作，创建一个Servlet对象。而我们Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改操作，就会有线程安全的问题。</p>
</blockquote>
<h4 id="10-2-如何保证线程安全"><a href="#10-2-如何保证线程安全" class="headerlink" title="10.2 如何保证线程安全"></a>10.2 如何保证线程安全</h4><blockquote>
<ul>
<li><p>synchronized</p>
<ul>
<li>将存在线程安全问题的代码放到同步代码块中</li>
</ul>
</li>
<li><p>实现SingleThreadModel接口</p>
<ul>
<li>servlet实现SingleThreadModel接口后，每个线程都会创建servlet实例，这样每个客户端请求就不存在共享资源的问题，但是servlet响应客户端请求的效率太低，所以已经淘汰。</li>
</ul>
</li>
<li><p>尽可能使用局部变量</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servlet3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.SingleThreadModel;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>  <span class="keyword">implements</span> <span class="title class_">SingleThreadModel</span> &#123;</span><br><span class="line">     <span class="comment">//private String message = &quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//假设1、接收参数</span></span><br><span class="line">        <span class="comment">//2、调用业务逻辑 得到登录结果</span></span><br><span class="line">        message = <span class="string">&quot;登录成功&quot;</span>;<span class="comment">//登录失败！</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        printWriter.println(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="十一、状态管理"><a href="#十一、状态管理" class="headerlink" title="十一、状态管理"></a>十一、状态管理</h3><hr>
<h4 id="11-1-现有问题"><a href="#11-1-现有问题" class="headerlink" title="11.1 现有问题"></a>11.1 现有问题</h4><blockquote>
<ul>
<li><p>HTTP协议是无状态的，不能保存每次提交的信息</p>
</li>
<li><p>如果用户发来一个新的请求，服务器无法知道它是否与上次的请求有联系。</p>
</li>
<li><p>对于那些需要多次提交数据才能完成的Web操作，比如登录来说，就成问题了。</p>
</li>
</ul>
</blockquote>
<h4 id="11-2-概念"><a href="#11-2-概念" class="headerlink" title="11.2 概念"></a>11.2 概念</h4><blockquote>
<p>将浏览器与web服务器之间多次交互当作一个整体来处理，并且将多次交互所涉及的数据（即状态）保存下来。</p>
</blockquote>
<h4 id="11-3-状态管理分类"><a href="#11-3-状态管理分类" class="headerlink" title="11.3 状态管理分类"></a>11.3 状态管理分类</h4><blockquote>
<ul>
<li><p>客户端状态管理技术：将状态保存在客户端。代表性的是Cookie技术。</p>
</li>
<li><p>服务器状态管理技术：将状态保存在服务器端。代表性的是session技术（服务器传递sessionID时需要使用Cookie的方式）</p>
</li>
</ul>
</blockquote>
<h3 id="十二、Cookie的使用"><a href="#十二、Cookie的使用" class="headerlink" title="十二、Cookie的使用"></a>十二、Cookie的使用</h3><hr>
<h4 id="12-1-什么是Cookie"><a href="#12-1-什么是Cookie" class="headerlink" title="12.1 什么是Cookie"></a>12.1 什么是Cookie</h4><blockquote>
<ul>
<li><p>Cookie是在浏览器访问Web服务器的某个资源时，由Web服务器在HTTP响应消息头中附带传送给浏览器的一小段数据。</p>
</li>
<li><p>一旦Web浏览器保存了某个Cookie，那么它在以后每次访问该Web服务器时，都应在HTTP请求头中将这个Cookie回传给Web服务器。</p>
</li>
<li><p>一个Cookie主要由标识该信息的名称（name）和值（value）组成。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Cookie原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238991.png" alt="image-20200420113202276"></td>
</tr>
</tbody></table>
<h4 id="12-2-创建Cookie"><a href="#12-2-创建Cookie" class="headerlink" title="12.2 创建Cookie"></a>12.2 创建Cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Cookie</span></span><br><span class="line">Cookie ck=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">ck.setPath(<span class="string">&quot;/webs&quot;</span>);<span class="comment">//设置Cookie的路径</span></span><br><span class="line">ck.setMaxAge(-<span class="number">1</span>);<span class="comment">//内存存储，取值有三种：&gt;0有效期，单位秒；=0浏览器关闭；&lt;0内存存储,默认-1</span></span><br><span class="line">response.addCookie(ck);<span class="comment">//添加到response对象中，响应时发送给客户端</span></span><br><span class="line">      <span class="comment">//注意：有效路径: 当前访问资源的上一级目录，不带主机名</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">chrome浏览器查看cookie信息：chrome:&#x2F;&#x2F;settings&#x2F;content&#x2F;cookies</a></li>
</ul>
<h4 id="12-3-获取Cookie"><a href="#12-3-获取Cookie" class="headerlink" title="12.3 获取Cookie"></a>12.3 获取Cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有的Cookie</span></span><br><span class="line">Cookie[] cks=request.getCookies();</span><br><span class="line">		<span class="comment">//遍历Cookie</span></span><br><span class="line">		<span class="keyword">for</span>(Cookie ck:cks)&#123;</span><br><span class="line">          <span class="comment">//检索出自己的Cookie</span></span><br><span class="line">			<span class="keyword">if</span>(ck.getName().equals(<span class="string">&quot;code&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">              <span class="comment">//记录Cookie的值</span></span><br><span class="line">				code=ck.getValue();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<h4 id="12-4-修改Cookie"><a href="#12-4-修改Cookie" class="headerlink" title="12.4 修改Cookie"></a>12.4 修改Cookie</h4><blockquote>
<p>只需要保证Cookie的名和路径一致即可修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改Cookie</span></span><br><span class="line">   Cookie ck=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">   ck.setPath(<span class="string">&quot;/webs&quot;</span>);<span class="comment">//设置Cookie的路径</span></span><br><span class="line">   ck.setMaxAge(-<span class="number">1</span>);<span class="comment">//内存存储，取值有三种：&gt;0有效期，单位秒；=0失效；&lt;0内存存储</span></span><br><span class="line">   response.addCookie(ck);<span class="comment">//让浏览器添加Cookie</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：如果改变cookie的name和有效路径会新建cookie, 而改变cookie值、有效期会覆盖原有cookie</a></li>
</ul>
<h4 id="12-5-Cookie编码与解码"><a href="#12-5-Cookie编码与解码" class="headerlink" title="12.5 Cookie编码与解码"></a>12.5 Cookie编码与解码</h4><blockquote>
<p>Cookie默认不支持中文，只能包含ASCII字符，所以Cookie需要对Unicode字符进行编码，否则会出现乱码。</p>
<ul>
<li><p>编码可以使用java.net.URLEncoder类的encode(String str,String encoding)方法</p>
</li>
<li><p>解码使用java.net.URLDecoder类的decode(String str,String encoding)方法</p>
</li>
</ul>
</blockquote>
<h5 id="12-5-1-创建带中文Cookie"><a href="#12-5-1-创建带中文Cookie" class="headerlink" title="12.5.1 创建带中文Cookie"></a>12.5.1 创建带中文Cookie</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用中文的 Cookie. name 与 value 都使用 UTF-8 编码. </span></span><br><span class="line">   <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(</span><br><span class="line">       URLEncoder.encode(<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>), </span><br><span class="line">       URLEncoder.encode(<span class="string">&quot;老邢&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">   <span class="comment">// 发送到客户端   </span></span><br><span class="line">   response.addCookie(cookie);</span><br></pre></td></tr></table></figure>



<h5 id="12-5-2-读取带中文Cookie"><a href="#12-5-2-读取带中文Cookie" class="headerlink" title="12.5.2 读取带中文Cookie"></a>12.5.2 读取带中文Cookie</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.getCookies() != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cc : request.getCookies())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieName</span> <span class="operator">=</span> URLDecoder.decode(cc.getName(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieValue</span> <span class="operator">=</span> URLDecoder.decode(cc.getValue(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        out.println(cookieName + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">        out.println(cookieValue + <span class="string">&quot;; &lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.println(<span class="string">&quot;Cookie 已经写入客户端. 请刷新页面. &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="12-6-Cookie优点和缺点"><a href="#12-6-Cookie优点和缺点" class="headerlink" title="12.6 Cookie优点和缺点"></a>12.6 Cookie优点和缺点</h4><h5 id="12-6-1-优点"><a href="#12-6-1-优点" class="headerlink" title="12.6.1 优点"></a>12.6.1 优点</h5><blockquote>
<ul>
<li><p>可配置到期规则。</p>
</li>
<li><p>简单性：Cookie 是一种基于文本的轻量结构，包含简单的键值对。</p>
</li>
<li><p>数据持久性：Cookie默认在过期之前是可以一直存在客户端浏览器上的。</p>
</li>
</ul>
</blockquote>
<h5 id="12-6-2-缺点"><a href="#12-6-2-缺点" class="headerlink" title="12.6.2 缺点"></a>12.6.2 缺点</h5><blockquote>
<ul>
<li><p>大小受到限制：大多数浏览器对 Cookie 的大小有 4K、8K字节的限制。</p>
</li>
<li><p>用户配置为禁用：有些用户禁用了浏览器或客户端设备接收 Cookie 的能力，因此限制了这一功能。、</p>
</li>
<li><p>潜在的安全风险：Cookie 可能会被篡改。会对安全性造成潜在风险或者导致依赖于Cookie 的应用程序失败。</p>
</li>
</ul>
</blockquote>
<h3 id="十三、Session对象【重点】"><a href="#十三、Session对象【重点】" class="headerlink" title="十三、Session对象【重点】"></a>十三、Session对象【<code>重点</code>】</h3><hr>
<h4 id="13-1-Session概述"><a href="#13-1-Session概述" class="headerlink" title="13.1 Session概述"></a>13.1 Session概述</h4><blockquote>
<ul>
<li>Session用于记录用户的状态。Session指的是在一段时间内，单个客户端与Web服务器的一连串相关的交互过程。</li>
<li>在一个Session中，客户可能会多次请求访问同一个资源，也有可能请求访问各种不同的服务器资源。</li>
</ul>
</blockquote>
<h4 id="13-2-Session原理"><a href="#13-2-Session原理" class="headerlink" title="13.2 Session原理"></a>13.2 Session原理</h4><blockquote>
<ul>
<li><p>服务器会为每一次会话分配一个Session对象</p>
</li>
<li><p>同一个浏览器发起的多次请求，同属于一次会话(Session)</p>
</li>
<li><p>首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端</p>
</li>
</ul>
</blockquote>
<ul>
<li><a href="">注意：session是由服务端创建的。</a></li>
</ul>
<h4 id="13-3-Session使用"><a href="#13-3-Session使用" class="headerlink" title="13.3 Session使用"></a>13.3 Session使用</h4><blockquote>
<ul>
<li>Session作用域：拥有存储数据的空间，作用范围是一次会话有效<ul>
<li>一次会话是使用同一浏览器发送的多次请求。一旦浏览器关闭，则结束会话</li>
<li>可以将数据存入Session中，在一次会话的任意位置进行获取</li>
<li>可传递任何数据(基本数据类型、对象、集合、数组)</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="13-3-1-获取Session"><a href="#13-3-1-获取Session" class="headerlink" title="13.3.1 获取Session"></a>13.3.1 获取Session</h5><blockquote>
<p>session是服务器端自动创建的，通过request对象获取</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//获取Session对象</span></span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line">System.out.println(<span class="string">&quot;Id：&quot;</span>+session.getId());<span class="comment">//唯一标记，</span></span><br></pre></td></tr></table></figure>



<h5 id="13-3-2-Session保存数据"><a href="#13-3-2-Session保存数据" class="headerlink" title="13.3.2 Session保存数据"></a>13.3.2 Session保存数据</h5><blockquote>
<p>​	setAttribute(属性名,Object)保存数据到session中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;key&quot;</span>,value);<span class="comment">//以键值对形式存储在session作用域中。</span></span><br></pre></td></tr></table></figure>



<h5 id="13-3-3-Session获取数据"><a href="#13-3-3-Session获取数据" class="headerlink" title="13.3.3 Session获取数据"></a>13.3.3 Session获取数据</h5><blockquote>
<p>​	getAttribute(属性名);获取session中数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.getAttribute(<span class="string">&quot;key&quot;</span>);<span class="comment">//通过String类型的key访问Object类型的value</span></span><br></pre></td></tr></table></figure>



<h5 id="13-3-4-Session移除数据"><a href="#13-3-4-Session移除数据" class="headerlink" title="13.3.4 Session移除数据"></a>13.3.4 Session移除数据</h5><blockquote>
<p>​	removeAttribute(属性名);从session中删除数据	</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.removeAttribute(<span class="string">&quot;key&quot;</span>);<span class="comment">//通过键移除session作用域中的值</span></span><br></pre></td></tr></table></figure>



<h4 id="13-4-Session与Request应用区别"><a href="#13-4-Session与Request应用区别" class="headerlink" title="13.4 Session与Request应用区别"></a>13.4 Session与Request应用区别</h4><blockquote>
<ul>
<li>request是一次请求有效，请求改变，则request改变</li>
<li>session是一次会话有效，浏览器改变，则session改变</li>
</ul>
</blockquote>
<h5 id="13-4-1-Session应用"><a href="#13-4-1-Session应用" class="headerlink" title="13.4.1 Session应用"></a>13.4.1 Session应用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.sessions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;SessionServlet&quot;,value = &quot;/ss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.通过request对象获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用session保存数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;gavin&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/getValue&quot;</span>);</span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="13-4-2-GetValueServlet-java"><a href="#13-4-2-GetValueServlet-java" class="headerlink" title="13.4.2 GetValueServlet.java"></a>13.4.2 GetValueServlet.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.sessions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;GetValueServlet&quot;,value = &quot;/getValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetValueServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.通过request获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> (String)request.getAttribute(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;从session中获得了：&quot;</span>+s);</span><br><span class="line">        System.out.println(<span class="string">&quot;从reqeust中获得了：&quot;</span>+password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="13-5-Session的生命周期"><a href="#13-5-Session的生命周期" class="headerlink" title="13.5 Session的生命周期"></a>13.5 Session的生命周期</h4><blockquote>
<ul>
<li><p>开始：第一次使用到Session的请求产生，则创建Session</p>
</li>
<li><p>结束：</p>
<ul>
<li>浏览器关闭，则失效</li>
<li>Session超时，则失效<ul>
<li>session.setMaxInactiveInterval(seconds);&#x2F;&#x2F;设置最大有效时间(单位：秒)</li>
</ul>
</li>
<li>手工销毁，则失效<ul>
<li>session.invalidate();&#x2F;&#x2F;登录退出、注销</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="13-5-1-Session失效"><a href="#13-5-1-Session失效" class="headerlink" title="13.5.1 Session失效"></a>13.5.1 Session失效</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.setMaxInactiveInterval(<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置session最大有效期为一小时</span></span><br><span class="line"></span><br><span class="line">session.invalidate();<span class="comment">//手工销毁</span></span><br></pre></td></tr></table></figure>





<h4 id="13-4-浏览器禁用Cookie解决方案【了解】"><a href="#13-4-浏览器禁用Cookie解决方案【了解】" class="headerlink" title="13.4 浏览器禁用Cookie解决方案【了解】"></a>13.4 浏览器禁用Cookie解决方案【了解】</h4><h5 id="13-4-1-浏览器禁用Cookie的后果"><a href="#13-4-1-浏览器禁用Cookie的后果" class="headerlink" title="13.4.1 浏览器禁用Cookie的后果"></a>13.4.1 浏览器禁用Cookie的后果</h5><blockquote>
<p>服务器在默认情况下，会使用Cookie的方式将sessionID发送给浏览器，如果用户禁止Cookie，则sessionID不会被浏览器保存，此时，服务器可以使用如URL重写这样的方式来发送sessionID。</p>
</blockquote>
<h5 id="13-4-2-URL重写"><a href="#13-4-2-URL重写" class="headerlink" title="13.4.2 URL重写"></a>13.4.2 URL重写</h5><blockquote>
<p>浏览器在访问服务器上的某个地址时，不再使用原来的那个地址，而是使用经过改写的地址（即在原来的地址后面加上了sessionID）。</p>
</blockquote>
<h5 id="13-4-3-实现URL重写"><a href="#13-4-3-实现URL重写" class="headerlink" title="13.4.3 实现URL重写"></a>13.4.3 实现URL重写</h5><blockquote>
<p>response.encodeRedirectURL(String url)生成重写的URL。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="comment">//重写URL追加SessionId</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">newUrl</span> <span class="operator">=</span> response.encodeRedirectURL(<span class="string">&quot;/WebProject_war_exploded/cs&quot;</span>);</span><br><span class="line">    System.out.println(newUrl);</span><br><span class="line">		</span><br><span class="line">    response.sendRedirect(newUrl2);</span><br></pre></td></tr></table></figure>



<h4 id="13-5-Session实战权限验证"><a href="#13-5-Session实战权限验证" class="headerlink" title="13.5 Session实战权限验证"></a>13.5 Session实战权限验证</h4><table>
<thead>
<tr>
<th align="center">Session记录登录状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122238215.png" alt="image-20200422105652452"></td>
</tr>
</tbody></table>
<h5 id="13-5-1-创建管理员表"><a href="#13-5-1-创建管理员表" class="headerlink" title="13.5.1 创建管理员表"></a>13.5.1 创建管理员表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Manager(</span><br><span class="line">	username VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    password VARCHAR(20) NOT NULL</span><br><span class="line">)charset=utf8;</span><br></pre></td></tr></table></figure>



<h5 id="13-5-2-登录页面"><a href="#13-5-2-登录页面" class="headerlink" title="13.5.2 登录页面"></a>13.5.2 登录页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>管理员登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/WebProject_war_exploded/loginMgr&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="13-5-3-LoginMgrController"><a href="#13-5-3-LoginMgrController" class="headerlink" title="13.5.3 LoginMgrController"></a>13.5.3 LoginMgrController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Manager;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.ManagerService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.ManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginMgrController&quot;,value = &quot;/loginMgr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMgrController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.处理乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.收参</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//3.调用业务方法</span></span><br><span class="line">        <span class="type">ManagerService</span> <span class="variable">managerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerServiceImpl</span>();</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">mgr</span> <span class="operator">=</span> managerService.login(username,password);</span><br><span class="line">        <span class="comment">//4.处理结果，流程跳转</span></span><br><span class="line">        <span class="keyword">if</span>(mgr!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//将管理员信息存储在Session里</span></span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;mgr&quot;</span>,mgr);</span><br><span class="line">            <span class="comment">//跳转  目标、方式</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/showallcontroller&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/loginMgr.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="13-5-4-ShowAllAdminController"><a href="#13-5-4-ShowAllAdminController" class="headerlink" title="13.5.4 ShowAllAdminController"></a>13.5.4 ShowAllAdminController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Manager;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.AdminServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/showallcontroller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowAllAdminController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//通过HttpSession完成权限控制</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">mgr</span>  <span class="operator">=</span>(Manager)session.getAttribute(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(mgr !=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只负责调用业务逻辑功能</span></span><br><span class="line">            <span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">            List&lt;Admin&gt; adminList = adminService.showAllAdmin();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//request作用域存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;admins&quot;</span>,adminList);</span><br><span class="line">            <span class="comment">//通过转发 跳转到显示结果servlet</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/showalljsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/loginMgr.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="13-6-Session实战保存验证码"><a href="#13-6-Session实战保存验证码" class="headerlink" title="13.6 Session实战保存验证码"></a>13.6 Session实战保存验证码</h4><h5 id="13-6-1-创建验证码"><a href="#13-6-1-创建验证码" class="headerlink" title="13.6.1 创建验证码"></a>13.6.1 创建验证码</h5><blockquote>
<ul>
<li><p>导入ValidateCode.jar</p>
</li>
<li><p>创建生成验证码的Servlet</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class CreateCode</span></span><br><span class="line"><span class="comment"> * 验证码的生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/createcode&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateCode</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		ValidateCode vc=<span class="keyword">new</span> <span class="title class_">ValidateCode</span>(<span class="number">200</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">		String code=vc.getCode();</span><br><span class="line">		System.out.println(request.getRemoteAddr()+<span class="string">&quot;:生成:&quot;</span>+code);</span><br><span class="line">		<span class="comment">//使用Session存储生成的验证码</span></span><br><span class="line">		HttpSession session=request.getSession();</span><br><span class="line">      	session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">        <span class="comment">//响应给客户端</span></span><br><span class="line">		vc.write(response.getOutputStream());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="13-6-2-登录页面"><a href="#13-6-2-登录页面" class="headerlink" title="13.6.2 登录页面"></a>13.6.2 登录页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>管理员登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/WebProject_war_exploded/loginMgr&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        验证码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inputVcode&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/WebProject_war_exploded/createcode&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="13-6-3-LoginMgrController"><a href="#13-6-3-LoginMgrController" class="headerlink" title="13.6.3 LoginMgrController"></a>13.6.3 LoginMgrController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Manager;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.ManagerService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.ManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginMgrController&quot;, value = &quot;/loginMgr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMgrController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.处理乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.收参</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputVcode</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;inputVcode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">codes</span> <span class="operator">=</span> (String) request.getSession().getAttribute(<span class="string">&quot;codes&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!inputVcode.isEmpty() &amp;&amp; inputVcode.equalsIgnoreCase(codes)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.调用业务方法</span></span><br><span class="line">            <span class="type">ManagerService</span> <span class="variable">managerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Manager</span> <span class="variable">mgr</span> <span class="operator">=</span> managerService.login(username, password);</span><br><span class="line">            <span class="comment">//4.处理结果，流程跳转</span></span><br><span class="line">            <span class="keyword">if</span> (mgr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//登录成功</span></span><br><span class="line">                <span class="comment">//将管理员信息存储在Session里</span></span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">&quot;mgr&quot;</span>, mgr);</span><br><span class="line">                <span class="comment">//跳转  目标、方式</span></span><br><span class="line">                response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/showallcontroller&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登录失败</span></span><br><span class="line">                response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/loginMgr.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/WebProject_war_exploded/loginMgr.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="十四、ServletContext对象【重点】"><a href="#十四、ServletContext对象【重点】" class="headerlink" title="十四、ServletContext对象【重点】"></a>十四、ServletContext对象【<code>重点</code>】</h3><hr>
<h4 id="14-1-ServletContext概述"><a href="#14-1-ServletContext概述" class="headerlink" title="14.1 ServletContext概述"></a>14.1 ServletContext概述</h4><blockquote>
<ul>
<li><p>全局对象，也拥有作用域，对应一个Tomcat中的Web应用</p>
</li>
<li><p>当Web服务器启动时，会为每一个Web应用程序创建一块共享的存储区域（ServletContext）。</p>
</li>
<li><p>ServletContext在Web服务器启动时创建，服务器关闭时销毁。</p>
</li>
</ul>
</blockquote>
<h4 id="14-2-获取ServletContext对象"><a href="#14-2-获取ServletContext对象" class="headerlink" title="14.2 获取ServletContext对象"></a>14.2 获取ServletContext对象</h4><blockquote>
<ul>
<li><p>GenericServlet提供了getServletContext()方法。（推荐） this.getServletContext();</p>
</li>
<li><p>HttpServletRequest提供了getServletContext()方法。(推荐)</p>
</li>
<li><p>HttpSession提供了getServletContext()方法。</p>
</li>
</ul>
</blockquote>
<h4 id="14-3-ServletContext作用"><a href="#14-3-ServletContext作用" class="headerlink" title="14.3 ServletContext作用"></a>14.3 ServletContext作用</h4><h5 id="14-3-1-获取项目真实路径"><a href="#14-3-1-获取项目真实路径" class="headerlink" title="14.3.1 获取项目真实路径"></a>14.3.1 获取项目真实路径</h5><blockquote>
<p>获取当前项目在服务器发布的真实路径</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String realpath=servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="14-3-2-获取项目上下文路径"><a href="#14-3-2-获取项目上下文路径" class="headerlink" title="14.3.2 获取项目上下文路径"></a>14.3.2 获取项目上下文路径</h5><blockquote>
<p>获取当前项目上下文路径（应用程序名称）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(servletContext.getContextPath());<span class="comment">//上下文路径（应用程序名称）</span></span><br><span class="line">System.out.println(request.getContextPath());</span><br></pre></td></tr></table></figure>



<h5 id="14-3-3-全局容器"><a href="#14-3-3-全局容器" class="headerlink" title="14.3.3 全局容器"></a>14.3.3 全局容器</h5><blockquote>
<p>ServletContext拥有作用域，可以存储数据到全局容器中</p>
<ul>
<li><p>存储数据：servletContext.setAttribute(“name”,value);</p>
</li>
<li><p>获取数据：servletContext.getAttribute(“name”);</p>
</li>
<li><p>移除数据：servletContext.removeAttribute(“name”);</p>
</li>
</ul>
</blockquote>
<h4 id="14-4-ServletContext特点"><a href="#14-4-ServletContext特点" class="headerlink" title="14.4 ServletContext特点"></a>14.4 ServletContext特点</h4><blockquote>
<ul>
<li><p>唯一性: 一个应用对应一个ServletContext。</p>
</li>
<li><p>生命周期: 只要容器不关闭或者应用不卸载，ServletContext就一直存在。</p>
</li>
</ul>
</blockquote>
<h4 id="14-5-ServletContext应用场景"><a href="#14-5-ServletContext应用场景" class="headerlink" title="14.5 ServletContext应用场景"></a>14.5 ServletContext应用场景</h4><blockquote>
<p>ServletContext统计当前项目访问次数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Servlet3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">		response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">		Integer count=(Integer) application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(count==<span class="literal">null</span>) &#123;</span><br><span class="line">			count=<span class="number">1</span>;</span><br><span class="line">			application.setAttribute(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			count++;</span><br><span class="line">			application.setAttribute(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		PrintWriter out=response.getWriter();</span><br><span class="line">		out.write(<span class="string">&quot;servlet共访问次数：&quot;</span>+count);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="14-6-作用域总结"><a href="#14-6-作用域总结" class="headerlink" title="14.6 作用域总结"></a>14.6 作用域总结</h4><blockquote>
<ul>
<li>HttpServletRequest：一次请求，请求响应之前有效</li>
<li>HttpSession：一次会话开始，浏览器不关闭或不超时之前有效</li>
<li>ServletContext：服务器启动开始，服务器停止之前有效</li>
</ul>
</blockquote>
<h3 id="十五、过滤器【重点】"><a href="#十五、过滤器【重点】" class="headerlink" title="十五、过滤器【重点】"></a>十五、过滤器【<code>重点</code>】</h3><hr>
<h4 id="15-1-现有问题"><a href="#15-1-现有问题" class="headerlink" title="15.1 现有问题"></a>15.1 现有问题</h4><blockquote>
<p>在以往的Servlet中，有没有冗余的代码，多个Servlet都要进行编写。</p>
</blockquote>
<h4 id="15-2-概念"><a href="#15-2-概念" class="headerlink" title="15.2 概念"></a>15.2 概念</h4><blockquote>
<p>过滤器（Filter）是处于客户端与服务器目标资源之间的一道过滤技术。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">过滤器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122239057.png" alt="image-20200423124307700"></td>
</tr>
</tbody></table>
<h4 id="15-3-过滤器作用"><a href="#15-3-过滤器作用" class="headerlink" title="15.3 过滤器作用"></a>15.3 过滤器作用</h4><blockquote>
<ul>
<li><p>执行地位在Servlet之前，客户端发送请求时，会先经过Filter，再到达目标Servlet中；响应时，会根据执行流程再次反向执行Filter</p>
</li>
<li><p>可以解决多个Servlet共性代码的冗余问题（例如：乱码处理、登录验证）</p>
</li>
</ul>
</blockquote>
<h4 id="15-4-编写过滤器"><a href="#15-4-编写过滤器" class="headerlink" title="15.4 编写过滤器"></a>15.4 编写过滤器</h4><blockquote>
<p>Servlet API中提供了一个Filter接口，开发人员编写一个Java类实现了这个接口即可，这个Java类称之为过滤器（Filter）</p>
</blockquote>
<h5 id="15-4-1-实现过程"><a href="#15-4-1-实现过程" class="headerlink" title="15.4.1 实现过程"></a>15.4.1 实现过程</h5><blockquote>
<ul>
<li><p>编写Java类实现Filter接口</p>
</li>
<li><p>在doFilter方法中编写拦截逻辑</p>
</li>
<li><p>设置拦截路径</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/myservlet1&quot;)</span><span class="comment">//过滤路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器初始化了........init...  &quot;</span>+filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤前........doFilter &quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤后.......doFilter&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁了.....destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="15-5-过滤器配置"><a href="#15-5-过滤器配置" class="headerlink" title="15.5 过滤器配置"></a>15.5 过滤器配置</h4><h5 id="15-5-1-注解配置"><a href="#15-5-1-注解配置" class="headerlink" title="15.5.1 注解配置"></a>15.5.1 注解配置</h5><blockquote>
<p>在自定义的Filter类上使用注解@WebFilter(value&#x3D;“&#x2F;过滤目标资源”)</p>
</blockquote>
<h5 id="15-5-2-xml配置"><a href="#15-5-2-xml配置" class="headerlink" title="15.5.2 xml配置"></a>15.5.2 xml配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--过滤器的xml配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤器类全称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.qf.web.filter.SecondFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--映射路径配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--过滤的url匹配规则和Servlet类似--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-5-3-过滤器路径"><a href="#15-5-3-过滤器路径" class="headerlink" title="15.5.3 过滤器路径"></a>15.5.3 过滤器路径</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤器的过滤路径通常有三种形式:</span><br><span class="line"></span><br><span class="line">精确过滤匹配 ，比如/index.jsp   /myservlet1</span><br><span class="line"></span><br><span class="line">后缀过滤匹配，比如*.jsp、*.html、*.jpg</span><br><span class="line"></span><br><span class="line">通配符过滤匹配/*，表示拦截所有。注意过滤器不能使用/匹配。</span><br><span class="line">	/aaa/bbb/* 允许</span><br></pre></td></tr></table></figure>



<h4 id="15-6-过滤器链和优先级"><a href="#15-6-过滤器链和优先级" class="headerlink" title="15.6 过滤器链和优先级"></a>15.6 过滤器链和优先级</h4><h5 id="15-6-1-过滤器链"><a href="#15-6-1-过滤器链" class="headerlink" title="15.6.1 过滤器链"></a>15.6.1 过滤器链</h5><blockquote>
<p>客户端对服务器请求之后，服务器调用Servlet之前会执行一组过滤器（多个过滤器），那么这组过滤器就称为一条过滤器链。</p>
<p>每个过滤器实现某个特定的功能，当第一个Filter的doFilter方法被调用时，Web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则Web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">过滤器链</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304122235567.png" alt="image-20200422212814562"></td>
</tr>
</tbody></table>
<h5 id="15-6-2-过滤器优先级"><a href="#15-6-2-过滤器优先级" class="headerlink" title="15.6.2 过滤器优先级"></a>15.6.2 过滤器优先级</h5><blockquote>
<p>在一个Web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。<br>优先级：	</p>
<ul>
<li><p>如果为注解的话，是按照类全名称的字符串顺序决定作用顺序</p>
</li>
<li><p>如果web.xml，按照 filter-mapping注册顺序，从上往下</p>
</li>
<li><p>web.xml配置高于注解方式</p>
</li>
<li><p>如果注解和web.xml同时配置，会创建多个过滤器对象，造成过滤多次。</p>
</li>
</ul>
</blockquote>
<h4 id="15-7-过滤器典型应用"><a href="#15-7-过滤器典型应用" class="headerlink" title="15.7 过滤器典型应用"></a>15.7 过滤器典型应用</h4><h5 id="15-7-1-过滤器解决编码"><a href="#15-7-1-过滤器解决编码" class="headerlink" title="15.7.1 过滤器解决编码"></a>15.7.1 过滤器解决编码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//统一处理请求和响应的乱码</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="15-7-2-权限验证"><a href="#15-7-2-权限验证" class="headerlink" title="15.7.2 权限验证"></a>15.7.2 权限验证</h5><blockquote>
<p>ShowAllAdminController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.servlet.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Manager;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.service.impl.AdminServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/showallcontroller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowAllAdminController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        //通过HttpSession完成权限控制</span></span><br><span class="line"><span class="comment">//        HttpSession session = req.getSession();</span></span><br><span class="line"><span class="comment">//        Manager mgr  =(Manager)session.getAttribute(&quot;mgr&quot;);</span></span><br><span class="line"><span class="comment">//        if(mgr !=null)&#123;</span></span><br><span class="line">            <span class="comment">//只负责调用业务逻辑功能</span></span><br><span class="line">            <span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">            List&lt;Admin&gt; adminList = adminService.showAllAdmin();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//request作用域存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;admins&quot;</span>,adminList);</span><br><span class="line">            <span class="comment">//通过转发 跳转到显示结果servlet</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/showalljsp&quot;</span>).forward(req,resp);</span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            resp.sendRedirect(&quot;/WebProject_war_exploded/loginMgr.html&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>CheckFilter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.servletProject.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.servletProject.entity.Manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/showallcontroller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//权限验证   验证管理员是否登录！</span></span><br><span class="line">        <span class="comment">//向下转型  拆箱</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)servletResponse;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span>request.getSession();</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">mgr</span> <span class="operator">=</span> (Manager) session.getAttribute(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(mgr!=<span class="literal">null</span>)&#123;<span class="comment">//登录过！</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/loginMgr.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="十六、综合案例（EmpProject）"><a href="#十六、综合案例（EmpProject）" class="headerlink" title="十六、综合案例（EmpProject）"></a>十六、综合案例（EmpProject）</h3><hr>
<h4 id="16-1-数据库环境搭建"><a href="#16-1-数据库环境搭建" class="headerlink" title="16.1 数据库环境搭建"></a>16.1 数据库环境搭建</h4><blockquote>
<p>该案例是EmpProject员工管理系统。使用了两张表</p>
<ul>
<li>EMP 员工信息表</li>
<li>EmpManager 管理员表</li>
</ul>
</blockquote>
<h5 id="16-1-1-创建数据库"><a href="#16-1-1-创建数据库" class="headerlink" title="16.1.1 创建数据库"></a>16.1.1 创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE EMP;</span><br></pre></td></tr></table></figure>



<h5 id="16-1-2-创建数据表"><a href="#16-1-2-创建数据表" class="headerlink" title="16.1.2 创建数据表"></a>16.1.2 创建数据表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE EMP(</span><br><span class="line">	ID INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(20) NOT NULL,</span><br><span class="line">    SALARY DOUBLE NOT NULL,</span><br><span class="line">    AGE INT NOT NULL</span><br><span class="line">)CHARSET=UTF8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE EmpManager(</span><br><span class="line">    USERNAME VARCHAR(20) NOT NULL,</span><br><span class="line">    PASSWORD VARCHAR(20) NOT NULL</span><br><span class="line">)CHARSET=UTF8;</span><br></pre></td></tr></table></figure>



<h4 id="16-2-创建Web项目"><a href="#16-2-创建Web项目" class="headerlink" title="16.2 创建Web项目"></a>16.2 创建Web项目</h4><blockquote>
<p>创建Web项目，导入相关jar包</p>
<ul>
<li><p>commons-dbutils-1.7.jar</p>
</li>
<li><p>druid-1.1.5.jar</p>
</li>
<li><p>mysql-connector-java-5.1.25-bin.jar</p>
</li>
<li><p>ValidateCode.jar</p>
</li>
</ul>
</blockquote>
<h4 id="16-3-基础环境搭建"><a href="#16-3-基础环境搭建" class="headerlink" title="16.3 基础环境搭建"></a>16.3 基础环境搭建</h4><blockquote>
<p>项目下创建包目录结构</p>
<ul>
<li>com.qf.emp.controller   调用业务逻辑Servlet</li>
<li>com.qf.emp.dao      数据访问层</li>
<li>com.qf.emp.impl     数据访问层实现类</li>
<li>com.qf.emp.entity   实体类</li>
<li>com.qf.emp.filter     过滤器</li>
<li>com.qf.emp.jsp        打印显示页面Servlet</li>
<li>com.qf.emp.service  业务逻辑层</li>
<li>com.qf.emp.impl      业务逻辑层实现类</li>
<li>com.qf.emp.utils      工具类</li>
<li>database.properties  数据库连接及连接池配置文件</li>
</ul>
</blockquote>
<h4 id="16-4-管理员登录功能"><a href="#16-4-管理员登录功能" class="headerlink" title="16.4 管理员登录功能"></a>16.4 管理员登录功能</h4><blockquote>
<p>仅展示Controller代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.EmpManager;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.EmpManagerService;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.impl.EmpManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;EmpManagerLoginController&quot;,value = &quot;/manager/EmpManagerLoginController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpManagerLoginController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.收参</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputVcode</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;inputVcode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.校验验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codes</span> <span class="operator">=</span> (String)request.getSession().getAttribute(<span class="string">&quot;codes&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!inputVcode.isEmpty() &amp;&amp; inputVcode.equalsIgnoreCase(codes))&#123;</span><br><span class="line">            <span class="comment">//调用业务逻辑实现登录</span></span><br><span class="line">            <span class="type">EmpManagerService</span> <span class="variable">empManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">EmpManager</span> <span class="variable">empManager</span> <span class="operator">=</span> empManagerService.login(username,password);</span><br><span class="line">            <span class="keyword">if</span>(empManager!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//登录成功</span></span><br><span class="line">                <span class="comment">//存储在session作用域</span></span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">&quot;empManager&quot;</span>,empManager);</span><br><span class="line">                <span class="comment">//跳转到查询所有的controller</span></span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">&quot;/manager/safe/showAllEmpController&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//验证码输入错误，跳转到登录页面</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="16-5-查询所有员工功能"><a href="#16-5-查询所有员工功能" class="headerlink" title="16.5 查询所有员工功能"></a>16.5 查询所有员工功能</h4><h5 id="16-5-1-调用业务逻辑Controller"><a href="#16-5-1-调用业务逻辑Controller" class="headerlink" title="16.5.1 调用业务逻辑Controller"></a>16.5.1 调用业务逻辑Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.impl.EmpServiceImpl;</span><br><span class="line"><span class="keyword">import</span> sun.security.util.AuthResources_it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ShowAllEmpController&quot;,value = &quot;/manager/safe/showAllEmpController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowAllEmpController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//权限验证存放在过滤器实现</span></span><br><span class="line">        <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceImpl</span>();</span><br><span class="line">        List&lt;Emp&gt; emps = empService.showAllEmp();</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;emps&quot;</span>,emps);</span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/manager/safe/showAllEmpJSP&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="16-5-2-显示页面JSP"><a href="#16-5-2-显示页面JSP" class="headerlink" title="16.5.2 显示页面JSP"></a>16.5.2 显示页面JSP</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ShowAllEmpJSP&quot;,value = &quot;/manager/safe/showAllEmpJSP&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowAllEmpJSP</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取集合数据</span></span><br><span class="line">        List&lt;Emp&gt; emps = (List&lt;Emp&gt;)request.getAttribute(<span class="string">&quot;emps&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;head&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;title&gt;查询所有员工页面&lt;/title&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;/head&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;body&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;table border=&#x27;1&#x27;&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;           &lt;tr&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;               &lt;td&gt;编号&lt;/td&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;               &lt;td&gt;姓名&lt;/td&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;               &lt;td&gt;工资&lt;/td&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;               &lt;td&gt;年龄&lt;/td&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;               &lt;td colspan=&#x27;2&#x27;&gt;操作&lt;/td&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;           &lt;/tr&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Emp emp: emps)&#123;</span><br><span class="line">            printWriter.println(<span class="string">&quot;           &lt;tr&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&quot;</span>+emp.getId()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&quot;</span>+emp.getName()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&quot;</span>+emp.getSalary()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&quot;</span>+emp.getAge()+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&lt;a href=&#x27;&quot;</span>+request.getContextPath()+<span class="string">&quot;/manager/safe/removeEmpController?id=&quot;</span>+emp.getId()+<span class="string">&quot;&#x27;&gt;删除&lt;a&gt;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;               &lt;td&gt;&lt;a href=&#x27;&quot;</span>+request.getContextPath()+<span class="string">&quot;/manager/safe/showEmpController?id=&quot;</span>+emp.getId()+<span class="string">&quot;&#x27;&gt;修改&lt;/a&gt;&lt;/td&gt;&quot;</span>);</span><br><span class="line">            printWriter.println(<span class="string">&quot;           &lt;/tr&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;/table&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;/body&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="16-5-3-权限验证过滤器"><a href="#16-5-3-权限验证过滤器" class="headerlink" title="16.5.3 权限验证过滤器"></a>16.5.3 权限验证过滤器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.EmpManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/manager/safe/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">EmpManager</span> <span class="variable">empManager</span> <span class="operator">=</span> (EmpManager)session.getAttribute(<span class="string">&quot;empManager&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(empManager!=<span class="literal">null</span>)&#123;<span class="comment">//登录过</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="16-5-4-字符编码过滤器"><a href="#16-5-4-字符编码过滤器" class="headerlink" title="16.5.4 字符编码过滤器"></a>16.5.4 字符编码过滤器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/manager/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="16-6-删除员工功能"><a href="#16-6-删除员工功能" class="headerlink" title="16.6 删除员工功能"></a>16.6 删除员工功能</h4><h5 id="16-6-1-删除员工Controller"><a href="#16-6-1-删除员工Controller" class="headerlink" title="16.6.1 删除员工Controller"></a>16.6.1 删除员工Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;RemoveEmpController&quot;,value = &quot;/manager/safe/removeEmpController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoveEmpController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        empService.removeEmp(id);</span><br><span class="line"></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/manager/safe/showAllEmpController&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="16-7-修改员工功能"><a href="#16-7-修改员工功能" class="headerlink" title="16.7 修改员工功能"></a>16.7 修改员工功能</h4><h5 id="16-7-1-查询单个员工Controller"><a href="#16-7-1-查询单个员工Controller" class="headerlink" title="16.7.1 查询单个员工Controller"></a>16.7.1 查询单个员工Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ShowEmpController&quot;,value = &quot;/manager/safe/showEmpController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowEmpController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceImpl</span>();</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empService.showEmp(id);</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;emp&quot;</span>,emp);</span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/manager/safe/showUpdateEmpInfoJSP&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="16-7-2-显示修改页面JSP"><a href="#16-7-2-显示修改页面JSP" class="headerlink" title="16.7.2 显示修改页面JSP"></a>16.7.2 显示修改页面JSP</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ShowUpdateEmpInfoController&quot;,value = &quot;/manager/safe/showUpdateEmpInfoJSP&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowUpdateEmpInfoController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> (Emp)request.getAttribute(<span class="string">&quot;emp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        printWriter.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;head&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;title&gt;修改员工信息页面&lt;/title&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;/head&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;body&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;form action=&#x27;/empproject/manager/safe/updateEmpController&#x27; method=&#x27;post&#x27;&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       编号：&lt;input type=&#x27;text&#x27; name=&#x27;id&#x27; value=&#x27;&quot;</span>+emp.getId()+<span class="string">&quot;&#x27; readonly/&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       姓名：&lt;input type=&#x27;text&#x27; name=&#x27;name&#x27; value=&#x27;&quot;</span>+emp.getName()+<span class="string">&quot;&#x27;/&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       工资：&lt;input type=&#x27;text&#x27; name=&#x27;salary&#x27; value=&#x27;&quot;</span>+emp.getSalary()+<span class="string">&quot;&#x27;/&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       年龄：&lt;input type=&#x27;text&#x27; name=&#x27;age&#x27; value=&#x27;&quot;</span>+emp.getAge()+<span class="string">&quot;&#x27;/&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;input type=&#x27;submit&#x27;  value=&#x27;修改&#x27;/&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;       &lt;/form&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;   &lt;/body&gt;&quot;</span>);</span><br><span class="line">        printWriter.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="16-7-3-修改员工信息Controller"><a href="#16-7-3-修改员工信息Controller" class="headerlink" title="16.7.3 修改员工信息Controller"></a>16.7.3 修改员工信息Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.emp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.emp.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> com.qf.emp.service.impl.EmpServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UpdateEmpController&quot;,value = &quot;/manager/safe/updateEmpController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateEmpController</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.收参</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">salary</span> <span class="operator">=</span> Double.valueOf(request.getParameter(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(id,name,salary,age);</span><br><span class="line"></span><br><span class="line">        <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceImpl</span>();</span><br><span class="line">        empService.modify(emp);</span><br><span class="line"></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/manager/safe/showAllEmpController&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2023/04/13/SpringBoot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />




    <div id="aplayer-upgMqEdV" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130807298.png" alt="1587372890081"></p>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-初始化配置"><a href="#1-1-初始化配置" class="headerlink" title="1.1 初始化配置"></a>1.1 初始化配置</h4><blockquote>
<p>为了使用SSM框架去开发，准备SSM框架的模板配置。</p>
</blockquote>
<h4 id="1-2-整合第三方框架"><a href="#1-2-整合第三方框架" class="headerlink" title="1.2 整合第三方框架"></a>1.2 整合第三方框架</h4><blockquote>
<p>为了Spring整合第三方框架，单独的去编写xml文件。</p>
</blockquote>
<h4 id="1-3-后期维护"><a href="#1-3-后期维护" class="headerlink" title="1.3 后期维护"></a>1.3 后期维护</h4><blockquote>
<p>后期SSM项目后期xml文件特别多，维护xml文件的成本是很高的</p>
</blockquote>
<h4 id="1-4-部署工程"><a href="#1-4-部署工程" class="headerlink" title="1.4 部署工程"></a>1.4 部署工程</h4><blockquote>
<p>SSM工程部署也是很麻烦，依赖第三方的容器</p>
</blockquote>
<h4 id="1-5-敏捷式开发"><a href="#1-5-敏捷式开发" class="headerlink" title="1.5 敏捷式开发"></a>1.5 敏捷式开发</h4><blockquote>
<p>基于Java的SSM开发方式是很笨重，而现在的python，php，NodeJS的敏捷式开发已经盖过Java一头</p>
</blockquote>
<h4 id="1-6-约定大于配置"><a href="#1-6-约定大于配置" class="headerlink" title="1. 6 约定大于配置"></a>1. 6 约定大于配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.如果没有自主配置 就走默认配置</span><br><span class="line">2.如果默认配置不满足要求 就自定义配置 (局部)</span><br></pre></td></tr></table></figure>

<h4 id="1-7-内置tomcat"><a href="#1-7-内置tomcat" class="headerlink" title="1.7 内置tomcat"></a>1.7 内置tomcat</h4><h3 id="二、SpringBoot介绍"><a href="#二、SpringBoot介绍" class="headerlink" title="二、SpringBoot介绍"></a>二、SpringBoot介绍</h3><hr>
<blockquote>
<p>SpringBoot是由Pivotal团队研发的，SpringBoot并不是一门新技术，只是将之前常用的Spring，SpringMVC，data-jpa等常用的框架封装到了一起，帮助你隐藏这些框架的整合细节，实现敏捷开发。</p>
<p>SpringBoot就是一个工具集。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">LOGO</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130807381.png" alt="1587375104537"></td>
</tr>
</tbody></table>
<blockquote>
<p>SpringBoot特点：</p>
<ul>
<li>SpringBoot项目不需要模板化的配置。</li>
<li>SpringBoot中整合第三方框架时，只需要导入相应的starter依赖包，就自动整合了。</li>
<li>SpringBoot默认只有一个.properties的配置文件，不推荐使用xml，后期会采用.java的文件去编写配置信息。</li>
<li>SpringBoot工程在部署时，采用的是jar包的方式，内部自动依赖Tomcat容器，提供了多环境的配置。</li>
<li>后期要学习的微服务框架SpringCloud需要建立在SpringBoot的基础上。</li>
</ul>
</blockquote>
<h3 id="三、SpringBoot快速入门【重点】"><a href="#三、SpringBoot快速入门【重点】" class="headerlink" title="三、SpringBoot快速入门【重点】"></a>三、SpringBoot快速入门【<code>重点</code>】</h3><hr>
<h4 id="3-1-快速构建SpringBoot"><a href="#3-1-快速构建SpringBoot" class="headerlink" title="3.1 快速构建SpringBoot"></a>3.1 快速构建SpringBoot</h4><h5 id="3-1-1-选择构建项目的类型"><a href="#3-1-1-选择构建项目的类型" class="headerlink" title="3.1.1 选择构建项目的类型"></a>3.1.1 选择构建项目的类型</h5><table>
<thead>
<tr>
<th align="center">选择构建项目的类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130807528.png" alt="1587376646848"></td>
</tr>
</tbody></table>
<h5 id="3-1-2-项目的描述"><a href="#3-1-2-项目的描述" class="headerlink" title="3.1.2 项目的描述"></a>3.1.2 项目的描述</h5><table>
<thead>
<tr>
<th>项目的描述</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130808412.png" alt="1587376752337"></td>
</tr>
</tbody></table>
<h5 id="3-1-3-指定-SpringBoot版本和需要的依赖"><a href="#3-1-3-指定-SpringBoot版本和需要的依赖" class="headerlink" title="3.1.3 指定 SpringBoot版本和需要的依赖"></a>3.1.3 指定 SpringBoot版本和需要的依赖</h5><table>
<thead>
<tr>
<th align="center">指定SpringBoot版本和需要的依赖</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130808365.png" alt="1587376825501"></td>
</tr>
</tbody></table>
<h5 id="3-1-4-导入依赖"><a href="#3-1-4-导入依赖" class="headerlink" title="3.1.4 导入依赖"></a>3.1.4 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将上述内容修改为下面的效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3-1-5-编写了Controller"><a href="#3-1-5-编写了Controller" class="headerlink" title="3.1.5 编写了Controller"></a>3.1.5 编写了Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-1-6-测试"><a href="#3-1-6-测试" class="headerlink" title="3.1.6 测试"></a>3.1.6 测试</h5><table>
<thead>
<tr>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130808294.png" alt="1587377297358"></td>
</tr>
</tbody></table>
<h4 id="3-2-SpringBoot的目录结构"><a href="#3-2-SpringBoot的目录结构" class="headerlink" title="3.2 SpringBoot的目录结构"></a>3.2 SpringBoot的目录结构</h4><h5 id="3-2-1-pom-xml文件"><a href="#3-2-1-pom-xml文件" class="headerlink" title="3.2.1 pom.xml文件"></a>3.2.1 pom.xml文件</h5><blockquote>
<ul>
<li>指定了一个父工程： 指定当前工程为SpringBoot，帮助我们声明了starter依赖的版本。</li>
<li>项目的元数据：包名，项目名，版本号。</li>
<li>指定了properties信息：指定了java的版本为1.8</li>
<li>导入依赖：默认情况导入spring-boot-starter，spring-boot-starter-test</li>
<li>插件：spring-boot-maven-plugin</li>
</ul>
</blockquote>
<h5 id="3-2-2-gitignore文件"><a href="#3-2-2-gitignore文件" class="headerlink" title="3.2.2 .gitignore文件"></a>3.2.2 .gitignore文件</h5><blockquote>
<p>默认帮我们忽略了一些文件和目录，避免提交到Git仓库中</p>
</blockquote>
<h5 id="3-2-3-src目录"><a href="#3-2-3-src目录" class="headerlink" title="3.2.3 src目录"></a>3.2.3 src目录</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">-src</span><br><span class="line">  -main	  </span><br><span class="line">    -java</span><br><span class="line">      -包名</span><br><span class="line">        启动类.java			# 需要将controller类，放在启动类的子包中或者同级包下</span><br><span class="line">    -resources</span><br><span class="line">      -static				  # 存放静态资源的</span><br><span class="line">      -templates			   # 存储模板页面的</span><br><span class="line">      application.properties	 # SpringBoot提供的唯一的配置文件</span><br><span class="line">  -test   				      # 只是为了测试用的</span><br></pre></td></tr></table></figure>



<h4 id="3-3-SpringBoot三种启动方式"><a href="#3-3-SpringBoot三种启动方式" class="headerlink" title="3.3 SpringBoot三种启动方式"></a>3.3 SpringBoot三种启动方式</h4><h5 id="3-3-1-运行启动类的main方法"><a href="#3-3-1-运行启动类的main方法" class="headerlink" title="3.3.1 运行启动类的main方法"></a>3.3.1 运行启动类的main方法</h5><blockquote>
<p>运行main方法即可</p>
</blockquote>
<h5 id="3-3-2-maven命令"><a href="#3-3-2-maven命令" class="headerlink" title="3.3.2 maven命令"></a>3.3.2 maven命令</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure>



<h5 id="3-3-3-采用jar包的方式运行"><a href="#3-3-3-采用jar包的方式运行" class="headerlink" title="3.3.3 采用jar包的方式运行"></a>3.3.3 采用jar包的方式运行</h5><blockquote>
<p>将当前项目打包成一个jar文件，并通过java -jar jar文件</p>
</blockquote>
<h3 id="四、SpringBoot常用注解【重点】"><a href="#四、SpringBoot常用注解【重点】" class="headerlink" title="四、SpringBoot常用注解【重点】"></a>四、SpringBoot常用注解【<code>重点</code>】</h3><hr>
<h4 id="4-1-Configuration和-Bean"><a href="#4-1-Configuration和-Bean" class="headerlink" title="4.1 @Configuration和@Bean"></a>4.1 @Configuration和@Bean</h4><blockquote>
<ul>
<li><p>之前使用SSM去开发时，在xml文件中编写bean标签，但是SpringBoot不推荐使用xml文件。</p>
</li>
<li><p>@Configuration注解相当于beans标签</p>
</li>
<li><p>@Bean注解相当于bean标签</p>
</li>
<li><p>id&#x3D;“方法名 | 注解中的name属性（优先级更高）”</p>
</li>
<li><p>class&#x3D;“方法的返回结果”</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">// 代表当前类是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = &quot;user1&quot;)</span>       <span class="comment">// 构建一个实例，放到spring容器中</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;beans ....&gt;            @Configuration</span></span><br><span class="line"><span class="comment">        &lt;bean id=&quot;user1&quot; class=&quot;com.qf.firstspringboot.entity.User&quot; /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/beans&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-SpringBootApplication"><a href="#4-2-SpringBootApplication" class="headerlink" title="4.2 @SpringBootApplication"></a>4.2 @SpringBootApplication</h4><blockquote>
<p>@SpringBootApplication就是一个组合注解：</p>
<ul>
<li>@SpringBootConfiguration就是@Configuration注解，代表启动类就是一个配置类。</li>
<li>@EnableAutoConfiguration帮你实现自动装配的，SpringBoot工程启动时，运行一个SpringFactoriesLoader的类通过load方法，以for循环的方式，一个一个加载。，加载META-INF&#x2F;spring.factories配置类（已经开启的）。<ul>
<li>好处：无需编写大量的整合配置信息，只需要按照SpringBoot提供好了约定去整合即可。</li>
<li>坏处：如果说你导入了一个starter依赖，那么你就需要填写他必要的配置信息。</li>
<li>手动关闭自动装配指定内容：@SpringBootApplication(exclude &#x3D; QuartzAutoConfiguration.class)</li>
</ul>
</li>
<li>@ComponentScan就相当于&lt;context:component-scan basePackage&#x3D;“包名” &#x2F;&gt;，帮助扫描注解的。</li>
</ul>
</blockquote>
<h3 id="五、SpringBoot常用配置【重点】"><a href="#五、SpringBoot常用配置【重点】" class="headerlink" title="五、SpringBoot常用配置【重点】"></a>五、SpringBoot常用配置【<code>重点</code>】</h3><hr>
<h4 id="5-1-SpringBoot的配置文件格式"><a href="#5-1-SpringBoot的配置文件格式" class="headerlink" title="5.1 SpringBoot的配置文件格式"></a>5.1 SpringBoot的配置文件格式</h4><blockquote>
<p>SpringBoot的配置文件支持properties和yml，甚至他还支持json。</p>
<p>更推荐使用yml文件格式：</p>
<ol>
<li><p>yml文件，会根据换行和缩进帮助咱们管理配置文件所在位置</p>
<ol start="2">
<li>yml文件，相比properties更轻量级一些</li>
</ol>
</li>
</ol>
<p>yml文件的劣势：</p>
<ol>
<li><p>严格遵循换行和缩进</p>
<ol start="2">
<li>在填写value时，一定要在: 后面跟上空格</li>
</ol>
</li>
</ol>
</blockquote>
<h4 id="5-2-多环境配置"><a href="#5-2-多环境配置" class="headerlink" title="5.2 多环境配置"></a>5.2 多环境配置</h4><blockquote>
<p>在application.yml文件中添加一个配置项：</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">环境名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在resource目录下，创建多个application-环境名.yml文件即可</p>
<p>在部署工程时，通过 java -jar jar文件 –spring.profiles.active&#x3D;环境</p>
</blockquote>
<h4 id="5-3-引入外部配置文件信息"><a href="#5-3-引入外部配置文件信息" class="headerlink" title="5.3 引入外部配置文件信息"></a>5.3 引入外部配置文件信息</h4><blockquote>
<p>和传统的SSM方式一样，通过@Value的注解去获取properties&#x2F;yml文件中的内容。</p>
<p>如果在yml文件中需要编写大量的自定义配置，并且具有统一的前缀时，采用如下方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java程序</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String xxxx;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> ... ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line">aliyun:</span><br><span class="line">  : xxxxxxxxx</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="5-4-热加载"><a href="#5-4-热加载" class="headerlink" title="5.4 热加载"></a>5.4 热加载</h4><h5 id="5-4-1-导入依赖"><a href="#5-4-1-导入依赖" class="headerlink" title="5.4.1 导入依赖"></a>5.4.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="5-4-2-settings配置"><a href="#5-4-2-settings配置" class="headerlink" title="5.4.2 settings配置"></a>5.4.2 settings配置</h5><table>
<thead>
<tr>
<th align="center">修改settings中的配置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130809746.png" alt="1587449894048"></td>
</tr>
</tbody></table>
<h5 id="5-4-3-重新构建工程"><a href="#5-4-3-重新构建工程" class="headerlink" title="5.4.3 重新构建工程"></a>5.4.3 重新构建工程</h5><table>
<thead>
<tr>
<th align="center">build</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130809028.png" alt="1587449931902"></td>
</tr>
</tbody></table>
<h3 id="六、SpringBoot整合Mybatis【重点】"><a href="#六、SpringBoot整合Mybatis【重点】" class="headerlink" title="六、SpringBoot整合Mybatis【重点】"></a>六、SpringBoot整合Mybatis【<code>重点</code>】</h3><hr>
<h4 id="6-1-xml方式整合Mybatis"><a href="#6-1-xml方式整合Mybatis" class="headerlink" title="6.1 xml方式整合Mybatis"></a>6.1 xml方式整合Mybatis</h4><blockquote>
<p>xml方式在编写复杂SQL时，更适合</p>
</blockquote>
<h5 id="6-1-1-导入依赖。"><a href="#6-1-1-导入依赖。" class="headerlink" title="6.1.1 导入依赖。"></a>6.1.1 导入依赖。</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        druid连接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="6-1-2-编写配置文件"><a href="#6-1-2-编写配置文件" class="headerlink" title="6.1.2 编写配置文件"></a>6.1.2 编写配置文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Air</span>  <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer districtId;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> java.util.Date monitorTime;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer pm10;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer pm25;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String monitoringStation;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> java.util.Date lastModifyTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ================================================</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span>  <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-1-3-准备Mybatis"><a href="#6-1-3-准备Mybatis" class="headerlink" title="6.1.3 准备Mybatis"></a>6.1.3 准备Mybatis</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AirMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Air&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 在启动类中添加直接，扫描Mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.qf.firstspringboot.mapper&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 准备映射文件</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.qf.firstspringboot.mapper.AirMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    List&lt;Air&gt; <span class="title function_">findAll</span><span class="params">()</span>;--&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultType=<span class="string">&quot;Air&quot;</span>&gt;</span><br><span class="line">        select * from air</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. yml文件</span></span><br><span class="line">&lt;!-- 添加yml文件配置信息 --&gt;</span><br><span class="line"># mybatis配置</span><br><span class="line">mybatis:</span><br><span class="line">  # 扫描映射文件</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  # 配置别名扫描的包</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.qf.firstspringboot.entity</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    # 开启驼峰映射配置</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment"># 连接数据库的信息</span></span><br><span class="line"><span class="comment">spring:</span></span><br><span class="line"><span class="comment">  datasource:</span></span><br><span class="line"><span class="comment">    driver-class-name: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">    url: jdbc:mysql:///air?serverTimezone=UTC</span></span><br><span class="line"><span class="comment">    username: root</span></span><br><span class="line"><span class="comment">    password: root</span></span><br><span class="line"><span class="comment">    type: com.alibaba.druid.pool.DruidDataSource    </span></span><br></pre></td></tr></table></figure>





<h5 id="6-1-4-测试。"><a href="#6-1-4-测试。" class="headerlink" title="6.1.4 测试。"></a>6.1.4 测试。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AirMapperTest</span> <span class="keyword">extends</span> <span class="title class_">FirstSpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AirMapper airMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Air&gt; list = airMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Air air : list) &#123;</span><br><span class="line">            System.out.println(air);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-2-注解方式整合Mybatis"><a href="#6-2-注解方式整合Mybatis" class="headerlink" title="6.2 注解方式整合Mybatis"></a>6.2 注解方式整合Mybatis</h4><blockquote>
<p>注解方式在编写配置简单，简单SQL推荐使用</p>
</blockquote>
<h5 id="6-2-1-创建District的Mapper接口"><a href="#6-2-1-创建District的Mapper接口" class="headerlink" title="6.2.1 创建District的Mapper接口"></a>6.2.1 创建District的Mapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DistrictMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;District&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-2-添加Mybatis注解"><a href="#6-2-2-添加Mybatis注解" class="headerlink" title="6.2.2 添加Mybatis注解"></a>6.2.2 添加Mybatis注解</h5><blockquote>
<p>针对增删改查：@Insert，@Delete，@Update，@Select</p>
<p>还是需要在启动类中添加@MapperScan注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from district&quot;)</span></span><br><span class="line">List&lt;District&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from district where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">District <span class="title function_">findOneById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-3-添加配置"><a href="#6-2-3-添加配置" class="headerlink" title="6.2.3 添加配置"></a>6.2.3 添加配置</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">yml文件</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.qf.firstspringboot.mapper:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>



<h5 id="6-2-4-测试，查看日志"><a href="#6-2-4-测试，查看日志" class="headerlink" title="6.2.4 测试，查看日志"></a>6.2.4 测试，查看日志</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DistrictMapperTest</span> <span class="keyword">extends</span> <span class="title class_">FirstSpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistrictMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;District&gt; list = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (District district : list) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findOneById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">District</span> <span class="variable">district</span> <span class="operator">=</span> mapper.findOneById(<span class="number">5</span>);</span><br><span class="line">        System.out.println(district);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-3-SpringBoot整合分页助手"><a href="#6-3-SpringBoot整合分页助手" class="headerlink" title="6.3 SpringBoot整合分页助手"></a>6.3 SpringBoot整合分页助手</h4><h5 id="6-3-1-导入依赖"><a href="#6-3-1-导入依赖" class="headerlink" title="6.3.1 导入依赖"></a>6.3.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        pageHelper依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="6-3-2-测试使用"><a href="#6-3-2-测试使用" class="headerlink" title="6.3.2 测试使用"></a>6.3.2 测试使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 执行分页</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行查询</span></span><br><span class="line">    List&lt;Air&gt; list = airMapper.findAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 封装PageInfo对象</span></span><br><span class="line">    PageInfo&lt;Air&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 输出</span></span><br><span class="line">    <span class="keyword">for</span> (Air air : pageInfo.getList()) &#123;</span><br><span class="line">        System.out.println(air);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="七、SpringBoot整合JSP"><a href="#七、SpringBoot整合JSP" class="headerlink" title="七、SpringBoot整合JSP"></a>七、SpringBoot整合JSP</h3><hr>
<h4 id="7-1-需要导入依赖"><a href="#7-1-需要导入依赖" class="headerlink" title="7.1 需要导入依赖"></a>7.1 需要导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        JSP核心引擎依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        JSTL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-2-创建JSP页面"><a href="#7-2-创建JSP页面" class="headerlink" title="7.2 创建JSP页面"></a>7.2 创建JSP页面</h4><table>
<thead>
<tr>
<th align="center">创建webapp以及WEB-INF去存放JSP页面</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130809074.png" alt="1587467971330"></td>
</tr>
</tbody></table>
<h4 id="7-3-创建Contorller"><a href="#7-3-创建Contorller" class="headerlink" title="7.3 创建Contorller"></a>7.3 创建Contorller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-配置前缀和后缀"><a href="#7-4-配置前缀和后缀" class="headerlink" title="7.4 配置前缀和后缀"></a>7.4 配置前缀和后缀</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="comment"># 视图的前缀和后缀</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/WEB-INF/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure>



<h3 id="八、SpringBoot练习"><a href="#八、SpringBoot练习" class="headerlink" title="八、SpringBoot练习"></a>八、SpringBoot练习</h3><hr>
<blockquote>
<p>页面查询客户信息从ES中查询</p>
<p>完成客户模块的增删改，并且同步到ES中。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">练习业务图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130809863.png" alt="1587569236813"></td>
</tr>
</tbody></table>
<h2 id="九、Springboot-整合thymeleaf"><a href="#九、Springboot-整合thymeleaf" class="headerlink" title="九、Springboot 整合thymeleaf"></a>九、Springboot 整合thymeleaf</h2><p><strong>1.引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ThymeLeaf 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.添加配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###ThymeLeaf配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="comment">#模板的模式，支持 HTML, XML TEXT JAVASCRIPT</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">    <span class="comment">#编码 可不用配置</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment">#内容类别,可不用配置</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="comment">#开发配置为false,避免修改模板还要重启服务器</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>html</title>
    <url>/2023/04/13/html/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-tiwjKZCx" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1-结构标签"><a href="#1-结构标签" class="headerlink" title="1 结构标签"></a>1 结构标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>:根标签</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>:网页头部标签</span><br><span class="line"></span><br><span class="line">​      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>:页面的标题</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>:网页主体标签</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="body主体属性："><a href="#body主体属性：" class="headerlink" title="body主体属性："></a>body主体属性：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    body 中可以定义属性，属性写法有点类似key value结构</span></span><br><span class="line"><span class="comment">    属性名 = “属性值”</span></span><br><span class="line"><span class="comment">    text  用来指定正文中文字的颜色</span></span><br><span class="line"><span class="comment">    bgclolor: 用来指定网页的背景色</span></span><br><span class="line"><span class="comment">    background 用来指定背景图片 </span></span><br><span class="line"><span class="comment">  http_equiv: http协议的头部信息</span></span><br><span class="line"><span class="comment">        content: http协议头部信息的值</span></span><br><span class="line"><span class="comment">        http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; 用来指定浏览器的渲染模式</span></span><br></pre></td></tr></table></figure>

<h2 id="2-排版标签"><a href="#2-排版标签" class="headerlink" title="2 排版标签"></a>2 排版标签</h2><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">排版标签：</span></span><br><span class="line"><span class="comment">	换行标签：&lt; br&gt;</span></span><br><span class="line"><span class="comment">	段落标签：&lt; p&gt;文本文字&lt;/ p&gt; </span></span><br><span class="line"><span class="comment">		特点：段与段之间有空行</span></span><br><span class="line"><span class="comment">		属性：align对齐方式(left、center、right)  </span></span><br><span class="line"><span class="comment">	水平标签： &lt;hr/&gt;</span></span><br><span class="line"><span class="comment">		属性:   </span></span><br><span class="line"><span class="comment">		width：水平线的长度(两种:第一种:像素表示；第二种，百分比表示) </span></span><br><span class="line"><span class="comment">		size: 水平线的粗细 (像素表示，例如：10px)                             </span></span><br><span class="line"><span class="comment">		color:水平线的颜色                                  </span></span><br><span class="line"><span class="comment">		align:水平线的对齐方式	</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">     室友游戏已疯磨，手机一拿就开擼。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     王者荣耀是虚幻，苦口婆心如风过。</span><br><span class="line"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">     无奈解衣独自睡，三更五更何时眠?<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     夜半一吼忽乍醒，你妈他妈还在战!</span><br><span class="line"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> &gt;</span> </span><br><span class="line">     寻声问他为何怒，愤言队里有猪友。</span><br><span class="line">     <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;30px&quot;</span> <span class="attr">color</span>=<span class="string">&quot;yellow&quot;</span> <span class="attr">width</span>=<span class="string">&quot;35%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">     排位被逼到末位，决意开黑至天明。</span><br><span class="line"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">     别无他法拔WiFi,竟切流量接着擼。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     摇头叹息继续睡，望君明日别趴桌。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130811972.png" alt="image-20221128164130489"></p>
<h2 id="3-块标签"><a href="#3-块标签" class="headerlink" title="3 块标签"></a>3 块标签</h2><h3 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--		块标签：使用CSS+DIV是现下流行的一种布局方式</span></span><br><span class="line"><span class="comment">			div:行级块标签，独占一行，换行</span></span><br><span class="line"><span class="comment">			span:行内块标签，所有内容都在同一行</span></span><br><span class="line"><span class="comment">           设置div 100px 100px 背景色yellow </span></span><br><span class="line"><span class="comment">			sytle属性</span></span><br><span class="line"><span class="comment">			style = &quot;属性名1:属性值1;属性名2:属性值2;.....&quot;</span></span><br><span class="line"><span class="comment">			width:宽度</span></span><br><span class="line"><span class="comment">			height:高度</span></span><br><span class="line"><span class="comment">			background-color:背景色	</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 鲁班七号射术强，一把小枪走天下<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>推塔守家最在行，只是腿短跑得慢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: yellow;&quot;</span>&gt;</span></span><br><span class="line">    团战有他帮助大，最怕没塔又太浪</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span> </span><br><span class="line">        加速闪身你选谁，逃命要紧你别闹<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span></span><br><span class="line">        打龙要快还靠他，水晶血厚三两炮 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        我来也！</span><br></pre></td></tr></table></figure>

<h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812513.png" alt="image-20221128164552579"></p>
<h2 id="4-基本文字标签"><a href="#4-基本文字标签" class="headerlink" title="4 基本文字标签"></a>4 基本文字标签</h2><h3 id="基本文字标签"><a href="#基本文字标签" class="headerlink" title="基本文字标签"></a>基本文字标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		基本文字标签：font标签处理网页中文字的显示方式</span></span><br><span class="line"><span class="comment">			属性：</span></span><br><span class="line"><span class="comment">				size: 用于设置字体的大小，最小1号，最大7号</span></span><br><span class="line"><span class="comment">				color : 用于设置字体的颜色</span></span><br><span class="line"><span class="comment">				face: 用于设置字体的样式</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>少用刺客多用肉，学会打钱别拖后。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span> <span class="attr">face</span>=<span class="string">&quot;仿宋&quot;</span>&gt;</span> 抓人推塔两不误，不要乱晃成酱油。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>团战时候要勇敢，关键时候救队友。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">要是局势特别差，龟缩守塔别冲动。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;1&quot;</span>&gt;</span>顺风拿龙抢节奏，逆风草丛埋伏偷。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">2</span>&gt;</span>没有最强的英雄，只有最好的队友。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span>无论何时莫泄气，坚持不懈到最后。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>= <span class="string">&quot;4&quot;</span>&gt;</span>逆风莫要喷队友，顺风不要浪过头。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span>&gt;</span>抓住机会打赢团，一拨推掉胜利有。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812149.png" alt="image-20221128164740940"></p>
<h2 id="5-文字格式化标签"><a href="#5-文字格式化标签" class="headerlink" title="5 文字格式化标签"></a>5 文字格式化标签</h2><h3 id="文字格式化标签"><a href="#文字格式化标签" class="headerlink" title="文字格式化标签"></a>文字格式化标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--b: 粗体标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--strong: 粗体标签 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--em: 强调字体 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--i: 斜体 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--small: 小号字体 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--big: 大号字体 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--sub: 下标标签 --&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!--sup: 上标标签 --&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--del: 删除线 --&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 加粗 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>少用刺客多用肉，学会打钱别拖后。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     抓人推塔两不误，不要乱晃成酱油。<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">enum</span>&gt;</span>团战时候要勇敢，关键时候救队友。<span class="tag">&lt;/<span class="name">enum</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     要是局势特别差，龟缩守塔别冲动。<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span> 顺风拿龙抢节奏，逆风草丛埋伏偷。<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">big</span>&gt;</span>没有最强的英雄，只有最好的队友。<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     无论何时莫泄气，坚持不懈到最后。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     逆风莫要喷队友，顺风不要浪过头。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     抓住机会打赢团，一拨推掉胜利有。<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     log<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>8 = 3<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">del</span>&gt;</span>过时的单词，语法<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">del</span>&gt;</span>不建使用的<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130811703.png" alt="image-20221128164923691"></p>
<h2 id="6-列表标签（清单标签）"><a href="#6-列表标签（清单标签）" class="headerlink" title="6 列表标签（清单标签）"></a>6 列表标签（清单标签）</h2><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     无序列表:使用一组无序的符号定义， &lt; ul&gt;&lt;li&gt;&lt;/li&gt;&lt; /ul&gt;</span></span><br><span class="line"><span class="comment">         type:属性指定列表前边的样式，属性值如下：</span></span><br><span class="line"><span class="comment">             circle:空心圆</span></span><br><span class="line"><span class="comment">             disc:实心圆</span></span><br><span class="line"><span class="comment">             square:黑色方块</span></span><br><span class="line"><span class="comment">有序列表:使用一组有序的符号定义，  &lt; ol&gt;&lt;/ol&gt;</span></span><br><span class="line"><span class="comment">         type:属性指定列表前边的样式，属性值如下：</span></span><br><span class="line"><span class="comment">             1:数字类型</span></span><br><span class="line"><span class="comment">             A:大写字母类型</span></span><br><span class="line"><span class="comment">             a:小写字母类型</span></span><br><span class="line"><span class="comment">             I:大写古罗马</span></span><br><span class="line"><span class="comment">             i:小写古罗马</span></span><br><span class="line"><span class="comment">     --&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你喜欢的历史人物</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>曹操<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>嬴政<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>李世民<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> 你选女朋友的标准</span><br><span class="line">     <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>有钱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阔错<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>身材好<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812574.png" alt="image-20221128165202043"></p>
<h2 id="7-图像标签"><a href="#7-图像标签" class="headerlink" title="7 图像标签"></a>7 图像标签</h2><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在页面指定位置处中引入一幅图片， &lt; img /&gt;</span></span><br><span class="line"><span class="comment">	属性：</span></span><br><span class="line"><span class="comment">		src:引入图片的地址</span></span><br><span class="line"><span class="comment">		width:图片的宽度</span></span><br><span class="line"><span class="comment">		height:图片的高度</span></span><br><span class="line"><span class="comment">		border:图片的边框</span></span><br><span class="line"><span class="comment">		align:与图片对齐显示方式,比如文字与图片</span></span><br><span class="line"><span class="comment">		alt:提示信息</span></span><br><span class="line"><span class="comment">		hspace:在图片左右设定空白</span></span><br><span class="line"><span class="comment">		vspace:在图片的上下设定空白</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/3.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;31%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">vspace</span>=<span class="string">&quot;100px&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/4.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;31%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">vspace</span>=<span class="string">&quot;100px&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;31%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">vspace</span>=<span class="string">&quot;100px&quot;</span> /&gt;</span>  </span><br></pre></td></tr></table></figure>

<h3 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812628.png" alt="image-20221128165346467"></p>
<h2 id="8链接标签"><a href="#8链接标签" class="headerlink" title="8链接标签"></a>8链接标签</h2><h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">链接标签:在页面中使用链接标签跳转到另一页面:&lt; a href=&quot;&quot;&gt;&lt; /a&gt;</span></span><br><span class="line"><span class="comment">	属性：</span></span><br><span class="line"><span class="comment">		href:跳转页面的地址(跳转到外网需要添加协议)  </span></span><br><span class="line"><span class="comment">		target（目标）:设置跳转页面时的页面打开方式 </span></span><br><span class="line"><span class="comment">			_blank在新窗口中打开</span></span><br><span class="line"><span class="comment">			_self在原空口中打开(默认)</span></span><br><span class="line"><span class="comment">		name: 指向同一页面中指定位置 锚点</span></span><br><span class="line"><span class="comment">			定义位置： &lt; a name=&quot;名称&quot;&gt;&lt; /a&gt;</span></span><br><span class="line"><span class="comment">			指向： &lt; a href=&quot;#名称&quot;&gt;&lt; /a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度2<span class="tag">&lt;/<span class="name">a</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#1.1&quot;</span>&gt;</span>1.1 如何成为一各合格的java程序员<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	xxxx</span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span>如何成为一各合格的java程序员正文如下： <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图：-2"><a href="#效果图：-2" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812531.png" alt="image-20221128165530019"></p>
<h2 id="9-表格标签"><a href="#9-表格标签" class="headerlink" title="9 表格标签"></a>9 表格标签</h2><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	普通表格(table,tr,td)</span></span><br><span class="line"><span class="comment">		&lt;table&gt;</span></span><br><span class="line"><span class="comment">			&lt;tr&gt;</span></span><br><span class="line"><span class="comment">				&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment">			&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">	    &lt;/table&gt;</span></span><br><span class="line"><span class="comment">	表格的列标签(th)：内容有加粗和居中效果</span></span><br><span class="line"><span class="comment">	&lt;table&gt;</span></span><br><span class="line"><span class="comment">		&lt;tr&gt;</span></span><br><span class="line"><span class="comment">			&lt;th&gt;&lt;/th&gt;</span></span><br><span class="line"><span class="comment">		&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">	&lt;/table&gt;</span></span><br><span class="line"><span class="comment">	表格的列合并属性(colspan)：在同一行内同时合并多个列</span></span><br><span class="line"><span class="comment">	&lt;td colspan=&quot;&quot;&gt;&lt;/td&gt; 合并列的时候不影响其他行</span></span><br><span class="line"><span class="comment">	表格的行合并属性(rowspan)：在同一列跨多行合并</span></span><br><span class="line"><span class="comment">	&lt;tr rowspan=&quot;&quot;&gt;&lt;/tr&gt; 合并行的时候不影响其他列</span></span><br><span class="line"><span class="comment">	cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; 设置内外边距</span></span><br><span class="line"><span class="comment">--&gt;</span>   </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellsacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>某某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>某某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>某某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>某某某<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-4"><a href="#效果图-4" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130812782.png" alt="image-20221128184003697"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130813395.png" alt="image-20221129203749653"></p>
<h2 id="10-form表单提交"><a href="#10-form表单提交" class="headerlink" title="10 form表单提交"></a>10 form表单提交</h2><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			表单标签：</span></span><br><span class="line"><span class="comment">			form元素常用属性</span></span><br><span class="line"><span class="comment">				action表示动作，值为服务器的地址，把表单的数据提交到该地址上处理</span></span><br><span class="line"><span class="comment">				method:请求方式：get 和post</span></span><br><span class="line"><span class="comment">					get:</span></span><br><span class="line"><span class="comment">						- 地址栏,请求参数都在地址后拼接 path?name=&quot;张三&quot;&amp;password=&quot;123456&quot;</span></span><br><span class="line"><span class="comment">						- 不安全</span></span><br><span class="line"><span class="comment">						- 效率高</span></span><br><span class="line"><span class="comment">						- get请求大小有限制，不同浏览器有不同，但是大约是2KB；一般情况用于查询数据</span></span><br><span class="line"><span class="comment">					post：</span></span><br><span class="line"><span class="comment">						- 地址栏：请求参数单独处理。</span></span><br><span class="line"><span class="comment">						- 安全可靠些</span></span><br><span class="line"><span class="comment">						- 效率低</span></span><br><span class="line"><span class="comment">						- post请求大小理论上无限；一般用于插入删除修改等操作 </span></span><br><span class="line"><span class="comment">				enctype:表示是表单提交的类型</span></span><br><span class="line"><span class="comment">					-  默认值：application/x-www-form-urlencoded  普通表单</span></span><br><span class="line"><span class="comment">					-  multipart/form-data  多部分表单(一般用于文件上传)​	</span></span><br><span class="line"><span class="comment">              用户名		</span></span><br><span class="line"><span class="comment">				get:表求参数的例子： &amp;分割符</span></span><br><span class="line"><span class="comment">				?username=111&amp;password=222</span></span><br><span class="line"><span class="comment">				post: 请求体</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- input 会有各种属性</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			readonly: 只读属性,不可编辑</span></span><br><span class="line"><span class="comment">		--&gt;</span> </span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- text 单行文体框</span></span><br><span class="line"><span class="comment">			 value 属性  值</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- password 密码框 --&gt;</span></span><br><span class="line">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- radio 单选框</span></span><br><span class="line"><span class="comment">			readonly没起作用</span></span><br><span class="line"><span class="comment">			value： 往后台送的值</span></span><br><span class="line"><span class="comment">			默认选中如 何做？</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		性别： 有两种选择： 要么男要么女，同一组的name要求一样<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span> /&gt;</span>男</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- checkBox 复选框</span></span><br><span class="line"><span class="comment">            checked=&quot;checked&quot;</span></span><br><span class="line"><span class="comment">            选中、没有选中：true（真） false(假)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> 			           <span class="attr">checked</span>=<span class="string">&quot;true&quot;</span> /&gt;</span>篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>/&gt;</span> 足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;排球&quot;</span>/&gt;</span> 排球</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- date  日期框--&gt;</span></span><br><span class="line">        生日<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- time时间框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--datetime日期和时间框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--email电子邮件输入 --&gt;</span></span><br><span class="line">        邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- number数值输入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--file文件上传 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myfile&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- hidden隐藏域</span></span><br><span class="line"><span class="comment">            type=&quot;hidden&quot;</span></span><br><span class="line"><span class="comment">            hidden=&quot;hidden&quot;</span></span><br><span class="line"><span class="comment">            直接在标签中加hidden</span></span><br><span class="line"><span class="comment">        --&gt;</span> </span><br><span class="line">        隐藏域:<span class="tag">&lt;<span class="name">input</span> <span class="attr">hidden</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--range取值范围 --&gt;</span></span><br><span class="line">        取值范围：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- color取色按钮--&gt;</span></span><br><span class="line">        取色按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--submit表单提交按钮</span></span><br><span class="line"><span class="comment">        点击时，会走action</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交2&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- button普通按钮--&gt;</span></span><br><span class="line">        普通按钮：<span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--reset重置按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置2&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- image图片提交按钮--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;25%&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> &gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-5"><a href="#效果图-5" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130813347.png" alt="image-20221130141725279"></p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="11-CSS标签"><a href="#11-CSS标签" class="headerlink" title="11 CSS标签"></a>11 CSS标签</h2><h3 id="方式一：内嵌方式"><a href="#方式一：内嵌方式" class="headerlink" title="方式一：内嵌方式"></a>方式一：内嵌方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用方式一：直接写到标签里</span></span><br><span class="line"><span class="comment">   内嵌方式（内联方式）：把CSS样式嵌入到html标签中，类似属性的用法</span></span><br><span class="line"><span class="comment">   style属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   key:value;</span></span><br><span class="line"><span class="comment">   style=&quot;key:value; key2:value2; key3:value3;&quot;</span></span><br><span class="line"><span class="comment">   style=&quot;属性1：值1；属性2：值2；属性3：值3；&quot; --!&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 6&quot;</span>&gt;</span></span><br><span class="line">    我一个内向的人， 你信不？</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	他一个外向的人， 我们正好互补？</span><br></pre></td></tr></table></figure>

<h3 id="效果图-6"><a href="#效果图-6" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130813527.png" alt="image-20221201093700505"></p>
<h3 id="方拾二：内部方式"><a href="#方拾二：内部方式" class="headerlink" title="方拾二：内部方式"></a>方拾二：内部方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	方式二：内部方式 在head标签中使用style标签引入css</span></span><br><span class="line"><span class="comment">	&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="comment">		p &#123;</span></span><br><span class="line"><span class="comment">   	   			key1:value1;</span></span><br><span class="line"><span class="comment">   	   			key2:value2;</span></span><br><span class="line"><span class="comment">   	   			.....</span></span><br><span class="line"><span class="comment">   	   		&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">   	   			color: yellow;</span><br><span class="line">   	   			font-family: &quot;宋体&quot;;</span><br><span class="line">   	   			font-size: 50px;</span><br><span class="line">   	   		&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		昔人已乘黄鹤去，猥琐不管先发育<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		两岸猿声啼不住，荆轲还我蓝buff<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		枯藤老树昏鸦，残血别浪回家<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		小荷才露尖尖角，别抢兵线好不好<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-7"><a href="#效果图-7" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130813514.png" alt="image-20221201094136639"></p>
<h3 id="方法三：外部方式"><a href="#方法三：外部方式" class="headerlink" title="方法三：外部方式"></a>方法三：外部方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--	</span></span><br><span class="line"><span class="comment">方式三：外部方式</span></span><br><span class="line"><span class="comment">	将css样式抽成一个单独文件，使用者直接引用</span></span><br><span class="line"><span class="comment">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=“div.css&quot;&gt;&lt;/link&gt;</span></span><br><span class="line"><span class="comment">    rel:代表当前页面与href所指定文档的关系</span></span><br><span class="line"><span class="comment">    type:文件类型，告诉浏览器使用css解析器去解析</span></span><br><span class="line"><span class="comment">    href:css文件地址</span></span><br><span class="line"><span class="comment">--!&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/1.css&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>不识庐山真面目，团战一定要撑住<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>万水千山总是情，别单抓我行不行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>天若有情天亦老，别偷塔了好不好<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>葡萄美酒夜光杯，对面残血别乱追<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>		</span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果图：-3"><a href="#效果图：-3" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="F:%5Cjava%E5%AD%A6%E4%B9%A0%5C%E5%8D%83%E5%B3%B0%5C%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%5C%E5%89%8D%E7%AB%AF%5C%E5%9B%BE%E5%83%8F%5Cimage-20221201095057395.png" alt="image-20221201095057395"></p>
<h3 id="方法四：-import方式"><a href="#方法四：-import方式" class="headerlink" title="方法四：@import方式"></a>方法四：@import方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	方式4：</span></span><br><span class="line"><span class="comment">	@import方式</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">  &lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="comment">   @import url(&quot;div.css&quot;)</span></span><br><span class="line"><span class="comment">  &lt;/style&gt;</span></span><br><span class="line"><span class="comment"> 该内容放在head标签中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">link和@import方式的区别：</span></span><br><span class="line"><span class="comment">- link所有浏览器都支持，@import某些版本低的IE不支持</span></span><br><span class="line"><span class="comment">- @import是等待html加载完成才加载</span></span><br><span class="line"><span class="comment">- @import不支持js动态修改</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@import</span> url(<span class="string">&quot;../css/1.css&quot;</span>);</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>风萧萧兮易水寒，家里高地被拆完<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>敌方尚未投降，岂能儿女情长<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>枯藤老树昏鸦，塔没快点回家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果图：-4"><a href="#效果图：-4" class="headerlink" title="效果图："></a>效果图：</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130813713.png" alt="image-20221201095459975"></p>
<h2 id="12-基本选择器"><a href="#12-基本选择器" class="headerlink" title="12 基本选择器"></a>12 基本选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">(1)元素选择器： 标签选择器 </span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明元素选择器:html标签&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">前边学的</span></span><br><span class="line"><span class="comment">(2)</span></span><br><span class="line"><span class="comment">id选择器： 给需要修改样式的html元素添加id属性标识，</span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明id选择器: </span></span><br><span class="line"><span class="comment">#id值&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">(3)class选择器：给需要修改样式的html元素添加class属性标识，</span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明class选择器:  </span></span><br><span class="line"><span class="comment">.class名&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">备注：以上基本选择器的优先级从高到低：id选择器，class选择器，元素选择器</span></span><br><span class="line"><span class="comment">--&gt;</span>	</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	本页面：所有标签，都可以有id属性，相当于myslq的主键，</span></span><br><span class="line"><span class="comment">	表示标签的唯 一性，所以不能重复</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1)元素选择器： 标签选择器 </span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明元素选择器:html标签&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">前边学的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">                <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* id选择器： 给需要修改样式的html元素添加id属性标识，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">在head中使用style标签引入在其中声明id选择器: </span></span></span><br><span class="line"><span class="comment"><span class="language-css">#id值&#123;属性:属性值&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">     */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#a1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#a2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 以上两种方式，都是先有标签，再有 css*/</span>		</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 能不能提前把样式做好，相当于做一个样式库，你用什么从里边取就行 */</span>	</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*(3)class选择器：给需要修改样式的html元素添加class属性标识，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">在head中使用style标签引入在其中声明class选择器:  </span></span></span><br><span class="line"><span class="comment"><span class="language-css">.class名&#123;属性:属性值&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">备注：以上基本选择器的优先级从高到低：id选择器，class选择器，元素选择器</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.aaaa</span> &#123;</span></span><br><span class="line"><span class="language-css">                        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">                        <span class="attribute">font-size</span>: <span class="number">35</span>;</span></span><br><span class="line"><span class="language-css">                    &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">(1)元素选择器： 标签选择器 </span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明元素选择器:html标签&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">前边学的</span></span><br><span class="line"><span class="comment">(2)</span></span><br><span class="line"><span class="comment">id选择器： 给需要修改样式的html元素添加id属性标识，</span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明id选择器: </span></span><br><span class="line"><span class="comment">#id值&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">(3)class选择器：给需要修改样式的html元素添加class属性标识，</span></span><br><span class="line"><span class="comment">在head中使用style标签引入在其中声明class选择器:  </span></span><br><span class="line"><span class="comment">.class名&#123;属性:属性值&#125;</span></span><br><span class="line"><span class="comment">备注：以上基本选择器的优先级从高到低：id选择器，class选择器，元素选择器</span></span><br><span class="line"><span class="comment">--&gt;</span>	</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	本页面：所有标签，都可以有id属性，相当于myslq的主键，</span></span><br><span class="line"><span class="comment">	表示标签的唯 一性，所以不能重复</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		夜阑卧听风吹雨，辅助别把人头取<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>云破越来花弄影，逆风先把兵线清<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>飞流直下三千尺，再不撤退都得死<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;aaaa&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>飞流直下三千尺，再不撤退都得死<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;a4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>飞流直下三千尺，再不撤退都得死<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>众里寻他千百度，，蓦然回首，那人蹲在草丛深处<span class="tag">&lt;/<span class="name">p</span>&gt;</span>	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前端项目大总结</p>
<h3 id="效果图-8"><a href="#效果图-8" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814869.png" alt="image-20221201100139861"></p>
<h2 id="13文本属性-font"><a href="#13文本属性-font" class="headerlink" title="13文本属性-font"></a>13文本属性-font</h2><h3 id="文字属性1"><a href="#文字属性1" class="headerlink" title="文字属性1"></a>文字属性1</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文字属性</span></span><br><span class="line"><span class="comment">font-size:字体大下（数值）PX</span></span><br><span class="line"><span class="comment">font-family:字体（默认、宋体、楷体等设置）</span></span><br><span class="line"><span class="comment">font-weight: 粗体：（100~900数值；bold;bolder）</span></span><br><span class="line"><span class="comment">font-style:斜体（normal正常 italic斜体）</span></span><br><span class="line"><span class="comment">font-variant：normal | small-caps  将小写字母转换为小型的大写字母</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">weight:重量，权重</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-10"><a href="#示例代码-10" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>,<span class="string">&quot;楷体&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-variant</span>: small-caps;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line">        来时好好的，回不去了！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span></span><br><span class="line">        来时好好的，回不去了！ AABBabcdefg</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c3&quot;</span>&gt;</span></span><br><span class="line">        来时好好的，回不去了！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-9"><a href="#效果图-9" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814733.png" alt="image-20221201150433594"></p>
<h3 id="文本属性2"><a href="#文本属性2" class="headerlink" title="文本属性2"></a>文本属性2</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 文本属性： 文本：指标签中间的内容</span></span><br><span class="line"><span class="comment">   color:十六进制；表示颜色的英文单词，设置文本颜色</span></span><br><span class="line"><span class="comment">	text-indent:5px;20%缩进父容器宽度的百分之二十；缩进元素总文本的首行</span></span><br><span class="line"><span class="comment">	text-decoration:none（取消）；underline(下划线)；over(上划线)</span></span><br><span class="line"><span class="comment">	text-align:left;right;center 文本水平对齐方式</span></span><br><span class="line"><span class="comment">	word-spacing:值;固定值；单词之间的间隔（单词）</span></span><br><span class="line"><span class="comment">	line-height:值；固定值；设置文本的行号</span></span><br><span class="line"><span class="comment">	text-shadow:四个取值以此是：水平偏移，垂直偏移，模糊值；阴影颜色</span></span><br><span class="line"><span class="comment">	设置阴影及模糊效果：text-shadow:2px,2px,8px,#ff0000;</span></span><br><span class="line"><span class="comment">	text-decoration-line:line-through; 添加删除线</span></span><br><span class="line"><span class="comment">	text-decoration-color:blue; 设置删除线的颜色</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-indent</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-decoration</span>: blink;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-indent</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">word-spacing</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">8px</span> yellow;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-decoration-line</span>: line-through;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">text-decoration-color</span>: blue;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">           hello world  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">           两岸猿声啼不住，荆轲还我蓝buff</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       枯藤老树昏鸦，残血别浪回家</span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">           小荷才露尖尖角，别抢兵线好不好 hello world</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="效果图：-5"><a href="#效果图：-5" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814017.png" alt="image-20221201192805191"></p>
<h2 id="14背景属性-background"><a href="#14背景属性-background" class="headerlink" title="14背景属性-background"></a>14背景属性-background</h2><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">background-color:设置背景颜色</span></span><br><span class="line"><span class="comment">background-image: url(&#x27;&#x27;)设置背景图片</span></span><br><span class="line"><span class="comment">background-repeat: repeat-y(根据y轴排列) repeat-x(根据x轴排列) repeat no-repeat;设置背景图的平铺方向</span></span><br><span class="line"><span class="comment">background-position:top;bottom;left;right;center 改变图像在背景中的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-11"><a href="#示例代码-11" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .imag1&#123;</span><br><span class="line">              width: 100%; </span><br><span class="line">            height: 800px; </span><br><span class="line">            background-color: red;</span><br><span class="line">            background-image: url(&#x27;../photo/1.jpg&#x27;);</span><br><span class="line">            background-repeat: repeat;</span><br><span class="line">            background-position: center;  <span class="comment">&lt;!-- 改变图像在背景中的位置 --&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imag1&quot;</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        我是一个小兵<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-10"><a href="#效果图-10" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814406.png" alt="image-20221201193456172"></p>
<h2 id="17列表属性"><a href="#17列表属性" class="headerlink" title="17列表属性"></a>17列表属性</h2><h3 id="列表属性-更改列表项的标识类型"><a href="#列表属性-更改列表项的标识类型" class="headerlink" title="列表属性:更改列表项的标识类型"></a>列表属性:更改列表项的标识类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">列表属性</span></span><br><span class="line"><span class="comment">list-style-type:disc 等改变列表的标识类型</span></span><br><span class="line"><span class="comment">circle 空心圆</span></span><br><span class="line"><span class="comment">disc 实心圆</span></span><br><span class="line"><span class="comment">square 黑色方块</span></span><br><span class="line"><span class="comment">list-style-image: url(&#x27;图片地址&#x27;)用图像标识</span></span><br><span class="line"><span class="comment">list-style-position:inside;outside 标识出现在列表项内容之外还是内部</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">list-style-type</span>: square;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">list-style-position</span>: outside; </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: circle;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-position</span>: outside;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c3</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="comment">/* list-style-image: url(&#x27;../photo/1.jpg&#x27;); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style-type</span>: upper-alpha; </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表性2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;c3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-11"><a href="#效果图-11" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814736.png" alt="image-20221201194844835"></p>
<h2 id="18尺寸属性"><a href="#18尺寸属性" class="headerlink" title="18尺寸属性"></a>18尺寸属性</h2><h3 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 尺寸属性</span></span><br><span class="line"><span class="comment">width:设置元素的宽度</span></span><br><span class="line"><span class="comment">height:设置元素的高度</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-12"><a href="#示例代码-12" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img3&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../photo/2.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-12"><a href="#效果图-12" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130814517.png" alt="image-20221201195204073"></p>
<h2 id="19显示属性-display"><a href="#19显示属性-display" class="headerlink" title="19显示属性-display"></a>19显示属性-display</h2><h3 id="显示属性"><a href="#显示属性" class="headerlink" title="显示属性"></a>显示属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">显示属性</span></span><br><span class="line"><span class="comment">显示属性 display,以下是常用取值</span></span><br><span class="line"><span class="comment">none:不显示；隐藏对象及对象内容</span></span><br><span class="line"><span class="comment">block: 块级显示； 有换行作用</span></span><br><span class="line"><span class="comment">inline: 行内显示： 不换行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-13"><a href="#示例代码-13" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.p2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">hidden</span> &gt;</span>你是我的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span>yyyy<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>我是你的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;c3&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;c4&quot;</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-13"><a href="#效果图-13" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130815197.png" alt="image-20221201195512903"></p>
<h2 id="20轮廓属性-外边框-outline"><a href="#20轮廓属性-外边框-outline" class="headerlink" title="20轮廓属性(外边框)-outline"></a>20轮廓属性(外边框)-outline</h2><h3 id="轮廓属性"><a href="#轮廓属性" class="headerlink" title="轮廓属性"></a>轮廓属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--轮廓属性：</span></span><br><span class="line"><span class="comment">   绘制于元素周围的一条线，</span></span><br><span class="line"><span class="comment">   位于边框边缘的外围，可起到突出元素的作用。</span></span><br><span class="line"><span class="comment">   常用属性</span></span><br><span class="line"><span class="comment">       outline-style:solid(实线)/dotted(虚线)/dashed(虚线)等设置轮廓的样式</span></span><br><span class="line"><span class="comment">       outline-color:16进制；用于表示颜色的英文设置轮廓的颜色</span></span><br><span class="line"><span class="comment">       outline-width:数值设置轮廓的宽度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       outline:out 外边 line线</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-14"><a href="#示例代码-14" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.t1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline-style</span>: dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;t1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>不识庐山真面目，团战一定要撑住<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>万水千山总是情，别单抓我行不行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>天若有情天亦老，别偷塔了好不好<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>葡萄美酒夜光杯，对面残血别乱追<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-14"><a href="#效果图-14" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130815450.png" alt="image-20221201195913483"></p>
<h2 id="21浮动属性-float"><a href="#21浮动属性-float" class="headerlink" title="21浮动属性-float"></a>21浮动属性-float</h2><h3 id="浮动属性"><a href="#浮动属性" class="headerlink" title="浮动属性"></a>浮动属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浮动属性：5.8内容 </span></span><br><span class="line"><span class="comment">   float:left /right</span></span><br><span class="line"><span class="comment">   clear 属性：规定元素的哪一侧不允许其他浮动元素,它的取值如下：</span></span><br><span class="line"><span class="comment">   right 在右侧不允许浮动元素</span></span><br><span class="line"><span class="comment">   both在左右两侧均不允许浮动元素</span></span><br><span class="line"><span class="comment">   none 默认值。允许浮动元素出现在两侧</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-15"><a href="#示例代码-15" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div0</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:yellow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">            1111</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">                222</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span></span><br><span class="line">            3333</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-15"><a href="#效果图-15" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130816627.png" alt="image-20221201205041397"></p>
<h2 id="22定位属性-（position-relative）相对定位"><a href="#22定位属性-（position-relative）相对定位" class="headerlink" title="22定位属性-（position-relative）相对定位"></a>22定位属性-（position-relative）相对定位</h2><h3 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">定位属性：position:relative</span></span><br><span class="line"><span class="comment">用left或者 right: 确定元素偏离</span></span><br><span class="line"><span class="comment">相对定位(relative) : 元素框偏移某个距离</span></span><br><span class="line"><span class="comment">元素仍保持其定位前的形状，它原本所占空年间保留</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-16"><a href="#示例代码-16" class="headerlink" title="示例代码"></a>示例代码</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是位于正常位置的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>样式 &quot;left:-20px&quot; 从元素的原始左侧位置减去 20 像素。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>样式 &quot;left:20px&quot; 向元素的原始左侧位置增加 20 像素。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-16"><a href="#效果图-16" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130816662.png" alt="image-20221201212805800"></p>
<h2 id="定位属性-position-absolute-绝对定位"><a href="#定位属性-position-absolute-绝对定位" class="headerlink" title="定位属性:position-absolute 绝对定位"></a>定位属性:position-absolute 绝对定位</h2><h3 id="定位属性-1"><a href="#定位属性-1" class="headerlink" title="定位属性"></a>定位属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">定位属性绝对定位：position:absolute</span></span><br><span class="line"><span class="comment">元素框从文档流完全删除</span></span><br><span class="line"><span class="comment">并相对于其包含块进行定位</span></span><br><span class="line"><span class="comment">包含块1可能是文档中的另一个元素或者出示包含块</span></span><br><span class="line"><span class="comment">元素原先在正常文档中的所占的空间会关闭</span></span><br><span class="line"><span class="comment">就好像元素原来不存在一样。定位后生成一个块级框</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-17"><a href="#示例代码-17" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cc</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="language-css">               <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: yellow; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">left</span>:<span class="number">140px</span>; </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-17"><a href="#效果图-17" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130816851.png" alt="image-20221201213402821"></p>
<h2 id="定位属性（position-absolute）固定定位"><a href="#定位属性（position-absolute）固定定位" class="headerlink" title="定位属性（position-absolute）固定定位"></a>定位属性（position-absolute）固定定位</h2><h3 id="定位属性-2"><a href="#定位属性-2" class="headerlink" title="定位属性"></a>定位属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">定位属性：固定定位：position:fixed</span></span><br><span class="line"><span class="comment">元素框的表现类似于将position设置为absolute,</span></span><br><span class="line"><span class="comment">不过其包含快是视窗本身。</span></span><br><span class="line"><span class="comment">也就是说：</span></span><br><span class="line"><span class="comment">区别很简单</span></span><br><span class="line"><span class="comment">1.没有滚动条的情况下没有差异</span></span><br><span class="line"><span class="comment">2.在没有滚动条的情况下，fixed定位不会随滚动条移动而移动</span></span><br><span class="line"><span class="comment">而absolute定位则会滚动条移动</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-18"><a href="#示例代码-18" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cc</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;cc&quot;</span>&gt;</span>这是带有绝对定位的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        通过绝对定位，可以将元素放置在文档流的任何位置。</span><br><span class="line">        下面的标题距离页面左侧100px,距离页面顶部150px</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../photo/1.jpg&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="23盒子模型（border）"><a href="#23盒子模型（border）" class="headerlink" title="23盒子模型（border）"></a>23盒子模型（border）</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 边框属性</span></span><br><span class="line"><span class="comment">    border-style:solid(实线)/dashed（虚线）/dotted/none</span></span><br><span class="line"><span class="comment">    border-color:16进制；用于表示颜色的英文</span></span><br><span class="line"><span class="comment">    border-width:数值设置边框的粗</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-19"><a href="#示例代码-19" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*一般情况下,border 和  outline不会一起用*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-style</span>:solid ;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-color</span>: red;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">                </span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-top</span>:dashed ;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-top-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">                </span></span><br><span class="line"><span class="language-css">                </span></span><br><span class="line"><span class="language-css">                <span class="comment">/*outline-style: solid;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                outline-color: blue;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">                outline-width: 1px;*/</span></span></span><br><span class="line"><span class="language-css">            &#125;     </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        我相信，你是一个好人！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-18"><a href="#效果图-18" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130817080.png" alt="image-20221201214933216"></p>
<h2 id="23盒子模型（外边距margin）"><a href="#23盒子模型（外边距margin）" class="headerlink" title="23盒子模型（外边距margin）"></a>23盒子模型（外边距margin）</h2><h3 id="外边距相关属性"><a href="#外边距相关属性" class="headerlink" title="外边距相关属性"></a>外边距相关属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- margin:top;right;bottom;left; 四个方向的距离</span></span><br><span class="line"><span class="comment">margin-top 数值上间距</span></span><br><span class="line"><span class="comment">margin-bottom 数值下间距</span></span><br><span class="line"><span class="comment">margin-left   数值左间距</span></span><br><span class="line"><span class="comment">margin-right 数值右间距</span></span><br><span class="line"><span class="comment">  margin:top;right;bottom;left;四个方向的距离</span></span><br><span class="line"><span class="comment">    如果提供全部四个参数值，将按上、右、下、左的顺序作用于四边</span></span><br><span class="line"><span class="comment">    如果提供两个，第一个用于上、下，第二个用于左、右</span></span><br><span class="line"><span class="comment">    如果提供三个，第一个用于上，第二个用于左、右，第三个用于下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-20"><a href="#示例代码-20" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">             <span class="comment">/*margin-right: 50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-bottom: 50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-left: 50px; </span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-top: 50px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line">        我是谁？我在哪？我要去做啥</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-19"><a href="#效果图-19" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130817238.png" alt="image-20221201220917063"></p>
<h2 id="23盒子模型（内边距-padding）"><a href="#23盒子模型（内边距-padding）" class="headerlink" title="23盒子模型（内边距 padding）"></a>23盒子模型（内边距 padding）</h2><h3 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- padding: 内边距，元素内容和边框之间的距离（top right bottom left）</span></span><br><span class="line"><span class="comment">     内边距相关属性：</span></span><br><span class="line"><span class="comment">     padding-left</span></span><br><span class="line"><span class="comment">     padding-right</span></span><br><span class="line"><span class="comment">     padding-top</span></span><br><span class="line"><span class="comment">     padding-bottom</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-21"><a href="#示例代码-21" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.class1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>v</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1&quot;</span>&gt;</span></span><br><span class="line">        我是内容</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-20"><a href="#效果图-20" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130818363.png" alt="image-20221201221525696"></p>
<h2 id="24扩展属性"><a href="#24扩展属性" class="headerlink" title="24扩展属性"></a>24扩展属性</h2><h3 id="设置button按钮"><a href="#设置button按钮" class="headerlink" title="设置button按钮"></a>设置button按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">border-radius  创建圆角</span></span><br><span class="line"><span class="comment">box-shadow 创建阴影</span></span><br><span class="line"><span class="comment">box-shadow:10px 10px 10px 10px #FF0000;</span></span><br><span class="line"><span class="comment">&lt;length&gt;①： 第1个长度值用来设置对象的阴影水平偏移值。可以为负值 </span></span><br><span class="line"><span class="comment">&lt;length&gt;②： 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值 </span></span><br><span class="line"><span class="comment">&lt;length&gt;③： 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值 </span></span><br><span class="line"><span class="comment">&lt;length&gt;④： 如果提供了第4个长度值则用来设置对象的阴影外延值。不允许负值 </span></span><br><span class="line"><span class="comment">&lt;color&gt;： 设置对象的阴影的颜色。 </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-22"><a href="#示例代码-22" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#bt1</span>&#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> red;</span></span><br><span class="line"><span class="language-css">         <span class="comment">/* box-shadow:10px 10px 10px 10px #FF0000; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bt1&quot;</span>&gt;</span>我是一个圆角的<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-21"><a href="#效果图-21" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130818881.png" alt="image-20221201222505525"></p>
<h2 id="24扩展属性2（属性规定背景图片的尺寸）"><a href="#24扩展属性2（属性规定背景图片的尺寸）" class="headerlink" title="24扩展属性2（属性规定背景图片的尺寸）"></a>24扩展属性2（属性规定背景图片的尺寸）</h2><h3 id="属性规定扩展图片的属性"><a href="#属性规定扩展图片的属性" class="headerlink" title="属性规定扩展图片的属性"></a>属性规定扩展图片的属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-size: 属性规定背景图片的尺寸</span><br></pre></td></tr></table></figure>

<h3 id="效果图-22"><a href="#效果图-22" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130818169.png" alt="image-20221201223240193"></p>
<h2 id="24扩展属性3（为指定元素使用多个背景图像）"><a href="#24扩展属性3（为指定元素使用多个背景图像）" class="headerlink" title="24扩展属性3（为指定元素使用多个背景图像）"></a>24扩展属性3（为指定元素使用多个背景图像）</h2><h3 id="为指定元素使用多个背景图像"><a href="#为指定元素使用多个背景图像" class="headerlink" title="为指定元素使用多个背景图像"></a>为指定元素使用多个背景图像</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-image: 为指定元素使用多个背景图像</span><br></pre></td></tr></table></figure>

<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="1-js的引用"><a href="#1-js的引用" class="headerlink" title="1. js的引用"></a>1. js的引用</h2><h3 id="示例代码-23"><a href="#示例代码-23" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用方式</span></span><br><span class="line"><span class="comment">  1.在本页面写</span></span><br><span class="line"><span class="comment">  2.&lt;script src=&quot;js文件路径&quot;&gt;&lt;/script&gt; 外部引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 1.在本页面写 --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">              alert(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">          &lt;/script&gt;</span></span><br><span class="line"><span class="comment">          引用外部js </span></span><br><span class="line"><span class="comment">          &lt;script src=&quot;../js/1.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// 准备一个点击按钮实现功能的函数/方法</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//  function 函数</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              function 函数名()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                  // 函数体</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              方法名：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              1.字母数字特殊字符</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              2.首字母小写</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              3.见闻知义</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              4.如果有多个单词，除首字母外，其他首字母大写（驼峰命名法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              */</span></span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">function</span> <span class="title function_">myDemo1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了按钮&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">           </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 调用时用属性 onclike=&#x27;方法名()&#x27; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myDemo1()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-23"><a href="#效果图-23" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130818635.png" alt="image-20221202105122030"></p>
<h2 id="2-js的基本用法"><a href="#2-js的基本用法" class="headerlink" title="2.js的基本用法"></a>2.js的基本用法</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1.变量声明"></a>1.变量声明</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--变量声明 ：</span></span><br><span class="line"><span class="comment">- 任何变量都用var关键字来声明，var是variable的缩写。</span></span><br><span class="line"><span class="comment">- var是声明关键字，a是变量名，语句以分号结尾。</span></span><br><span class="line"><span class="comment">- JavaScript中的关键字，不可以作为变量名。</span></span><br><span class="line"><span class="comment">     就像在Java中你不可以写&quot;int int=1;&quot;一样。</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">Js部分关键字如下：</span></span><br><span class="line"><span class="comment">abstract、else、instanceof、super、boolean、</span></span><br><span class="line"><span class="comment">enum、int、switch、break、export、interface、</span></span><br><span class="line"><span class="comment">synchronized、byte、extends、let、this、case、</span></span><br><span class="line"><span class="comment">false、long、throw、catch、final、native、throws、</span></span><br><span class="line"><span class="comment">char、finally、new、transient、class、float、null、</span></span><br><span class="line"><span class="comment">true、const、for、package、try、continue、function、</span></span><br><span class="line"><span class="comment">private、typeof、debugger、goto、protected、var、default、</span></span><br><span class="line"><span class="comment">if、public、void、delete、implements、return、volatile、</span></span><br><span class="line"><span class="comment">do、import、short、while、double、in、static、with。</span></span><br><span class="line"><span class="comment">--&gt;</span>	</span><br></pre></td></tr></table></figure>

<h4 id="示例代码-24"><a href="#示例代码-24" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 方法的功能：计算两个数的和</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 定义两个变量</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 格式：var 变量名 = 值;</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 定义/声明一个变量a ，把数值1赋值给变量a</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// var a = 1;</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> a;  <span class="comment">//声明</span></span></span><br><span class="line"><span class="language-javascript">            a= <span class="number">1</span>;   <span class="comment">//赋值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> b = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> c = a + b;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sum1()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果图-24"><a href="#效果图-24" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130818806.png" alt="image-20221202105747737"></p>
<h3 id="2-基本类型"><a href="#2-基本类型" class="headerlink" title="2 基本类型"></a>2 基本类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">变量的类型： </span></span><br><span class="line"><span class="comment">	基本类型</span></span><br><span class="line"><span class="comment">	引用类型</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">变量的基本类型又有</span></span><br><span class="line"><span class="comment">Number、String、Boolean、Undefined、Null五种。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="示例代码-25"><a href="#示例代码-25" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//测试的时候可以</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">// var 在声明的时候 ，不会提定你是哪一种类型</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//赋值的时候就会知道</span></span></span><br><span class="line"><span class="language-javascript">			  </span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//numer</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="keyword">var</span>  m = <span class="number">1</span>; <span class="comment">//数值类型 </span></span></span><br><span class="line"><span class="language-javascript">			  <span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//String  &#x27;&#x27;  &quot;&quot; 表示字符串</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="keyword">var</span> username = <span class="string">&#x27;张三&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">			  <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//boolean 布尔值： </span></span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//当一个变量只有两种可能，true/false</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="keyword">var</span> sex = <span class="literal">true</span>; <span class="comment">//true男 false女</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="variable language_">console</span>.<span class="title function_">log</span>(sex);</span></span><br><span class="line"><span class="language-javascript">			  </span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">// undefined : 只声明 ，不赋值</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="keyword">var</span> age ; </span></span><br><span class="line"><span class="language-javascript">			  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span></span><br><span class="line"><span class="language-javascript">			  </span></span><br><span class="line"><span class="language-javascript">			  <span class="comment">//没有声明 ，直接用 报错 birthday is not defined</span></span></span><br><span class="line"><span class="language-javascript">			  <span class="variable language_">console</span>.<span class="title function_">log</span>(birthday);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;a()&quot;</span>&gt;</span>测试五种基本类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="F:%5Cjava%E5%AD%A6%E4%B9%A0%5C%E5%8D%83%E5%B3%B0%5C%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%5C%E5%89%8D%E7%AB%AF%5C%E5%9B%BE%E5%83%8F%5Cimage-20221202110420303.png" alt="image-20221202110420303"></p>
<h3 id="3-引用类型"><a href="#3-引用类型" class="headerlink" title="3 引用类型"></a>3 引用类型</h3><p>数组：引用类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> heights = [<span class="number">180</span>,<span class="number">181</span>,<span class="number">175</span>,<span class="number">192</span>,<span class="number">180</span>];</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(heights);</span><br></pre></td></tr></table></figure>

<p>集合类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">181</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;4444&#x27;</span>,<span class="literal">true</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对象类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br></pre></td></tr></table></figure>

<p>json串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  &#123;key1:value1,key2:value2,key3:value3....&#125;</span></span><br></pre></td></tr></table></figure>

<p>集合对象类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list2 = [</span><br><span class="line">              &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="literal">true</span>&#125;</span><br><span class="line">              ];</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(list2);</span><br></pre></td></tr></table></figure>

<h2 id="3-json对象串"><a href="#3-json对象串" class="headerlink" title="3 json对象串"></a>3 json对象串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 定义一个json串对象</span></span><br><span class="line">            <span class="comment">// &#123;k1:v1,k2:v2,.......&#125;</span></span><br><span class="line">            <span class="comment">// mysql表中的每一行数据</span></span><br><span class="line">            <span class="keyword">var</span> stu = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;小乔&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="literal">false</span>&#125;</span><br><span class="line">            <span class="comment">// 2.json串的访问方式：变量名.属性名（key） 获取值</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(stu);  <span class="comment">//全部输出</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==============访问属性 ================&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">id</span>); </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">name</span>);</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">age</span>);</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">sex</span>);</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==============修改 ================&#x27;</span>)</span><br><span class="line">				<span class="comment">//变量名.属性名(key) = 新值;</span></span><br><span class="line">                stu.<span class="property">name</span>=<span class="string">&#x27;乔巴&#x27;</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">name</span>);</span><br><span class="line">                <span class="comment">// 如果属性不存在1，就是新增</span></span><br><span class="line">                stu.<span class="property">birthday</span> = <span class="string">&#x27;1999-01-01&#x27;</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stu);</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 把元素的值null变相实现删除</span></span><br><span class="line">                stu.<span class="property">birthday</span> = <span class="literal">null</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo1()&quot;</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="效果图-25"><a href="#效果图-25" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130819341.png" alt="image-20221202140832997"></p>
<h2 id="4-json数组"><a href="#4-json数组" class="headerlink" title="4 json数组"></a>4 json数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="comment">// 1. 数组 [类型相同的元素]</span></span><br><span class="line">          <span class="comment">// array；数组</span></span><br><span class="line">          <span class="comment">// 类型是基本类型</span></span><br><span class="line">          <span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">0</span>]);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">1</span>]);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">2</span>]);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 修改 数组名[下标] = 新值</span></span><br><span class="line">              arr1[<span class="number">0</span>] = <span class="number">1999</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=====================&#x27;</span>)</span><br><span class="line">          <span class="keyword">var</span> arr2=[<span class="string">&#x27;小乔&#x27;</span>,<span class="string">&#x27;大乔&#x27;</span>,<span class="string">&#x27;貂蝉&#x27;</span>]</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>]);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1</span>]);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">2</span>]);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> arr3 = [</span><br><span class="line">              &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;小乔&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;大乔&#x27;</span>&#125;,</span><br><span class="line">          ];</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(arr4[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(arr4[<span class="number">1</span>].<span class="property">id</span>);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">		<span class="comment">//访问方法  获取元素 数组名[index]   index下标从0开始</span></span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo1()&quot;</span> &gt;</span>测试1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="5全局变量-x2F-局部变量"><a href="#5全局变量-x2F-局部变量" class="headerlink" title="5全局变量&#x2F;局部变量"></a>5全局变量&#x2F;局部变量</h2><p>全局变量：定义在方法之外的变量</p>
<p>局部变量：定义在方法内部的变量</p>
<p>对于变量的使用基于就近原则</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 全局变量</span></span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">       <span class="keyword">var</span> b = <span class="number">111</span>;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// 在方法内部定义的变量</span></span><br><span class="line">           <span class="comment">// 作用范围，只能是方法内部</span></span><br><span class="line">           <span class="comment">// 局部变量1：就近原则</span></span><br><span class="line">           <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// 局部变量2：就近原则</span></span><br><span class="line">           <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">       &#125;                                       </span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo1()&quot;</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo2()&quot;</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="6-json数组删除-x2F-添加元素"><a href="#6-json数组删除-x2F-添加元素" class="headerlink" title="6 json数组删除&#x2F;添加元素"></a>6 json数组删除&#x2F;添加元素</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压入 变量名 .push(值)</span></span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="number">55</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="删除末尾元素"><a href="#删除末尾元素" class="headerlink" title="删除末尾元素"></a>删除末尾元素</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除末尾元素，会把删除的元素返回</span></span><br><span class="line">           <span class="keyword">var</span> a = arr1.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>

<h4 id="删除头部元素"><a href="#删除头部元素" class="headerlink" title="删除头部元素"></a>删除头部元素</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除头部元素</span></span><br><span class="line">           <span class="keyword">var</span> b = arr1.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>

<h4 id="指定下标删除"><a href="#指定下标删除" class="headerlink" title="指定下标删除"></a>指定下标删除</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// splice(下标，个数)</span></span><br><span class="line">            <span class="keyword">var</span> d = arr1.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="7-基本运算"><a href="#7-基本运算" class="headerlink" title="7 基本运算"></a>7 基本运算</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">算术运算符:</span><br><span class="line">+ - * <span class="regexp">/ %  = += -= *= /</span>=  %= </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;!--</span><br><span class="line">	比较运算符： 结果是一个布尔值</span><br><span class="line">&gt; &gt;= &lt; &lt;=  == === </span><br><span class="line"> == 不考虑类型，只比较值</span><br><span class="line">=== 考虑类型，类型不同也为<span class="literal">false</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*三目表达式，三元表达式</span></span><br><span class="line"><span class="comment">表达式 ? 执行1:执行2; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.表达式的结果是 boolean  : true/ false */</span></span><br></pre></td></tr></table></figure>

<h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a++  先运算，后自增</span><br><span class="line">++a  先自增，后运算</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &amp;&amp; 与运算符</span></span><br><span class="line"><span class="comment">        || 或运算符</span></span><br><span class="line"><span class="comment">        ! 非运算符</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-条件分支语句"><a href="#8-条件分支语句" class="headerlink" title="8 条件分支语句"></a>8 条件分支语句</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">if -else </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">switch()</span></span><br><span class="line"><span class="comment">--&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	if条件表达式： </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	第一种格式： </span></span><br><span class="line"><span class="comment">	if(布尔表达式) &#123;</span></span><br><span class="line"><span class="comment">		如果括号中是true,执行的代码</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	第二种方式：  如果xxxx 否则xxxx</span></span><br><span class="line"><span class="comment">	if(布尔表达式) &#123;</span></span><br><span class="line"><span class="comment">		如果括号中是true,执行的代码</span></span><br><span class="line"><span class="comment">	&#125;else &#123;</span></span><br><span class="line"><span class="comment">		如果括号中是false,执行的代码</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	第三种方式： 多条件表达式： </span></span><br><span class="line"><span class="comment">	（）表达式区间要求互斥</span></span><br><span class="line"><span class="comment">	if() &#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;else if() &#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;else if() &#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;.....</span></span><br><span class="line"><span class="comment">	else &#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-循环"><a href="#9-循环" class="headerlink" title="9 循环"></a>9 循环</h2><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="number">1.</span>初始化变量;<span class="number">2.</span>布尔判断条件;<span class="number">3</span>迭代条件) &#123;</span><br><span class="line">	<span class="comment">//4循环体，执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="whiie循环"><a href="#whiie循环" class="headerlink" title="whiie循环"></a>whiie循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">	循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do - while循环"></a>do - while循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure>

<h2 id="10-函数"><a href="#10-函数" class="headerlink" title="10 函数"></a>10 函数</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	函数/方法： 为了实现某一个功能 ， 把代码放一块，包起来，</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	//方法： js=&gt; function</span></span><br><span class="line"><span class="comment">	//method</span></span><br><span class="line"><span class="comment">	//方法的三个要素： 方法名，方法的参数列表(变量), 方法的返回值 </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法名称的定义规则"><a href="#方法名称的定义规则" class="headerlink" title="方法名称的定义规则"></a>方法名称的定义规则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法名称的定义规则：</span></span><br><span class="line"><span class="comment">//1. 字母数字_ 2. 见闻知义  驼峰标识 3首字母小写</span></span><br><span class="line"><span class="comment">//参数列表：方法名(参数名1,参数名2,.......)</span></span><br><span class="line"><span class="comment">//参数：调用的时候需要传东西</span></span><br><span class="line"><span class="comment">//参数的个数:0个  1个  2个 .....</span></span><br><span class="line"><span class="comment">//一般情况下：再调方法时，最好遵循完全匹配</span></span><br><span class="line"><span class="comment">//定义的时候：方法的参数名称可以自己定，形参，实际是声明了两个变量</span></span><br><span class="line"><span class="comment">//调用的时候，传过来的值是实参</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-26"><a href="#示例代码-26" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">m1</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">           <span class="keyword">var</span> sum = a+b;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">           <span class="keyword">return</span> sum;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">m2</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">           <span class="keyword">var</span> sum1 = <span class="title function_">m1</span>(a,b);</span><br><span class="line">           <span class="keyword">var</span> sum2 = sum1 + c;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(sum2);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">m3</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// return xxx;可以使任何类型</span></span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">id</span>:<span class="number">1001</span>,<span class="attr">name</span>:<span class="string">&quot;小乔&quot;</span>&#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">m4</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// 有返回值的调用方法： var变量 = 方法名(实参);</span></span><br><span class="line">           <span class="keyword">var</span> a = <span class="title function_">m3</span>();</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;m1(1,2)&quot;</span>&gt;</span>计算两个数的和<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;m2(1,2,3)&quot;</span>&gt;</span>计算三个数的和<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;m4()&quot;</span>&gt;</span>method4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="11-如何获取在前段输入的值"><a href="#11-如何获取在前段输入的值" class="headerlink" title="11 如何获取在前段输入的值"></a>11 如何获取在前段输入的值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">registerQQ</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 1.获取下面input的值：value属性对应1的值</span></span><br><span class="line">            <span class="comment">// document 内置 js自己有</span></span><br><span class="line">            <span class="comment">// get 获取</span></span><br><span class="line">            <span class="comment">// Element 元素标签</span></span><br><span class="line">            <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span><br><span class="line">            <span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span><br><span class="line">            <span class="keyword">var</span> phone = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phone&quot;</span>).<span class="property">value</span>;</span><br><span class="line">            <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;code&quot;</span>).<span class="property">value</span>;</span><br><span class="line">            <span class="comment">// 判断单选框是否被选中</span></span><br><span class="line">            <span class="keyword">var</span> control = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;control&quot;</span>).<span class="property">checked</span>;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="12-JS内置函数"><a href="#12-JS内置函数" class="headerlink" title="12 JS内置函数"></a>12 JS内置函数</h2><h3 id="alert弹框"><a href="#alert弹框" class="headerlink" title="alert弹框"></a>alert弹框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">提供的弹窗函数：</span><br><span class="line">- alert弹框：这是一个只能点击确定按钮的弹窗</span><br><span class="line">- alert方法没有返回值，也就是说如果用一个变量去接受返回值，将会得到undefined。</span><br><span class="line">无论你点击“确定”还是右上角的那个“X“关闭。</span><br></pre></td></tr></table></figure>

<h3 id="示例代码-27"><a href="#示例代码-27" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// alert内置方法</span></span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&quot;Q弹&quot;</span>);</span><br><span class="line">       <span class="comment">// 样式是固定的</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="confirm弹框"><a href="#confirm弹框" class="headerlink" title="confirm弹框"></a>confirm弹框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">- confirm弹框：这是一个你可以点击确定或者取消的弹窗</span><br><span class="line">- confirm方法与alert不同，他的返回值是boolean，当你点击“确定”时，返回true，</span><br><span class="line">无论你点击“取消”还是右上角的那个“X“关闭，都返回false。</span><br></pre></td></tr></table></figure>

<h3 id="示例代码-28"><a href="#示例代码-28" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">// 1.首先弹框，你确定要删除吗？</span></span><br><span class="line">           <span class="comment">// 确定：true 取消 false</span></span><br><span class="line">           <span class="keyword">var</span> d = <span class="title function_">confirm</span>(<span class="string">&#x27;你确定要删除吗？&#x27;</span>);</span><br><span class="line">           <span class="comment">// 如果确定删除，执行删除的业务逻辑</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;d=&#x27;</span>+d);</span><br><span class="line">           <span class="keyword">if</span>(d)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除的业务逻辑&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="prompt弹框"><a href="#prompt弹框" class="headerlink" title="prompt弹框"></a>prompt弹框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> prompt弹框：这是一个你可以输入文本内容的弹窗</span><br><span class="line">  - 第一个参数是提示信息，</span><br><span class="line"> 第二个参数是用户输入的默认值。默认值会自动回显！</span><br><span class="line">- 当你点击确定的时候，返回用户输入的内容。</span><br><span class="line">当你点击取消或者关闭的时候，返回null。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promptDemo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 样式定死了，原始的这种写法不是太多</span></span><br><span class="line">    <span class="comment">// prompt（提示信息，默认值）；</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的年龄&#x27;</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-事件"><a href="#13-事件" class="headerlink" title="13 事件"></a>13 事件</h2><h3 id="改变事件-onChange"><a href="#改变事件-onChange" class="headerlink" title="改变事件-onChange"></a>改变事件-onChange</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onChange事件:当值发生改变时，触发的方法</span><br></pre></td></tr></table></figure>

<h3 id="示例代码-29"><a href="#示例代码-29" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;change()&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span>&gt;</span>东北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">select</span>&gt;</span>省</span><br><span class="line">       <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span>&gt;</span>太原<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span>&gt;</span>济南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span>&gt;</span>哈尔滨<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span>市</span><br></pre></td></tr></table></figure>

<h3 id="鼠标移动事件"><a href="#鼠标移动事件" class="headerlink" title="鼠标移动事件"></a>鼠标移动事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onmouseover: 移入：用户将鼠标移入一个HTML元素中</span><br><span class="line">onmousemove: 在上边移动：用户在一个HTML元素上移动鼠标</span><br><span class="line">onmouseout：   移出：用户从一个HTML元素上移开鼠标</span><br></pre></td></tr></table></figure>

<h3 id="示例代码-30"><a href="#示例代码-30" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">over</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标移上去了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标移动&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">out</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标移动出去了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="键盘事件-onkey"><a href="#键盘事件-onkey" class="headerlink" title="键盘事件-onkey"></a>键盘事件-onkey</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--键盘事件</span></span><br><span class="line"><span class="comment">onkeydown: 用户按下键盘按键 event.keyCode</span></span><br><span class="line"><span class="comment">onkeyup: 键盘弹上来</span></span><br><span class="line"><span class="comment">onkeypress:按下并放开任何字母数字键时发生。系统按钮（例如，箭头键和功能键）无法得到识别。</span></span><br><span class="line"><span class="comment">event.keyCode:获取按下键盘的按键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-31"><a href="#示例代码-31" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">down</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户按下键盘&#x27;</span>+event.<span class="property">keyCode</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">up</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘弹上来&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">press</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下并放开任何字母数字时发生&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">   </span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onkeydown</span>=<span class="string">&quot;down()&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;up()&quot;</span>  <span class="attr">onkeypress</span>=<span class="string">&quot;press()&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="提交事件-onsubmit"><a href="#提交事件-onsubmit" class="headerlink" title="提交事件-onsubmit"></a>提交事件-onsubmit</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onsubmit表示表单提交时验证的事件，它是在表单中的确认按钮被点击时出发的，一般是js函数。</span><br><span class="line">当用户单击了表单中的 Submit 按钮而提交一个表单时，就会调用这个事件句柄函数。注意，当调用方法Form.submit() 时，该处理器函数不会被调用。</span><br><span class="line">如果 onsubmit 句柄返回 fasle，表单的元素就不会提交。如果该函数返回其他值或什么都没有返回，则表单会被提交。</span><br></pre></td></tr></table></figure>

<h3 id="加载事件-onload"><a href="#加载事件-onload" class="headerlink" title="加载事件-onload"></a>加载事件-onload</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">onload事件 ：浏览器已完成页面的加载</span><br><span class="line">body标签 中写</span><br><span class="line">这代码的意思是你调用onLoad(f)时，如果load事件已经发生，则立即异步执行f，否则就把f注册到load事件。</span><br></pre></td></tr></table></figure>

<h2 id="14-获取表单中的元素"><a href="#14-获取表单中的元素" class="headerlink" title="14 获取表单中的元素"></a>14 获取表单中的元素</h2><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过id获取 .value();</span></span><br><span class="line"><span class="comment">//通过标签获取 getElementsByTagName ,获取的是列表，用[index].value</span></span><br><span class="line"><span class="comment">//通过name属性获取getElementsByName,获取的也是列表，用[index].value</span></span><br><span class="line"><span class="comment">//通过class获取getElementsByClassName [index].value			</span></span><br></pre></td></tr></table></figure>

<h4 id="通过ID获取"><a href="#通过ID获取" class="headerlink" title="通过ID获取"></a>通过ID获取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ID值&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<h4 id="通过标签获取"><a href="#通过标签获取" class="headerlink" title="通过标签获取"></a>通过标签获取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrNums = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; arrNums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(arrNums[i].<span class="property">value</span>);</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过name属性获取"><a href="#通过name属性获取" class="headerlink" title="通过name属性获取"></a>通过name属性获取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrName = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;name值&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="通过class标签获取"><a href="#通过class标签获取" class="headerlink" title="通过class标签获取"></a>通过class标签获取</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrClass = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;class值&#x27;</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arrClass.<span class="property">length</span>;i++)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(arrClass[i].<span class="property">value</span>);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过name获取多选框中的元素是否被选中"><a href="#通过name获取多选框中的元素是否被选中" class="headerlink" title="通过name获取多选框中的元素是否被选中"></a>通过name获取多选框中的元素是否被选中</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrName = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;love&quot;</span>);</span><br><span class="line">			<span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">var</span> selectLove = [];</span><br><span class="line">			<span class="keyword">while</span>(i&lt;arrName.<span class="property">length</span>)&#123;</span><br><span class="line">				<span class="keyword">var</span> t = arrName[i];</span><br><span class="line">				<span class="keyword">var</span> c = t.<span class="property">checked</span>;</span><br><span class="line">				<span class="keyword">if</span>(c)&#123;</span><br><span class="line">					<span class="keyword">var</span> v = t.<span class="property">value</span>;</span><br><span class="line">					selectLove.<span class="title function_">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(selectLove);</span><br></pre></td></tr></table></figure>

<h2 id="15-修改HTML标签中的元素"><a href="#15-修改HTML标签中的元素" class="headerlink" title="15 修改HTML标签中的元素"></a>15 修改HTML标签中的元素</h2><h3 id="1-改变文本内容"><a href="#1-改变文本内容" class="headerlink" title="1.改变文本内容"></a>1.改变文本内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invokeText</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">			<span class="comment">// 2.获取标签中间的文本内容</span></span><br><span class="line">			<span class="comment">// var 变量名 = 标签.innerText;</span></span><br><span class="line">			<span class="keyword">var</span> text = div1.<span class="property">innerText</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;text=&#x27;</span>+text);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 3.设置文本</span></span><br><span class="line">			<span class="comment">// 标签 .innerText = 新的文本内容</span></span><br><span class="line">			div1.<span class="property">innerText</span> = <span class="string">&#x27;我是新的文本&#x27;</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-改变htmll的内容"><a href="#2-改变htmll的内容" class="headerlink" title="2.改变htmll的内容"></a>2.改变htmll的内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invokeHtml</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">// 1.获取标签</span></span><br><span class="line">				<span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line">				<span class="comment">// 2.获取标签中间的所有内容：标签和文本</span></span><br><span class="line">				<span class="comment">// var 变量名 = 标签.innerHTML;</span></span><br><span class="line">				<span class="keyword">var</span> html = div1.<span class="property">innerHTML</span>;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html=&#x27;</span>+html);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 3.改变html的值</span></span><br><span class="line">				div1.<span class="property">innerHTML</span>	= <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;xxx&lt;/font&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-改变属性的值"><a href="#3-改变属性的值" class="headerlink" title="3.改变属性的值"></a>3.改变属性的值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// attribute属性</span></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">invokeAttribute</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="comment">// 1.获取标签</span></span><br><span class="line">			<span class="keyword">var</span> img1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img1&#x27;</span>);</span><br><span class="line">			<span class="comment">// 2.获取原来的值</span></span><br><span class="line">			<span class="keyword">var</span> src = img1.<span class="property">src</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;src=&#x27;</span>+src);</span><br><span class="line">			<span class="comment">// 重新赋值</span></span><br><span class="line">			 img1.<span class="property">src</span> = <span class="string">&#x27;../../photo/2.jpg&#x27;</span></span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h2 id="16-CSS变化"><a href="#16-CSS变化" class="headerlink" title="16 CSS变化"></a>16 CSS变化</h2><h3 id="1-修改CSS的样式"><a href="#1-修改CSS的样式" class="headerlink" title="1.修改CSS的样式"></a>1.修改CSS的样式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//- 对象.style.property=新样式</span></span><br><span class="line">			<span class="comment">//- 将property替换成真实的css属性名</span></span><br><span class="line">			<span class="comment">//比如 ：document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;</span></span><br><span class="line">			<span class="keyword">function</span> <span class="title function_">updateDivStyle</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">// 1.获取标签</span></span><br><span class="line">					<span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">					<span class="comment">// 2.改变style的值</span></span><br><span class="line">					div1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line">					div1.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">					div1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-设置Class的值"><a href="#2-设置Class的值" class="headerlink" title="2.设置Class的值"></a>2.设置Class的值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateDivStyle2</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">// 获取class属性值</span></span><br><span class="line">				<span class="keyword">var</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line">				<span class="comment">// 设置class属性的值</span></span><br><span class="line">				div2.<span class="property">className</span> = <span class="string">&quot;class2&quot;</span>;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h2 id="17-onclick事件"><a href="#17-onclick事件" class="headerlink" title="17 onclick事件"></a>17 onclick事件</h2><h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onclick用方法</span><br><span class="line">&lt;button onclick=<span class="string">&quot;a()&quot;</span> &gt;点我&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">直接把语句定到onclick里边</span><br><span class="line">&lt;button onclick=<span class="string">&quot;document.getElementById(&#x27;div1&#x27;).innerText = &#x27;0000&#x27;&quot;</span>&gt;点我&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第三种写法"><a href="#第三种写法" class="headerlink" title="第三种写法"></a>第三种写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在script里直接写  </span><br><span class="line">注意：必须使用在引用标签之后</span><br><span class="line">xxx.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;; </span><br></pre></td></tr></table></figure>

<h2 id="18-监听事件"><a href="#18-监听事件" class="headerlink" title="18 监听事件"></a>18 监听事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">必须使用在要引用的元素标签之后</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">bb</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// (&#x27;属性名&#x27;,&#x27;方法名&#x27;)</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bt1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,bb);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="19-失去焦点事件"><a href="#19-失去焦点事件" class="headerlink" title="19 失去焦点事件"></a>19 失去焦点事件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;username&quot;</span> onblur=<span class="string">&quot;a()&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="20-操作元素"><a href="#20-操作元素" class="headerlink" title="20 操作元素"></a>20 操作元素</h2><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），</span></span><br><span class="line"><span class="comment">然后向一个已存在的元素追加该元素。</span></span><br><span class="line"><span class="comment">- 创建元素：document.createElement()</span></span><br><span class="line"><span class="comment">- 追加元素：appendChild()</span></span><br><span class="line"><span class="comment">--删除元素： removeChild</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-32"><a href="#示例代码-32" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addP</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//    1.获取标签</span></span><br><span class="line">    <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line">   <span class="comment">// 准备添加的内容</span></span><br><span class="line">   <span class="comment">// div1.innerHTML =&quot;&lt;p&gt;2222&lt;/p&gt;&quot;;</span></span><br><span class="line">   <span class="comment">// 2.1创建一个标签</span></span><br><span class="line">   <span class="comment">// create 创建  element 标签元素(标签的名字)</span></span><br><span class="line">   <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">   <span class="comment">// 创建一个文本的内容  变量</span></span><br><span class="line">   <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;2222&#x27;</span>);</span><br><span class="line">   <span class="comment">// 3.把文本追加到p标签中</span></span><br><span class="line">   p.<span class="title function_">appendChild</span>(text);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.把p标签追加到div1当中</span></span><br><span class="line">   div1.<span class="title function_">appendChild</span>(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5.删除子标签</span></span><br><span class="line">   <span class="comment">// 删除标签</span></span><br><span class="line">   <span class="keyword">var</span> p4 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p4&#x27;</span>);</span><br><span class="line">   div1.<span class="title function_">removeChild</span>(p4);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="21-Window"><a href="#21-Window" class="headerlink" title="21 Window"></a>21 Window</h2><h3 id="可用宽度和可用高度"><a href="#可用宽度和可用高度" class="headerlink" title="可用宽度和可用高度"></a>可用宽度和可用高度</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">- 可用宽度：screen.availWidth 属性返回访问者屏幕的宽度，</span><br><span class="line">以像素计，减去界面特性，比如窗口任务栏。</span><br><span class="line">- 可用高度：screen.availHeight 属性返回访问者屏幕的高度，</span><br><span class="line">以像素计，减去界面特性，比如窗口任务栏。</span><br></pre></td></tr></table></figure>

<h3 id="示例代码-33"><a href="#示例代码-33" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;可用高度：&quot;</span>+screen.<span class="property">availHeight</span>);</span><br><span class="line">           <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;可用宽度：&quot;</span>+screen.<span class="property">availWidth</span>);</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="location方法"><a href="#location方法" class="headerlink" title="location方法"></a>location方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">- window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</span></span><br><span class="line"><span class="comment">	比如：window.location=&#x27;http://www.baidu.com&#x27;;</span></span><br><span class="line"><span class="comment">- window.location 对象在编写时可不使用 window 这个前缀。 一些例子：</span></span><br><span class="line"><span class="comment">  - location.hostname 返回 web 主机的域名</span></span><br><span class="line"><span class="comment">  - location.pathname 返回当前页面的路径和文件名</span></span><br><span class="line"><span class="comment">  - location.port 返回 web 主机的端口 （80 或 443）</span></span><br><span class="line"><span class="comment">  - location.protocol 返回所使用的 web 协议（http:// 或 https://）</span></span><br><span class="line"><span class="comment">  - location.href 属性返回当前页面的 URL</span></span><br><span class="line"><span class="comment">  - location.assign() 方法加载新的文档	</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-34"><a href="#示例代码-34" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">locationTest</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="comment">//1.在js方法中，如何跳转到别有页面</span></span><br><span class="line">			<span class="comment">// location.href= &#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">			<span class="comment">// window.location = &#x27;http://www.baidu.com&#x27;;</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;协议：&quot;</span>+location.<span class="property">protocol</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主机域名：&quot;</span>+location.<span class="property">hostname</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回当前页面的路径和文件名：&quot;</span>+location.<span class="property">pathname</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回端口&quot;</span>+location.<span class="property">port</span>)</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="history方法"><a href="#history方法" class="headerlink" title="history方法"></a>history方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&gt; - **Window History**</span></span><br><span class="line"><span class="comment">&gt;   - window.history 对象包含浏览器的历史。</span></span><br><span class="line"><span class="comment">&gt;   - window.history 对象在编写时可不使用 window 这个前缀。</span></span><br><span class="line"><span class="comment">&gt;     - history.back() </span></span><br><span class="line"><span class="comment">&gt;     - history.forward()</span></span><br><span class="line"><span class="comment">&gt;   - 一些方法示例如下：</span></span><br><span class="line"><span class="comment">&gt; history.back() - 与在浏览器点击后退按钮相同</span></span><br><span class="line"><span class="comment">--&gt;</span>   </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-35"><a href="#示例代码-35" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;005Window-1.html&quot;</span>&gt;点我跳转&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;history.back()&quot;</span>&gt;</span>上一个<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;history.forward()&quot;</span>&gt;</span>下一个<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="navigator方法"><a href="#navigator方法" class="headerlink" title="navigator方法"></a>navigator方法</h3><h4 id="示例代码-36"><a href="#示例代码-36" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div id=<span class="string">&quot;example&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt = <span class="string">&quot;&lt;p&gt;浏览器代号: &quot;</span> + navigator.<span class="property">appCodeName</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;浏览器名称: &quot;</span> + navigator.<span class="property">appName</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;浏览器版本: &quot;</span> + navigator.<span class="property">appVersion</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;启用Cookies: &quot;</span> + navigator.<span class="property">cookieEnabled</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;硬件平台: &quot;</span> + navigator.<span class="property">platform</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;用户代理: &quot;</span> + navigator.<span class="property">userAgent</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        txt += <span class="string">&quot;&lt;p&gt;用户代理语言: &quot;</span> + navigator.<span class="property">systemLanguage</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;example&quot;</span>).<span class="property">innerHTML</span> = txt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="22-定时器"><a href="#22-定时器" class="headerlink" title="22 定时器"></a>22 定时器</h2><h3 id="定时器方法"><a href="#定时器方法" class="headerlink" title="定时器方法"></a>定时器方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">定义定时器：</span><br><span class="line"></span><br><span class="line">- <span class="built_in">setInterval</span>(<span class="string">&#x27;调用函数&#x27;</span>,毫秒时间)：每间隔固定毫秒值就执行一次函数</span><br><span class="line">- <span class="built_in">setTimeout</span>(<span class="string">&#x27;调用函数&#x27;</span>,毫秒时间)：在固定时间之后执行一次调用函数</span><br><span class="line">关闭定时器：</span><br><span class="line">- <span class="built_in">clearInterval</span>(定时器名称)</span><br><span class="line">- <span class="built_in">clearTimeout</span>(定时器名称)</span><br></pre></td></tr></table></figure>



<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="1-jQuery选择器"><a href="#1-jQuery选择器" class="headerlink" title="1.jQuery选择器"></a>1.jQuery选择器</h2><h3 id="1-1-id选择器"><a href="#1-1-id选择器" class="headerlink" title="1.1 id选择器"></a>1.1 id选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       	<span class="title function_">alert</span>(<span class="string">&#x27;通过ID选择器绑定了一个单击事件&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-元素选择器"><a href="#1-2-元素选择器" class="headerlink" title="1.2 元素选择器"></a>1.2 元素选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       	<span class="title function_">alert</span>(<span class="string">&#x27;通过元素选择器绑定了一个单击事件&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="1-3-class选择器"><a href="#1-3-class选择器" class="headerlink" title="1.3 class选择器"></a>1.3 class选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;.class&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       	<span class="title function_">alert</span>(<span class="string">&#x27;通过class选择器绑定了一个单击事件&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-jQuery事件"><a href="#2-jQuery事件" class="headerlink" title="2 jQuery事件"></a>2 jQuery事件</h2><h3 id="2-1dblclick-双击事件"><a href="#2-1dblclick-双击事件" class="headerlink" title="2.1dblclick():双击事件"></a>2.1dblclick():双击事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dblclick（）：当双击元素时，会发生dblclick()双击事件</span></span><br><span class="line"><span class="comment">// dblclick(): 方法出发dblclick事件，或规定当发生dblclick事件时运行的函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&#x27;id为bt1的属性绑定了一个双击事件&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-鼠标移动事件"><a href="#2-2-鼠标移动事件" class="headerlink" title="2.2 鼠标移动事件"></a>2.2 鼠标移动事件</h3><h4 id="2-2-1-mouseenter事件"><a href="#2-2-1-mouseenter事件" class="headerlink" title="2.2.1 mouseenter事件"></a>2.2.1 mouseenter事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mouseenter():当苏表指针穿过元素时，会发生mouseenter()事件。</span></span><br><span class="line">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&#x27;鼠标进入id为bt1的属性内部了&#x27;</span>)</span><br><span class="line">       &#125;) ;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-mouseleave-事件"><a href="#2-2-2-mouseleave-事件" class="headerlink" title="2.2.2 mouseleave()事件"></a>2.2.2 mouseleave()事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mouseleave():当鼠标指针离开元素时，会反胜mouseleave()事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&#x27;鼠标移出id为bt1的属性内部了&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-hover事件"><a href="#2-2-3-hover事件" class="headerlink" title="2.2.3 hover事件"></a>2.2.3 hover事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当鼠标移动到元素上时，会触发指定的第一个函数（mouseenter）;当鼠标移出这个元素时，会触发第二个函数(\mouseleave)</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">hover</span>(</span><br><span class="line">   		<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&#x27;鼠标进入id为bt1的属性内部了&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">       <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;鼠标移出id为bt1的属性内部了&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   ); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-mousedown-事件"><a href="#2-2-4-mousedown-事件" class="headerlink" title="2.2.4 mousedown()事件"></a>2.2.4 mousedown()事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mousedown():当鼠标指针哟东到元素上方，并按下鼠标按键，或发生mousedown事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&#x27;在id为bt1的属性内按下鼠标&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-5-mouseup-事件"><a href="#2-2-5-mouseup-事件" class="headerlink" title="2.2.5 mouseup()事件"></a>2.2.5 mouseup()事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mouseup():当在元素上松开鼠标按钮时，会发生mouseup事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">alert</span>(<span class="string">&#x27;在id为bt1的属性内按下鼠标&#x27;</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-焦点事件"><a href="#2-3-焦点事件" class="headerlink" title="2.3 焦点事件"></a>2.3 焦点事件</h3><h4 id="2-3-1-获取焦点事件focus"><a href="#2-3-1-获取焦点事件focus" class="headerlink" title="2.3.1 获取焦点事件focus()"></a>2.3.1 获取焦点事件focus()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// focus():当元素获得焦点时，发生focus事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//display:样式 inline:行向排列 fadeOut(2000) 在两秒之内隐去</span></span><br><span class="line">       $(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;inline&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">2000</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-失去焦点事件blur"><a href="#2-3-2-失去焦点事件blur" class="headerlink" title="2.3.2 失去焦点事件blur()"></a>2.3.2 失去焦点事件blur()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blur():当元素失去焦点时，发生blur事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;标签为input的元素已经失去焦点&#x27;</span>);</span><br><span class="line">	&#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-改变事件change"><a href="#2-4-改变事件change" class="headerlink" title="2.4 改变事件change()"></a>2.4 改变事件change()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当值发生改变时，触发change()事件</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#s&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#s&#x27;</span>).<span class="title function_">val</span>());</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-5隐藏显示事件hide-x2F-show"><a href="#2-5隐藏显示事件hide-x2F-show" class="headerlink" title="2.5隐藏显示事件hide&#x2F;show"></a>2.5隐藏显示事件hide&#x2F;show</h3><h4 id="2-5-1-隐藏事件hide"><a href="#2-5-1-隐藏事件hide" class="headerlink" title="2.5.1 隐藏事件hide()"></a>2.5.1 隐藏事件hide()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//1000为sleep的值，为设置毫秒数，也可设置为“slow” &quot;fast&quot;</span></span><br><span class="line">       $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-5-2-显示事件show"><a href="#2-5-2-显示事件show" class="headerlink" title="2.5.2 显示事件show()"></a>2.5.2 显示事件show()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//1000为sleep的值，为设置毫秒数，也可设置为“slow” &quot;fast&quot;</span></span><br><span class="line">       $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">show</span>(<span class="number">1000</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-5-3-切换显示和隐藏事件toggle"><a href="#2-5-3-切换显示和隐藏事件toggle" class="headerlink" title="2.5.3 切换显示和隐藏事件toggle()"></a>2.5.3 切换显示和隐藏事件toggle()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt3&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//1000为sleep的值，为设置毫秒数，也可设置为“slow” &quot;fast&quot;</span></span><br><span class="line">       $(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;切换成功&#x27;</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-6淡入淡出"><a href="#2-6淡入淡出" class="headerlink" title="2.6淡入淡出"></a>2.6淡入淡出</h3><h4 id="2-6-1-淡入fadeIn-毫秒"><a href="#2-6-1-淡入fadeIn-毫秒" class="headerlink" title="2.6.1 淡入fadeIn(毫秒)"></a>2.6.1 淡入fadeIn(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-6-2-淡出fadeOut-毫秒"><a href="#2-6-2-淡出fadeOut-毫秒" class="headerlink" title="2.6.2 淡出fadeOut(毫秒)"></a>2.6.2 淡出fadeOut(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">fadeOut</span>(<span class="number">1000</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-6-3-淡入透明度设置fadeTo-毫秒，透明度（0-1）"><a href="#2-6-3-淡入透明度设置fadeTo-毫秒，透明度（0-1）" class="headerlink" title="2.6.3 淡入透明度设置fadeTo(毫秒，透明度（0-1）)"></a>2.6.3 淡入透明度设置fadeTo(毫秒，透明度（0-1）)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>,<span class="number">0.5</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-6-4-切换淡入淡出fadeToggle-毫秒"><a href="#2-6-4-切换淡入淡出fadeToggle-毫秒" class="headerlink" title="2.6.4 切换淡入淡出fadeToggle(毫秒)"></a>2.6.4 切换淡入淡出fadeToggle(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">fadeToggle</span>(<span class="number">1000</span>);</span><br><span class="line">   &#125;) ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-7-滑动元素"><a href="#2-7-滑动元素" class="headerlink" title="2.7 滑动元素"></a>2.7 滑动元素</h3><h4 id="2-7-1-元素下滑slideDown-毫秒"><a href="#2-7-1-元素下滑slideDown-毫秒" class="headerlink" title="2.7.1 元素下滑slideDown(毫秒)"></a>2.7.1 元素下滑slideDown(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">slideDown</span>(<span class="number">1000</span>);</span><br><span class="line">               &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-7-2-元素上滑slideUp-毫秒"><a href="#2-7-2-元素上滑slideUp-毫秒" class="headerlink" title="2.7.2 元素上滑slideUp(毫秒)"></a>2.7.2 元素上滑slideUp(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">slideUp</span>(<span class="number">1000</span>);</span><br><span class="line">               &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-7-3-元素上滑下滑切换slideToggle-毫秒"><a href="#2-7-3-元素上滑下滑切换slideToggle-毫秒" class="headerlink" title="2.7.3 元素上滑下滑切换slideToggle(毫秒)"></a>2.7.3 元素上滑下滑切换slideToggle(毫秒)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">slideToggle</span>(<span class="number">1000</span>);</span><br><span class="line">               &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-8-动画"><a href="#2-8-动画" class="headerlink" title="2.8 动画"></a>2.8 动画</h3><h4 id="2-8-1-移动的人语法和定义"><a href="#2-8-1-移动的人语法和定义" class="headerlink" title="2.8.1 移动的人语法和定义"></a>2.8.1 移动的人语法和定义</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//animate() 方法：jQuery animate() 方法用于创建自定义动画。</span></span><br><span class="line"><span class="comment">//格式：$(selector).animate(&#123;&#123;&#125;params&#125;,speed,callback);</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-2-先向左移动，在向下移动"><a href="#2-8-2-先向左移动，在向下移动" class="headerlink" title="2.8.2 先向左移动，在向下移动"></a>2.8.2 先向左移动，在向下移动</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                   <span class="attr">left</span>:<span class="string">&#x27;200px&#x27;</span></span><br><span class="line">               &#125;,<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                       <span class="attr">top</span>:<span class="string">&#x27;200px&#x27;</span></span><br><span class="line">                   &#125;,<span class="number">1000</span>)</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-8-3-动画多个属性"><a href="#2-8-3-动画多个属性" class="headerlink" title="2.8.3 动画多个属性"></a>2.8.3 动画多个属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                   <span class="attr">left</span>:<span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">                   <span class="attr">top</span>:<span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">                   <span class="attr">opacity</span>:<span class="string">&#x27;0.5&#x27;</span>,  <span class="comment">//透明度</span></span><br><span class="line">                <span class="comment">//一直点，一直加</span></span><br><span class="line">                   <span class="attr">height</span>:<span class="string">&#x27;+=100px&#x27;</span>,</span><br><span class="line">                   <span class="attr">width</span>: <span class="string">&#x27;+=100px&#x27;</span></span><br><span class="line">               &#125;,<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                       <span class="attr">right</span>:<span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">                       <span class="attr">top</span>:<span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">                       <span class="attr">height</span>:<span class="string">&#x27;+=50px&#x27;</span>,</span><br><span class="line">                       <span class="attr">width</span>:<span class="string">&#x27;+=50px&#x27;</span></span><br><span class="line">                   &#125;,<span class="number">1000</span>);</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-8-4动画-toggle"><a href="#2-8-4动画-toggle" class="headerlink" title="2.8.4动画 toggle()"></a>2.8.4动画 toggle()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用多个颜色</span></span><br><span class="line"><span class="comment">//提示：可以用 animate() 方法来操作所有 CSS 属性吗？</span></span><br><span class="line"><span class="comment">//是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，</span></span><br><span class="line"><span class="comment">//使用 marginRight 而不是 margin-right，等等</span></span><br><span class="line"><span class="comment">//在width 或者heigth:  设置hide show  toggle</span></span><br><span class="line"> $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                    <span class="attr">height</span>:<span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="string">&#x27;toggle&#x27;</span></span><br><span class="line">                &#125;,<span class="number">1000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行&#x27;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-8-5-停止动画stop"><a href="#2-8-5-停止动画stop" class="headerlink" title="2.8.5 停止动画stop()"></a>2.8.5 停止动画stop()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery stop() 方法用于停止动画或效果，在它们完成之前</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			$(<span class="string">&#x27;#flip&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">				$(<span class="string">&#x27;#panel&#x27;</span>).<span class="title function_">slideDown</span>(<span class="number">5000</span>);</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			$(<span class="string">&#x27;#stop&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">				$(<span class="string">&#x27;#panel&#x27;</span>).<span class="title function_">stop</span>();</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>





<h2 id="5Dom获取标签值"><a href="#5Dom获取标签值" class="headerlink" title="5Dom获取标签值"></a>5Dom获取标签值</h2><h3 id="jQuery获取标签值得方式"><a href="#jQuery获取标签值得方式" class="headerlink" title="jQuery获取标签值得方式"></a>jQuery获取标签值得方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- jQuery 拥有可操作 <span class="variable constant_">HTML</span> 元素和属性的强大方法。</span><br><span class="line">- jQuery 中非常重要的部分，就是操作 <span class="variable constant_">DOM</span> 的能力。</span><br><span class="line">- jQuery 提供一系列与 <span class="variable constant_">DOM</span> 相关的方法，这使访问和操作元素和属性变得很容易。</span><br><span class="line">- 三个简单实用的用于 <span class="variable constant_">DOM</span> 操作的 jQuery 方法：</span><br><span class="line">- <span class="title function_">text</span>() - 设置或返回所选元素的文本内容</span><br><span class="line">- <span class="title function_">html</span>() - 设置或返回所选元素的内容（包括 <span class="variable constant_">HTML</span> 标记）</span><br><span class="line">- <span class="title function_">val</span>() - 设置或返回表单字段的值</span><br><span class="line">- 下面的例子演示如何通过 jQuery <span class="title function_">text</span>() 和 <span class="title function_">html</span>() 方法来获得内容：</span><br></pre></td></tr></table></figure>

<h4 id="通过text（）方法获取值"><a href="#通过text（）方法获取值" class="headerlink" title="通过text（）方法获取值"></a>通过text（）方法获取值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> a = $(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">text</span>();</span><br><span class="line">          <span class="title function_">alert</span>(a);</span><br><span class="line">          <span class="title function_">alert</span>($(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;哈哈&#x27;</span>).<span class="title function_">text</span>());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="通过html（）方法获取值"><a href="#通过html（）方法获取值" class="headerlink" title="通过html（）方法获取值"></a>通过html（）方法获取值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">alert</span>($(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">html</span>());</span><br><span class="line">         $(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;xxxx&lt;/font&gt;&quot;</span>);</span><br><span class="line">         <span class="title function_">alert</span>($(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">html</span>());</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="通过val-设置或返回表单字段的值"><a href="#通过val-设置或返回表单字段的值" class="headerlink" title="通过val()设置或返回表单字段的值"></a>通过val()设置或返回表单字段的值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#input1&#x27;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>($(<span class="string">&#x27;#input1&#x27;</span>).<span class="title function_">val</span>());</span><br><span class="line">            <span class="title function_">alert</span>($(<span class="string">&#x27;#input1&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;java其实很容易的&#x27;</span>).<span class="title function_">val</span>());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Dom设置属性——attr"><a href="#Dom设置属性——attr" class="headerlink" title="Dom设置属性——attr()"></a>Dom设置属性——attr()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">		$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">var</span> str = $(<span class="string">&#x27;#a1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">				<span class="title function_">alert</span>(str);</span><br><span class="line">			&#125;);</span><br><span class="line">			$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//两个参数就是设置: 属性名    新的值</span></span><br><span class="line">				$(<span class="string">&#x27;#a1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;http:abcd.com&#x27;</span>);</span><br><span class="line">				<span class="title function_">alert</span>($(<span class="string">&#x27;#a1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Dom4-append-html"><a href="#Dom4-append-html" class="headerlink" title="Dom4_append.html"></a>Dom4_append.html</h2><h3 id="添加新内容"><a href="#添加新内容" class="headerlink" title="添加新内容"></a>添加新内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> - 我们将学习用于添加新内容的四个 jQuery 方法：</span><br><span class="line"> - <span class="title function_">append</span>() - 在被选元素的结尾插入内容</span><br><span class="line"> - <span class="title function_">prepend</span>() - 在被选元素的开头插入内容</span><br><span class="line"> - <span class="title function_">after</span>() - 在被选元素之后插入内容</span><br><span class="line"> - <span class="title function_">before</span>() - 在被选元素之前插入内容</span><br><span class="line">- jQuery <span class="title function_">append</span>() 方法在被选元素的结尾插入内容。 </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-37"><a href="#示例代码-37" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> p = <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;小乔11&lt;/&gt;&quot;</span>;</span><br><span class="line">               <span class="comment">//$(&#x27;#p1&#x27;).append(p);</span></span><br><span class="line">				<span class="comment">//方法的参数支持多个 标签  ...</span></span><br><span class="line">                   $(<span class="string">&#x27;#p1&#x27;</span>).<span class="title function_">after</span>(p,p,p);</span><br><span class="line">                   $(<span class="string">&#x27;#p1&#x27;</span>).<span class="title function_">before</span>(<span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;小乔00&lt;/p&gt;&quot;</span>)</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Dom5-5删除"><a href="#Dom5-5删除" class="headerlink" title="Dom5_5删除"></a>Dom5_5删除</h2><h3 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		如需删除元素和内容，一般可使用以下两个 jQuery 方法：</span></span><br><span class="line"><span class="comment">		- remove() - 删除被选元素（及其子元素）</span></span><br><span class="line"><span class="comment">		- empty() - 从被选元素中删除子元素</span></span><br><span class="line"><span class="comment">		 */</span>  </span><br></pre></td></tr></table></figure>

<h3 id="示例代码-38"><a href="#示例代码-38" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                 $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">remove</span>();</span><br><span class="line">             &#125;);</span><br><span class="line">             $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                 $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">empty</span>();</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Dom6获取并设置Css类"><a href="#Dom6获取并设置Css类" class="headerlink" title="Dom6获取并设置Css类"></a>Dom6获取并设置Css类</h2><h3 id="jQuery操作CSS"><a href="#jQuery操作CSS" class="headerlink" title="jQuery操作CSS"></a>jQuery操作CSS</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery 操作 CSS</span></span><br><span class="line"><span class="comment">// jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</span></span><br><span class="line"><span class="comment">// addClass() - 向被选元素添加一个或多个类</span></span><br><span class="line"><span class="comment">// removeClass() - 从被选元素删除一个或多个类</span></span><br><span class="line"><span class="comment">// toggleClass() - 对被选元素进行添加/删除类的切换操作</span></span><br><span class="line"><span class="comment">// css() - 设置或返回样式属性</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-39"><a href="#示例代码-39" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;class1&#x27;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       $(<span class="string">&#x27;#bt2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;class2&#x27;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       $(<span class="string">&#x27;#bt3&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;class2&#x27;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Dom7尺寸"><a href="#Dom7尺寸" class="headerlink" title="Dom7尺寸"></a>Dom7尺寸</h2><h3 id="获取宽高的方法"><a href="#获取宽高的方法" class="headerlink" title="获取宽高的方法"></a>获取宽高的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</span></span><br><span class="line"><span class="comment">//height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码-40"><a href="#示例代码-40" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> w = $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">width</span>();</span><br><span class="line">       <span class="keyword">var</span> h = $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">height</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(w+<span class="string">&quot; &quot;</span> + h);</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">width</span>(<span class="number">200</span>);</span><br><span class="line">       $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">height</span>(<span class="number">200</span>);</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="006遍历1-祖先"><a href="#006遍历1-祖先" class="headerlink" title="006遍历1-祖先"></a>006遍历1-祖先</h2><h3 id="获取父元素方法"><a href="#获取父元素方法" class="headerlink" title="获取父元素方法"></a>获取父元素方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    	    <span class="comment">//祖先是父、祖父或曾祖父等等。</span></span><br><span class="line">		<span class="comment">//通过 jQuery，您能够向上遍历 DOM 树，以查找元素的祖先。  </span></span><br><span class="line">            <span class="comment">//parent();  获取直系父元素</span></span><br><span class="line">            <span class="comment">//parents();  获取所有父元素</span></span><br><span class="line">           <span class="comment">//parentsUntil() 获取子元素和括号内元素之间的元素</span></span><br><span class="line"></span><br><span class="line">           $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               $(<span class="string">&#x27;#bt1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                 <span class="keyword">var</span> p =   $(<span class="string">&#x27;#div3&#x27;</span>).<span class="title function_">parentsUntil</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="006遍历2-获取后代"><a href="#006遍历2-获取后代" class="headerlink" title="006遍历2-获取后代"></a>006遍历2-获取后代</h2><h3 id="1-获取直接后代-childdren"><a href="#1-获取直接后代-childdren" class="headerlink" title="1.获取直接后代_childdren()"></a>1.获取直接后代_childdren()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//获取直接子元素</span></span><br><span class="line"><span class="keyword">var</span> p = $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">children</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p); </span><br></pre></td></tr></table></figure>

<h3 id="2-获取所有后代-find-‘-’"><a href="#2-获取所有后代-find-‘-’" class="headerlink" title="2.获取所有后代_find(‘*’)"></a>2.获取所有后代_find(‘*’)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有后代  find(&#x27;*&#x27;)</span></span><br><span class="line"> <span class="keyword">var</span> p = $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure>

<h3 id="3-获取指定后代-find-‘指定标签’"><a href="#3-获取指定后代-find-‘指定标签’" class="headerlink" title="3.获取指定后代_find(‘指定标签’)"></a>3.获取指定后代_find(‘指定标签’)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 获取指定后代find(xxx) </span></span><br><span class="line"><span class="keyword">var</span> p = $(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure>

<h3 id="006遍历3-获取同胞标签-siblings"><a href="#006遍历3-获取同胞标签-siblings" class="headerlink" title="006遍历3-获取同胞标签-siblings()"></a>006遍历3-获取同胞标签-siblings()</h3><h4 id="获取兄弟"><a href="#获取兄弟" class="headerlink" title="获取兄弟"></a>获取兄弟</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 兄弟标签  siblings() ： 返回所有兄弟标签</span></span><br><span class="line"><span class="keyword">var</span> s =   $(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">siblings</span>();  <span class="comment">//获取所有兄弟标签</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure>

<h4 id="获取下一个兄弟标签"><a href="#获取下一个兄弟标签" class="headerlink" title="获取下一个兄弟标签"></a>获取下一个兄弟标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// next() ： 返回下一个兄弟标签</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">next</span>());    <span class="comment">//获取下一个标签</span></span><br></pre></td></tr></table></figure>

<h4 id="获取下一个之后的所有兄弟标签"><a href="#获取下一个之后的所有兄弟标签" class="headerlink" title="获取下一个之后的所有兄弟标签"></a>获取下一个之后的所有兄弟标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> all =  <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">nextAll</span>());  <span class="comment">// 获取该标签之后的所有标签</span></span><br></pre></td></tr></table></figure>

<h4 id="返回开始元素到结束元素之间的兄弟元素，不包括结束元素"><a href="#返回开始元素到结束元素之间的兄弟元素，不包括结束元素" class="headerlink" title="返回开始元素到结束元素之间的兄弟元素，不包括结束元素"></a>返回开始元素到结束元素之间的兄弟元素，不包括结束元素</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = $(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">nextUntil</span>(<span class="string">&#x27;#bt2&#x27;</span>);   <span class="comment">// 获取从下一个标签到目标标签之内的所有标签</span></span><br></pre></td></tr></table></figure>

<h4 id="获取标签"><a href="#获取标签" class="headerlink" title="获取标签"></a>获取标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#div2&#x27;</span>).<span class="title function_">next</span>().<span class="title function_">text</span>()); </span><br></pre></td></tr></table></figure>

<h4 id="获取第一个元素-first"><a href="#获取第一个元素-first" class="headerlink" title="获取第一个元素-first()"></a>获取第一个元素-first()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个元素：&#x27;</span>+当前数组.<span class="title function_">first</span>().<span class="title function_">text</span>());</span><br></pre></td></tr></table></figure>

<h4 id="获取最后一个元素-last"><a href="#获取最后一个元素-last" class="headerlink" title="获取最后一个元素-last()"></a>获取最后一个元素-last()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个元素：&#x27;</span>+当前数组.<span class="title function_">last</span>().<span class="title function_">text</span>());</span><br></pre></td></tr></table></figure>

<h4 id="通过下标来获取元素-eq-‘下标’"><a href="#通过下标来获取元素-eq-‘下标’" class="headerlink" title="通过下标来获取元素-eq(‘下标’)"></a>通过下标来获取元素-eq(‘下标’)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个元素：&#x27;</span>+当前数组.<span class="title function_">eq</span>(<span class="string">&#x27;下标&#x27;</span>).<span class="title function_">text</span>());</span><br></pre></td></tr></table></figure>

<h2 id="007Ajax请求"><a href="#007Ajax请求" class="headerlink" title="007Ajax请求"></a>007Ajax请求</h2><h3 id="ajax请求的写法："><a href="#ajax请求的写法：" class="headerlink" title="ajax请求的写法："></a>ajax请求的写法：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法：</span></span><br><span class="line">    <span class="comment">// $.ajax(&#123;json串格式&#125;)</span></span><br><span class="line">    <span class="comment">// type表示数据的提交格式</span></span><br><span class="line">    <span class="comment">// url后端的地址</span></span><br><span class="line">    <span class="comment">//  success:方法，回调函数，表示访问后端成功后，接受后端返回的数据</span></span><br><span class="line">    <span class="comment">// dateType： 表示后端返回数据的格式</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alter</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="008-select多选框"><a href="#008-select多选框" class="headerlink" title="008 select多选框"></a>008 select多选框</h2><h3 id="通过id的方式判断是否选中"><a href="#通过id的方式判断是否选中" class="headerlink" title="通过id的方式判断是否选中"></a>通过id的方式判断是否选中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = $(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="通过name的方式获取选中的数组"><a href="#通过name的方式获取选中的数组" class="headerlink" title="通过name的方式获取选中的数组"></a>通过name的方式获取选中的数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cs = $(<span class="string">&quot;input[name=&#x27;name&#x27;]&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ; <span class="language-xml">&lt;cs.length; i++)&#123;</span></span><br><span class="line"><span class="language-xml">    //获取选中的id</span></span><br><span class="line"><span class="language-xml">    if(cs[i].checked)&#123;</span></span><br><span class="line"><span class="language-xml">    	cs[i].value;    </span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="前端项目大总结"><a href="#前端项目大总结" class="headerlink" title="前端项目大总结"></a>前端项目大总结</h1><h2 id="增删改查四步走"><a href="#增删改查四步走" class="headerlink" title="增删改查四步走"></a>增删改查四步走</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.有后端情况：</span><br><span class="line">创建form表单，在表单中填写数据，提交至后端，后端进行保存之后，回显到前端，刷新数据 </span><br><span class="line">2.没有后端情况</span><br><span class="line">（1）创建form表单</span><br><span class="line"> (2)获取表单中的数据,使用push()方法，将该条数据添加至总数据中</span><br><span class="line">3.使用异步添加</span><br><span class="line">  （1） 创建form表单</span><br><span class="line">  	(2)创建js文件，用来存储success，code，msg等元素</span><br><span class="line">  <span class="built_in">$</span>.ajax(&#123;</span><br><span class="line">  		type:&quot;get&quot;,</span><br><span class="line">  		data:数据，</span><br><span class="line">  		url:json位置</span><br><span class="line">  		success:function(a)&#123;</span><br><span class="line">  			if(a.success)&#123;</span><br><span class="line">  				a.push(数据);</span><br><span class="line">  				alert(a.msg);</span><br><span class="line">  			&#125;else&#123;</span><br><span class="line">  				alert(a.msg);</span><br><span class="line">  			&#125;</span><br><span class="line">  		&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  （3）刷新页面</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.有后端情况</span><br><span class="line">首先将信息回显到修改页面，然后通过id获取用户输入的信息，传入数据库进行修改，修改后传回页面</span><br><span class="line">2.没有后端情况</span><br><span class="line">（1）通过jquery获取用户输入的值，将其保存到全局变量</span><br><span class="line">（2）将值赋值给修改方法</span><br><span class="line">（3）循环遍历，如果数据Id和全局变量中的id相同，则使用 用户输入的值覆盖该位置的值</span><br><span class="line">（4）刷新页面</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.有后端情况</span><br><span class="line">根据id获取要删除的信息，，将其传入后端进行删除</span><br><span class="line">2.没有后端情况</span><br><span class="line">（1）获取页面上的id</span><br><span class="line">(2)通过循环遍历，在数据中找到和要删除的id一样的值</span><br><span class="line">(3)数据.splice(i,1)进行删除</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">通过循环遍历赋值</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130819184.png" alt="image-20221213173625405"></p>
<h1 id="frameset框架"><a href="#frameset框架" class="headerlink" title="frameset框架"></a>frameset框架</h1><h3 id="示例代码-41"><a href="#示例代码-41" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">rows 横向分成三份   cols：竖向分成*份</span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;15%,*,10%&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_top.html&quot;</span> <span class="attr">noresize</span>=<span class="string">&quot;noresize&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_middle.html&quot;</span> <span class="attr">noresize</span>=<span class="string">&quot;noresize&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_botton.html&quot;</span> <span class="attr">noresize</span>=<span class="string">&quot;noresize&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line">		</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2023/04/13/MyBatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-oiaoPapR" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>





<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130840110.png" alt="001"></p>
<blockquote>
</blockquote>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-什么是框架？"><a href="#1-1-什么是框架？" class="headerlink" title="1.1 什么是框架？"></a>1.1 什么是框架？</h4><blockquote>
<p><a href="">软件的半成品，解决了软件开发过程当中的普适性问题</a>，从而简化了开发步骤，提供了开发的效率。</p>
</blockquote>
<h4 id="1-2-什么是ORM框架？"><a href="#1-2-什么是ORM框架？" class="headerlink" title="1.2 什么是ORM框架？"></a>1.2 什么是ORM框架？</h4><blockquote>
<ul>
<li>ORM（Object Relational Mapping）对象关系映射，将程序中的<a href="">一个对象与表中的一行数据一一对应</a>。</li>
<li>ORM框架提供了持久化类与表的映射关系，在运行时参照映射文件的信息，[把对象持久化到数据库中&#96;]()。</li>
</ul>
</blockquote>
<h4 id="1-3-使用JDBC完成ORM操作的缺点？"><a href="#1-3-使用JDBC完成ORM操作的缺点？" class="headerlink" title="1.3 使用JDBC完成ORM操作的缺点？"></a>1.3 使用JDBC完成ORM操作的缺点？</h4><blockquote>
<ul>
<li><p>存在大量的冗余代码。</p>
</li>
<li><p>手工创建 Connection、Statement 等。</p>
</li>
<li><p>手工将结果集封装成实体对象。</p>
</li>
<li><p>查询效率低，没有对数据访问进行过优化（Not Cache）。</p>
</li>
</ul>
</blockquote>
<h3 id="二、MyBatis框架"><a href="#二、MyBatis框架" class="headerlink" title="二、MyBatis框架"></a>二、MyBatis框架</h3><hr>
<h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><blockquote>
<ul>
<li>MyBatis本是Apache软件基金会的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了Google Code，并且改名为MyBatis 。2013年11月迁移到Github。</li>
<li>MyBatis是一个<a href="">优秀的基于Java的持久层框架</a>，支持自定义SQL，存储过程和高级映射。</li>
<li>MyBatis<a href="">对原有JDBC操作进行了封装</a>，几乎消除了所有JDBC代码，使开发者只需关注 SQL 本身。</li>
<li>MyBatis可以使用简单的XML或Annotation来配置执行SQL，并<a href="">自动完成ORM操作</a>，将执行结果返回。</li>
</ul>
</blockquote>
<h4 id="2-2-访问与下载"><a href="#2-2-访问与下载" class="headerlink" title="2.2 访问与下载"></a>2.2 访问与下载</h4><blockquote>
<p>官方网站：<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a></p>
<p>下载地址：<a href="https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.1">https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.1</a></p>
</blockquote>
<h3 id="三、构建Maven项目"><a href="#三、构建Maven项目" class="headerlink" title="三、构建Maven项目"></a>三、构建Maven项目</h3><hr>
<h4 id="3-1-新建项目"><a href="#3-1-新建项目" class="headerlink" title="3.1 新建项目"></a>3.1 新建项目</h4><table>
<thead>
<tr>
<th align="center">使用IDEA打开已创建的文件夹目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130840960.png" alt="002"></td>
</tr>
</tbody></table>
<h4 id="3-2-选择Maven目录"><a href="#3-2-选择Maven目录" class="headerlink" title="3.2 选择Maven目录"></a>3.2 选择Maven目录</h4><table>
<thead>
<tr>
<th align="center">选择Maven项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841375.png" alt="003"></td>
</tr>
</tbody></table>
<h4 id="3-3-GAV坐标"><a href="#3-3-GAV坐标" class="headerlink" title="3.3 GAV坐标"></a>3.3 GAV坐标</h4><table>
<thead>
<tr>
<th align="center">GAV坐标</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841847.png" alt="image-20191230174727813"></td>
</tr>
</tbody></table>
<h3 id="四、MyBatis环境搭建【重点】"><a href="#四、MyBatis环境搭建【重点】" class="headerlink" title="四、MyBatis环境搭建【重点】"></a>四、MyBatis环境搭建【<code>重点</code>】</h3><hr>
<h4 id="4-1-pom-xml中引入MyBatis核心依赖"><a href="#4-1-pom-xml中引入MyBatis核心依赖" class="headerlink" title="4.1 pom.xml中引入MyBatis核心依赖"></a>4.1 pom.xml中引入MyBatis核心依赖</h4><blockquote>
<p>在pom.xml中引入相关依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> 	</span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">         <span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">          http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MyBatis核心依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySql驱动依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-创建MyBatis配置文件"><a href="#4-2-创建MyBatis配置文件" class="headerlink" title="4.2 创建MyBatis配置文件"></a>4.2 创建MyBatis配置文件</h4><blockquote>
<p>创建并配置mybatis-config.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">	<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MyBatis配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JDBC环境配置、选中默认环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySql数据库环境配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.datasource.pooled.PooledDataSourceFactory&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &amp;转义&amp;amp; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/x?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mapper注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册Mapper文件的所在位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;xxxMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>注意：mapper.xml默认建议存放在resources中,路径不能以/开头</code></li>
</ul>
<h3 id="五、MyBatis开发步骤【重点】"><a href="#五、MyBatis开发步骤【重点】" class="headerlink" title="五、MyBatis开发步骤【重点】"></a>五、MyBatis开发步骤【<code>重点</code>】</h3><hr>
<h4 id="5-1-建表"><a href="#5-1-建表" class="headerlink" title="5.1 建表"></a>5.1 建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_users(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  sex <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line">  birthday datetime,</span><br><span class="line">  registTime datetime</span><br><span class="line">)<span class="keyword">default</span> charset <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure>



<h4 id="5-2-定义实体类"><a href="#5-2-定义实体类" class="headerlink" title="5.2 定义实体类"></a>5.2 定义实体类</h4><blockquote>
<p>定义所需CURD操作的实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part1.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">  	<span class="keyword">private</span> Date birthday;</span><br><span class="line">  	<span class="keyword">private</span> Date registTime;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//无参构造（必备构造二选一）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全参构造（必备构造二选一）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name, String password, String sex, Date birthday, Date registTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">      	<span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">      	<span class="built_in">this</span>.registTime = registTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getters And Setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-3-定义DAO接口"><a href="#5-3-定义DAO接口" class="headerlink" title="5.3 定义DAO接口"></a>5.3 定义DAO接口</h4><blockquote>
<p>根据所需DAO定义接口、以及方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part1.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-编写Mapper-xml"><a href="#5-4-编写Mapper-xml" class="headerlink" title="5.4 编写Mapper.xml"></a>5.4 编写Mapper.xml</h4><blockquote>
<p>在resources目录中创建Mapper.xml文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">	<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace = 所需实现的接口全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part1.basic.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id = 所需重写的接口抽象方法，resultType = 查询后所需返回的对象类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part1.basic.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--#&#123;arg0&#125; = 方法的第一个形参--&gt;</span></span><br><span class="line">      	SELECT * FROM t_users WHERE id = #&#123;arg0&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="5-5-注册Mapper"><a href="#5-5-注册Mapper" class="headerlink" title="5.5 注册Mapper"></a>5.5 注册Mapper</h4><blockquote>
<p>将Mapper.xml注册到mybatis-config.xml中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Mapper文件注册位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册Mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserDaoMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="5-6-测试一"><a href="#5-6-测试一" class="headerlink" title="5.6 测试一"></a>5.6 测试一</h4><blockquote>
<p>MyBatis的API操作方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part1.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloMyBatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="comment">//1.获得读取MyBatis配置文件的流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构建SqlSession连接对象的工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过工厂获得连接对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过连接对象获得接口实现类对象  </span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.调用接口中的方法</span></span><br><span class="line">        System.out.println(userDao.selectUserById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-7-测试二【了解】"><a href="#5-7-测试二【了解】" class="headerlink" title="5.7 测试二【了解】"></a>5.7 测试二【了解】</h4><blockquote>
<p>iBatis传统操作方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part1.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloMyBatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="comment">//1.获得读取MyBatis配置文件的流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构建SqlSession连接对象的工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过工厂获得连接对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过连接对象直接调用接口中的方法</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;com.qf.mybatis.part1.basic.UserDao.selectUserById&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      </span><br><span class="line">      	System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、细节补充"><a href="#六、细节补充" class="headerlink" title="六、细节补充"></a>六、细节补充</h3><hr>
<h4 id="6-1-解决mapper-xml存放在resources以外路径中的读取问题"><a href="#6-1-解决mapper-xml存放在resources以外路径中的读取问题" class="headerlink" title="6.1 解决mapper.xml存放在resources以外路径中的读取问题"></a>6.1 解决mapper.xml存放在resources以外路径中的读取问题</h4><blockquote>
<p>在pom.xml文件最后追加&lt; build &gt;标签，以便可以将xml文件复制到classes中，并在程序运行时正确读取。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              	<span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="comment">&lt;!-- 默认（新添加自定义则失效） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="comment">&lt;!-- 新添加 */代表1级目录 **/代表多级目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="6-2-properties配置文件"><a href="#6-2-properties配置文件" class="headerlink" title="6.2 properties配置文件"></a>6.2 properties配置文件</h4><blockquote>
<p>对于mybatis-config.xml的核心配置中，如果存在需要频繁改动的数据内容，可以提取到properties中。</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jdbc.properties</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/example?useUnicode=true&amp;characterEncpding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改mybatis-config.xml。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--添加properties配置文件路径(外部配置、动态替换)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;MySqlDB&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--使用$ + 占位符--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserDaoMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="6-3-类型别名"><a href="#6-3-类型别名" class="headerlink" title="6.3 类型别名"></a>6.3 类型别名</h4><blockquote>
<p>为实体类定义别名，提高书写效率。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--定义别名二选一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义类的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part1.basic.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--自动扫描包，将原类名作为别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.qf.mybatis.part1.basic&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="6-4-创建log4j配置文件"><a href="#6-4-创建log4j配置文件" class="headerlink" title="6.4 创建log4j配置文件"></a>6.4 创建log4j配置文件</h4><blockquote>
<p>pom.xml添加log4j依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志依赖 https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建并配置log4j.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># MyBatis logging configuration...</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="center">级别</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ALL LEVEL</td>
<td align="left">打开所有日志记录开关；是最低等级的，用于打开所有日志记录。</td>
</tr>
<tr>
<td align="center"><a href="">DEBUG</a></td>
<td align="left"><a href="">输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。</a></td>
</tr>
<tr>
<td align="center">INFO</td>
<td align="left">输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。</td>
</tr>
<tr>
<td align="center">WARN</td>
<td align="left">输出警告信息；表明会出现潜在错误的情形。</td>
</tr>
<tr>
<td align="center">ERROR</td>
<td align="left">输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。</td>
</tr>
<tr>
<td align="center">FATAL</td>
<td align="left">输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。</td>
</tr>
<tr>
<td align="center">OFF LEVEL</td>
<td align="left">关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录。</td>
</tr>
</tbody></table>
<h3 id="七、MyBatis的CRUD操作【重点】"><a href="#七、MyBatis的CRUD操作【重点】" class="headerlink" title="七、MyBatis的CRUD操作【重点】"></a>七、MyBatis的CRUD操作【<code>重点</code>】</h3><hr>
<h4 id="7-1-查询"><a href="#7-1-查询" class="headerlink" title="7.1 查询"></a>7.1 查询</h4><blockquote>
<p>标签：&lt; select id&#x3D;”” resultType&#x3D;”” &gt;</p>
</blockquote>
<h5 id="7-1-1-序号参数绑定"><a href="#7-1-1-序号参数绑定" class="headerlink" title="7.1.1 序号参数绑定"></a>7.1.1 序号参数绑定</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">		<span class="comment">//使用原生参数绑定</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserByIdAndPwd</span><span class="params">(Integer id , String pwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByIdAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_users</span><br><span class="line">    WHERE id = #&#123;arg0&#125; AND password = #&#123;arg1&#125; <span class="comment">&lt;!--arg0 arg1 arg2 ...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByIdAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM t_users</span><br><span class="line">    WHERE id = #&#123;param1&#125; AND password = #&#123;param2&#125; <span class="comment">&lt;!--param1 param2 param3 ...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-1-2-注解参数绑定【推荐】"><a href="#7-1-2-注解参数绑定【推荐】" class="headerlink" title="7.1.2 注解参数绑定【推荐】"></a>7.1.2 注解参数绑定【推荐】</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param; <span class="comment">//引入注解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//使用MyBatis提供的@Param进行参数绑定</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserByIdAndPwd</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id , <span class="meta">@Param(&quot;pwd&quot;)</span> String pwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByIdAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_users</span><br><span class="line">    WHERE id = #&#123;id&#125; AND password = #&#123;pwd&#125; <span class="comment">&lt;!-- 使用注解值 @Param(&quot;pwd&quot;) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-1-3-Map参数绑定"><a href="#7-1-3-Map参数绑定" class="headerlink" title="7.1.3 Map参数绑定"></a>7.1.3 Map参数绑定</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//添加Map进行参数绑定</span></span><br><span class="line">		<span class="keyword">public</span> User <span class="title function_">selectUserByIdAndPwd_map</span><span class="params">(Map values)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//测试类创建Map</span></span><br><span class="line">values.put(<span class="string">&quot;myId&quot;</span>,<span class="number">1</span>); <span class="comment">//自定义key，绑定参数</span></span><br><span class="line">values.put(<span class="string">&quot;myPwd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectUserByIdAndPwd_map(values);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByIdAndPwd_map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_users </span><br><span class="line">  	WHERE id = #&#123;myId&#125; AND password = #&#123;myPwd&#125; <span class="comment">&lt;!-- 通过key获得value --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-1-4-对象参数绑定"><a href="#7-1-4-对象参数绑定" class="headerlink" title="7.1.4 对象参数绑定"></a>7.1.4 对象参数绑定</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//使用对象属性进行参数绑定</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserByUserInfo</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUserInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_users</span><br><span class="line">    WHERE id = #&#123;id&#125; AND password = #&#123;password&#125; <span class="comment">&lt;!-- #&#123;id&#125;取User对象的id属性值、#&#123;password&#125;同理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-1-5-模糊查询"><a href="#7-1-5-模糊查询" class="headerlink" title="7.1.5 模糊查询"></a>7.1.5 模糊查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUsersByKeyword</span><span class="params">(<span class="meta">@Param(&quot;keyword&quot;)</span> String keyword)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part1.different.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsersByKeyword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_users </span><br><span class="line">  		WHERE name LIKE concat(&#x27;%&#x27;,#&#123;keyword&#125;,&#x27;%&#x27;) <span class="comment">&lt;!-- 拼接&#x27;%&#x27; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-2-删除"><a href="#7-2-删除" class="headerlink" title="7.2 删除"></a>7.2 删除</h4><blockquote>
<p>标签：&lt; delete id&#x3D;”” parameterType&#x3D;”” &gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM t_users</span><br><span class="line">    WHERE id = #&#123;id&#125; <span class="comment">&lt;!--只有一个参数时，#&#123;任意书写&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-3-修改"><a href="#7-3-修改" class="headerlink" title="7.3 修改"></a>7.3 修改</h4><blockquote>
<p>标签：&lt; update id&#x3D;”” parameterType&#x3D;”” &gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_users SET name=#&#123;name&#125;, password=#&#123;password&#125;, sex=#&#123;sex&#125;, birthday=#&#123;birthday&#125;</span><br><span class="line">    WHERE id = #&#123;id&#125; <span class="comment">&lt;!--方法参数为对象时，可直接使用#&#123;属性名&#125;进行获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-4-添加"><a href="#7-4-添加" class="headerlink" title="7.4 添加"></a>7.4 添加</h4><blockquote>
<p>标签：&lt; insert id&#x3D;”” parameterType&#x3D;”” &gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO t_users VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,NULL);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 自动增长主键，以下两种方案均可 --&gt;</span></span><br><span class="line">    INSERT INTO t_users VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,NULL);</span><br><span class="line">	INSERT INTO t_users VALUES(NULL,#&#123;name&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,NULL);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-5-主键回填"><a href="#7-5-主键回填" class="headerlink" title="7.5 主键回填"></a>7.5 主键回填</h4><blockquote>
<p>标签：&lt; selectKey id&#x3D;”” parameterType&#x3D;”” order&#x3D;”AFTER|BEFORE”&gt;</p>
</blockquote>
<h5 id="7-5-1-通过last-insert-id-查询主键"><a href="#7-5-1-通过last-insert-id-查询主键" class="headerlink" title="7.5.1 通过last_insert_id()查询主键"></a>7.5.1 通过last_insert_id()查询主键</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_product(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line">)<span class="keyword">default</span> charset <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//set+get ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part1.basic.ProductDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertProduct&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span> <span class="comment">&lt;!-- 插入之后 --&gt;</span></span><br><span class="line">            SELECT LAST_INSERT_ID() <span class="comment">&lt;!-- 适用于整数类型自增主键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        INSERT INTO t_product(id,name) VALUES(#&#123;id&#125;,#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="7-5-2-通过uuid-查询主键"><a href="#7-5-2-通过uuid-查询主键" class="headerlink" title="7.5.2 通过uuid()查询主键"></a>7.5.2 通过uuid()查询主键</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order(</span><br><span class="line">  id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">primary</span> key, # 字符型主键</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line">)<span class="keyword">default</span> charset <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//set+get ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part1.basic.OrderDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrder&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span><span class="comment">&lt;!-- 插入之前 --&gt;</span></span><br><span class="line">            SELECT REPLACE(UUID(),&#x27;-&#x27;,&#x27;&#x27;) <span class="comment">&lt;!-- 适用于字符类型主键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        INSERT INTO t_order(id,name) VALUES(#&#123;id&#125;,#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="八、MyBatis工具类【重点】"><a href="#八、MyBatis工具类【重点】" class="headerlink" title="八、MyBatis工具类【重点】"></a>八、MyBatis工具类【<code>重点</code>】</h3><hr>
<h4 id="8-1-封装工具类"><a href="#8-1-封装工具类" class="headerlink" title="8.1 封装工具类"></a>8.1 封装工具类</h4><blockquote>
<ul>
<li><p>Resource：用于获得读取配置文件的IO对象，耗费资源，建议通过IO一次性读取所有所需要的数据。</p>
</li>
<li><p>SqlSessionFactory：SqlSession工厂类，内存占用多，耗费资源，建议每个应用只创建一个对象。</p>
</li>
<li><p>SqlSession：相当于Connection，可控制事务，应为线程私有，不被多线程共享。</p>
</li>
<li><p>将获得连接、关闭连接、提交事务、回滚事务、获得接口实现类等方法进行封装。</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part1.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//获得SqlSession工厂</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//创建ThreadLocal绑定当前线程中的SqlSession对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得连接（从tl中获得当前线程SqlSession）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> tl.get();</span><br><span class="line">        <span class="keyword">if</span>(session == <span class="literal">null</span>)&#123;</span><br><span class="line">            session = factory.openSession();</span><br><span class="line">            tl.set(session);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放连接（释放当前线程中的SqlSession）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> tl.get();</span><br><span class="line">        session.close();</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务（提交当前线程中的SqlSession所管理的事务）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> openSession();</span><br><span class="line">        session.commit();</span><br><span class="line">        closeSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务（回滚当前线程中的SqlSession所管理的事务）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> openSession();</span><br><span class="line">        session.rollback();</span><br><span class="line">        closeSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得接口实现类对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> openSession();</span><br><span class="line">        <span class="keyword">return</span> session.getMapper(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="8-2-测试工具类"><a href="#8-2-测试工具类" class="headerlink" title="8.2 测试工具类"></a>8.2 测试工具类</h4><blockquote>
<p>调用MyBatisUtils中的封装方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUtils</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> MyBatisUtils.getMapper(UserDao.class);</span><br><span class="line">				userDao.deleteUser(<span class="number">15</span>);</span><br><span class="line">				MyBatisUtils.commit();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				MyBatisUtils.rollback();</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="九、ORM映射【重点】"><a href="#九、ORM映射【重点】" class="headerlink" title="九、ORM映射【重点】"></a>九、ORM映射【<code>重点</code>】</h3><hr>
<h4 id="9-1-MyBatis自动ORM失效"><a href="#9-1-MyBatis自动ORM失效" class="headerlink" title="9.1 MyBatis自动ORM失效"></a>9.1 MyBatis自动ORM失效</h4><blockquote>
<p>MyBatis只能自动维护库表”列名“与”属性名“相同时的一一对应关系，二者不同时，无法自动ORM。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">自动ORM失效</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841556.png" alt="007"></td>
</tr>
</tbody></table>
<h4 id="9-2-方案一：列的别名"><a href="#9-2-方案一：列的别名" class="headerlink" title="9.2 方案一：列的别名"></a>9.2 方案一：列的别名</h4><blockquote>
<p>在SQL中使用 as 为查询字段添加列别名，以匹配属性名。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.orm.ManagerDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectManagerByIdAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.orm.Manager&quot;</span>&gt;</span></span><br><span class="line">        SELECT mgr_id AS id , mgr_name AS username , mgr_pwd AS password</span><br><span class="line">        FROM t_managers</span><br><span class="line">        WHERE mgr_id = #&#123;id&#125; AND mgr_pwd = #&#123;pwd&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="9-3-方案二：结果映射（ResultMap-查询结果的封装规则）"><a href="#9-3-方案二：结果映射（ResultMap-查询结果的封装规则）" class="headerlink" title="9.3 方案二：结果映射（ResultMap - 查询结果的封装规则）"></a>9.3 方案二：结果映射（ResultMap - 查询结果的封装规则）</h4><blockquote>
<p>通过&lt; resultMap id&#x3D;”” type&#x3D;”” &gt;映射，匹配列名与属性名。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.orm.ManagerDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义resultMap标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;managerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part2.orm.Manager&quot;</span>&gt;</span></span><br><span class="line">      	<span class="comment">&lt;!--关联主键与列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mgr_id&quot;</span> /&gt;</span></span><br><span class="line">      </span><br><span class="line">      	<span class="comment">&lt;!--关联属性与列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mgr_name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mgr_pwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!--使用resultMap作为ORM映射依据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllManagers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;managerResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT mgr_id , mgr_name , mgr_pwd</span><br><span class="line">        FROM t_managers</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十、MyBatis处理关联关系-多表连接【重点】"><a href="#十、MyBatis处理关联关系-多表连接【重点】" class="headerlink" title="十、MyBatis处理关联关系-多表连接【重点】"></a>十、MyBatis处理关联关系-多表连接【<code>重点</code>】</h3><hr>
<blockquote>
<p>实体间的关系：关联关系（拥有 has、属于 belong）</p>
<ul>
<li><p>OneToOne：一对一关系（Passenger— Passport）</p>
</li>
<li><p>OneToMany：一对多关系（Employee — Department）</p>
</li>
<li><p>ManyToMany：多对多关系（Student — Subject）</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Table建立外键关系</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841658.png" alt="008"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">Entity添加关系属性</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841030.jpg" alt="009_2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">Mapper中将属性与列名对应</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841727.png" alt="010"></td>
</tr>
</tbody></table>
<h4 id="10-1-OneToOne"><a href="#10-1-OneToOne" class="headerlink" title="10.1 OneToOne"></a>10.1 OneToOne</h4><blockquote>
<p>SQL参考OneToOneExample.sql</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.one2one.PassengerDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 结果映射（查询结果的封装规则） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;passengerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part2.one2one.Passenger&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      	<span class="comment">&lt;!-- 关系表中数据的封装规则 --&gt;</span>	 <span class="comment">&lt;!-- 指定关系表的实体类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;passport&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.qf.mybatis.part2.one2one.Passport&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;passport_id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;nationality&quot;</span> <span class="attr">column</span>=<span class="string">&quot;nationality&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;expire&quot;</span> <span class="attr">column</span>=<span class="string">&quot;expire&quot;</span> /&gt;</span></span><br><span class="line">          	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;passenger_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;passenger_id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 多表连接查询 --&gt;</span>					  	<span class="comment">&lt;!-- 结果映射（查询结果的封装规则）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPassengerById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;passengerResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 别名（避免与p1.id冲突） --&gt;</span></span><br><span class="line">        SELECT p1.id , p1.name , p1.sex , p1.birthday , p2.id as passport_id , p2.nationality , p2.expire 			, p2.passenger_id</span><br><span class="line">        FROM t_passengers p1 LEFT JOIN t_passports p2</span><br><span class="line">        ON p1.id = p2.passenger_id</span><br><span class="line">        WHERE p1.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：指定“一方”关系时（对象），使用&lt; association javaType&#x3D;”” &gt;</a></li>
</ul>
<h4 id="10-2-OneToMany"><a href="#10-2-OneToMany" class="headerlink" title="10.2 OneToMany"></a>10.2 OneToMany</h4><blockquote>
<p>SQL参考OneToManyExample.sql</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.DepartmentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 封装规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;departmentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;location&quot;</span> <span class="attr">column</span>=<span class="string">&quot;location&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">      	<span class="comment">&lt;!-- 关系表中数据的封装规则 --&gt;</span>		<span class="comment">&lt;!-- 指定关系表的实体类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.Employee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">column</span>=<span class="string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 多表连接查询 --&gt;</span>			      <span class="comment">&lt;!-- 封装规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDepartmentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;departmentResultMap&quot;</span> &gt;</span></span><br><span class="line">      	<span class="comment">&lt;!-- 别名（避免与d.id、d.name冲突）--&gt;</span></span><br><span class="line">        SELECT d.id , d.name , d.location , e.id AS emp_id , e.name emp_name , e.salary , e.dept_id</span><br><span class="line">        FROM t_departments d LEFT JOIN t_employees e</span><br><span class="line">        ON d.id = e.dept_id</span><br><span class="line">        WHERE d.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：指定“多方”关系时（集合），使用&lt; collection ofType&#x3D;”” &gt;</a></li>
</ul>
<h4 id="10-3-ManyToMany"><a href="#10-3-ManyToMany" class="headerlink" title="10.3 ManyToMany"></a>10.3 ManyToMany</h4><blockquote>
<p>SQL参考ManyToManyExample.sql</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">建立第三张关系表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841653.jpg" alt="011_2"></td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.many2many.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 映射查询只封装两表中的信息，可忽略关系表内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;allMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part2.many2many.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;subjects&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.qf.mybatis.part2.many2many.Subject&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">column</span>=<span class="string">&quot;grade&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 三表连接查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;allMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT s1.* , ss.* , s2.id as sid , s2.name as sname , s2.grade</span><br><span class="line">        FROM t_students s1 LEFT JOIN t_stu_sub ss</span><br><span class="line">        ON s1.id = ss.student_id <span class="comment">&lt;!-- 通过t_stu_sub表建立二者之间的关系 --&gt;</span></span><br><span class="line">        LEFT JOIN t_subjects s2</span><br><span class="line">        ON ss.subject_id = s2.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：指定“多方”关系时（集合），使用&lt; collection ofType&#x3D;”” &gt;</a></li>
</ul>
<h4 id="10-4-关系总结"><a href="#10-4-关系总结" class="headerlink" title="10.4 关系总结"></a>10.4 关系总结</h4><blockquote>
<p>一方，添加集合；多方，添加对象。</p>
<p>双方均可建立关系属性，建立关系属性后，对应的Mapper文件中需使用&lt; ResultMap &gt;完成多表映射。</p>
<p>持有对象关系属性，使用&lt; association property&#x3D;”dept” javaType&#x3D;”department” &gt;</p>
<p>持有集合关系属性，使用&lt; collection property&#x3D;”emps” ofType&#x3D;”employee” &gt;</p>
</blockquote>
<h3 id="十一、动态SQL【重点】"><a href="#十一、动态SQL【重点】" class="headerlink" title="十一、动态SQL【重点】"></a>十一、动态SQL【<code>重点</code>】</h3><hr>
<blockquote>
<p>MyBatis的映射文件中支持在基础SQL上添加一些逻辑操作，并动态拼接成完整的SQL之后再执行，以达到SQL复用、简化编程的效果。</p>
</blockquote>
<h4 id="11-1-lt-sql-gt"><a href="#11-1-lt-sql-gt" class="headerlink" title="11.1 &lt; sql &gt;"></a>11.1 &lt; sql &gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.dynamic.BookDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;BOOKS_FIELD&quot;</span>&gt;</span> <span class="comment">&lt;!-- 定义SQL片段 --&gt;</span></span><br><span class="line">        SELECT id,name,author,publish,sort</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;BOOKS_FIELD&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 通过ID引用SQL片段 --&gt;</span></span><br><span class="line">        FROM t_books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="11-2-lt-if-gt"><a href="#11-2-lt-if-gt" class="headerlink" title="11.2 &lt; if &gt;"></a>11.2 &lt; if &gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;BOOKS_FIELD&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 通过ID引用SQL片段 --&gt;</span></span><br><span class="line">    FROM t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">        name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="11-3-lt-where-gt"><a href="#11-3-lt-where-gt" class="headerlink" title="11.3 &lt; where &gt;"></a>11.3 &lt; where &gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><br><span class="line">    SELECT id , name , author , publish , sort</span><br><span class="line">    FROM t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span> <span class="comment">&lt;!-- WHERE，会自动忽略前后缀（如：and | or） --&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">            and publish = #&#123;publish&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            and sort = #&#123;sort&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="11-4-lt-set-gt"><a href="#11-4-lt-set-gt" class="headerlink" title="11.4 &lt; set &gt;"></a>11.4 &lt; set &gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookByCondition&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span><span class="comment">&lt;!-- where子句中满足条件的if，会自动忽略后缀（如：,） --&gt;</span></span><br><span class="line">            name = #&#123;name&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">            publish = #&#123;publish&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            sort = #&#123;sort&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="11-5-lt-trim-gt"><a href="#11-5-lt-trim-gt" class="headerlink" title="11.5 &lt; trim &gt;"></a>11.5 &lt; trim &gt;</h4><blockquote>
<p>&lt; trim prefix&#x3D;”” suffix&#x3D;”” prefixOverrides&#x3D;”” suffixOverrides&#x3D;”” &gt;代替&lt; where &gt; 、&lt; set &gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.day2.dynamic.Book&quot;</span>&gt;</span></span><br><span class="line">		SELECT id,name,author,publish,sort</span><br><span class="line">    FROM t_books</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND|OR&quot;</span>&gt;</span> <span class="comment">&lt;!-- 增加WHERE前缀，自动忽略前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            and id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">            and publish = #&#123;publish&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            and sort = #&#123;sort&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookByCondition&quot;</span>&gt;</span></span><br><span class="line">		UPDATE t_books</span><br><span class="line">		<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span> <span class="comment">&lt;!-- 增加SET前缀，自动忽略后缀 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">						name = #&#123;name&#125; ,</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">						author = #&#123;author&#125; ,</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;publish != null&quot;</span>&gt;</span></span><br><span class="line">						publish = #&#123;publish&#125; ,</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">						sort = #&#123;sort&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">		WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="11-6-lt-foreach-gt"><a href="#11-6-lt-foreach-gt" class="headerlink" title="11.6 &lt; foreach &gt;"></a>11.6 &lt; foreach &gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookByIds&quot;</span>&gt;</span></span><br><span class="line">		DELETE FROM t_books</span><br><span class="line">		WHERE id IN</span><br><span class="line">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">index</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">				#&#123;id&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>collection</td>
<td>容器类型</td>
<td>list、array、map</td>
</tr>
<tr>
<td>open</td>
<td>起始符</td>
<td>(</td>
</tr>
<tr>
<td>close</td>
<td>结束符</td>
<td>)</td>
</tr>
<tr>
<td>separator</td>
<td>分隔符</td>
<td>,</td>
</tr>
<tr>
<td>index</td>
<td>下标号</td>
<td>从0开始，依次递增</td>
</tr>
<tr>
<td>item</td>
<td>当前项</td>
<td>任意名称（循环中通过 #{任意名称} 表达式访问）</td>
</tr>
</tbody></table>
<h3 id="十二、缓存（Cache）【重点】"><a href="#十二、缓存（Cache）【重点】" class="headerlink" title="十二、缓存（Cache）【重点】"></a>十二、缓存（Cache）【<code>重点</code>】</h3><hr>
<blockquote>
<p>内存中的一块存储空间，服务于某个应用程序，旨在将频繁读取的数据临时保存在内存中，便于二次快速访问。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">无缓存：用户在访问相同数据时，需要发起多次对数据库的直接访问，导致产生大量IO、读写硬盘的操作，效率低下</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130841340.png" alt="012"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">有缓存：首次访问时，查询数据库，将数据存储到缓存中；再次访问时，直接访问缓存，减少IO、硬盘读写次数、提高效率</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130842021.png" alt="013"></td>
</tr>
</tbody></table>
<h4 id="12-1-一级缓存"><a href="#12-1-一级缓存" class="headerlink" title="12.1 一级缓存"></a>12.1 一级缓存</h4><blockquote>
<p>SqlSession级别的缓存，同一个SqlSession的发起多次同构查询，会将数据保存在一级缓存中。</p>
</blockquote>
<ul>
<li><a href="">注意：无需任何配置，默认开启一级缓存。</a></li>
</ul>
<h4 id="12-2-二级缓存"><a href="#12-2-二级缓存" class="headerlink" title="12.2 二级缓存"></a>12.2 二级缓存</h4><blockquote>
<p>SqlSessionFactory级别的缓存，同一个SqlSessionFactory构建的SqlSession发起的多次同构查询，会将数据保存在二级缓存中。</p>
</blockquote>
<ul>
<li><a href="">注意：在sqlSession.commit()或者sqlSession.close()之后生效。</a></li>
</ul>
<h5 id="12-2-1-开启全局缓存"><a href="#12-2-1-开启全局缓存" class="headerlink" title="12.2.1 开启全局缓存"></a>12.2.1 开启全局缓存</h5><blockquote>
<p>&lt; settings &gt;是MyBatis中极为重要的调整设置，他们会改变MyBatis的运行行为，其他详细配置可参考官方文档。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">&lt;!-- 注意书写位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- mybaits-config.xml中开启全局缓存（默认开启） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="12-2-2-指定Mapper缓存"><a href="#12-2-2-指定Mapper缓存" class="headerlink" title="12.2.2 指定Mapper缓存"></a>12.2.2 指定Mapper缓存</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.cache.BookDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> /&gt;</span> <span class="comment">&lt;!-- 指定缓存 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBookByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qf.mybatis.part2.cache.Book&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapperCache</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> MyBatisUtils.getSession();</span><br><span class="line">  </span><br><span class="line">  	<span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> sqlSession1.getMapper(BookDao.class);</span><br><span class="line"></span><br><span class="line">  	bookDao1.selectBookByCondition(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"></span><br><span class="line">  	sqlSession1.close(); <span class="comment">//必须关闭SqlSession才可缓存数据</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">//--------------------</span></span><br><span class="line"></span><br><span class="line">  	<span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> MyBatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">  	<span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> sqlSession2.getMapper(BookDao.class);</span><br><span class="line"></span><br><span class="line">  	bookDao2.selectBookByCondition(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"></span><br><span class="line">  	sqlSession2.close(); <span class="comment">//缓存击中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="12-2-3-缓存清空并重新缓存"><a href="#12-2-3-缓存清空并重新缓存" class="headerlink" title="12.2.3 缓存清空并重新缓存"></a>12.2.3 缓存清空并重新缓存</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapperCache</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> MyBatisUtils.getSession();</span><br><span class="line">  </span><br><span class="line">  	<span class="type">BookDao</span> <span class="variable">bookDao1</span> <span class="operator">=</span> sqlSession1.getMapper(BookDao.class);</span><br><span class="line"></span><br><span class="line">  	bookDao1.selectBookByCondition(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"></span><br><span class="line">  	sqlSession1.close(); <span class="comment">//必须关闭SqlSession才可缓存数据</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">//--------------------</span></span><br><span class="line">  	</span><br><span class="line">		<span class="type">SqlSession</span> <span class="variable">sqlSession3</span> <span class="operator">=</span> MyBatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">		<span class="type">BookDao</span> <span class="variable">bookDao3</span> <span class="operator">=</span> sqlSession3.getMapper(BookDao.class);</span><br><span class="line"></span><br><span class="line">		bookDao3.deleteBookById(<span class="number">102</span>);</span><br><span class="line"></span><br><span class="line">		sqlSession3.commit(); <span class="comment">//DML成功，数据发生变化，缓存清空</span></span><br><span class="line"></span><br><span class="line">		sqlSession3.close();</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//--------------------</span></span><br><span class="line"></span><br><span class="line">  	<span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> MyBatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">  	<span class="type">BookDao</span> <span class="variable">bookDao2</span> <span class="operator">=</span> sqlSession2.getMapper(BookDao.class);</span><br><span class="line"></span><br><span class="line">  	bookDao2.selectBookByCondition(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"></span><br><span class="line">  	sqlSession2.close(); <span class="comment">//缓存未击中，重新查询数据库、重新缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十三、Druid连接池"><a href="#十三、Druid连接池" class="headerlink" title="十三、Druid连接池"></a>十三、Druid连接池</h3><hr>
<h4 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h4><blockquote>
<p>Druid 是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和 SQL 解析器组成。该项目主要是为了扩展 JDBC 的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计 SQL 信息、SQL 性能收集、SQL 注入检查、SQL 翻译等，程序员可以通过定制来实现自己需要的功能。</p>
</blockquote>
<h4 id="13-2-不同连接池对比"><a href="#13-2-不同连接池对比" class="headerlink" title="13.2 不同连接池对比"></a>13.2 不同连接池对比</h4><blockquote>
<p>测试执行申请归还连接 1,000,000（一百万）次总耗时性能对比。</p>
</blockquote>
<h5 id="13-2-1-测试环境"><a href="#13-2-1-测试环境" class="headerlink" title="13.2.1 测试环境"></a>13.2.1 测试环境</h5><table>
<thead>
<tr>
<th>环境</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>OS</td>
<td>OS X 10.8.2</td>
</tr>
<tr>
<td>CPU</td>
<td>Intel i7 2GHz 4 Core</td>
</tr>
<tr>
<td>JVM</td>
<td>Java Version 1.7.0_05</td>
</tr>
</tbody></table>
<h5 id="13-2-2-基准测试结果对比"><a href="#13-2-2-基准测试结果对比" class="headerlink" title="13.2.2 基准测试结果对比"></a>13.2.2 基准测试结果对比</h5><table>
<thead>
<tr>
<th>JDBC-Conn Pool</th>
<th>1 Thread</th>
<th>2 threads</th>
<th>5 threads</th>
<th>10 threads</th>
<th>20 threads</th>
<th>50 threads</th>
</tr>
</thead>
<tbody><tr>
<td><a href="">Druid</a></td>
<td><a href="">898</a></td>
<td><a href="">1,191</a></td>
<td><a href="">1,324</a></td>
<td><a href="">1,362</a></td>
<td><a href="">1,325</a></td>
<td><a href="">1,459</a></td>
</tr>
<tr>
<td>tomcat-jdbc</td>
<td>1,269</td>
<td>1,378</td>
<td>2,029</td>
<td>2,103</td>
<td>1,879</td>
<td>2,025</td>
</tr>
<tr>
<td>DBCP</td>
<td>2,324</td>
<td>5,055</td>
<td>5,446</td>
<td>5,471</td>
<td>5,524</td>
<td>5,415</td>
</tr>
<tr>
<td>BoneCP</td>
<td>3,738</td>
<td>3,150</td>
<td>3,194</td>
<td>5,681</td>
<td>11,018</td>
<td>23,125</td>
</tr>
<tr>
<td>jboss-datasource</td>
<td>4,377</td>
<td>2,988</td>
<td>3,680</td>
<td>3,980</td>
<td>32,708</td>
<td>37,742</td>
</tr>
<tr>
<td>C3P0</td>
<td>10,841</td>
<td>13,637</td>
<td>10,682</td>
<td>11,055</td>
<td>14,497</td>
<td>20,351</td>
</tr>
<tr>
<td>Proxool</td>
<td>16,337</td>
<td>16,187</td>
<td>18,310(Ex)</td>
<td>25,945</td>
<td>33,706(Ex)</td>
<td>39,501 (Ex)</td>
</tr>
</tbody></table>
<h5 id="13-2-3-测试结论"><a href="#13-2-3-测试结论" class="headerlink" title="13.2.3 测试结论"></a>13.2.3 测试结论</h5><ul>
<li><a href="">Druid 是性能最好的数据库连接池，tomcat-jdbc 和 druid 性能接近。</a></li>
<li>Proxool 在激烈并发时会抛异常，不适用。</li>
<li>C3P0 和 Proxool 都相当慢，影响 sql 执行效率。</li>
<li>BoneCP 性能并不优越，采用 LinkedTransferQueue 并没有能够获得性能提升。</li>
<li>除了 bonecp，其他的在 JDK 7 上跑得比 JDK 6 上快。</li>
<li>jboss-datasource 虽然稳定，但性能很糟糕。</li>
</ul>
<h4 id="13-3-配置pom-xml"><a href="#13-3-配置pom-xml" class="headerlink" title="13.3 配置pom.xml"></a>13.3 配置pom.xml</h4><blockquote>
<p>引入Druid依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="13-4-创建DruidDataSourceFactory"><a href="#13-4-创建DruidDataSourceFactory" class="headerlink" title="13.4 创建DruidDataSourceFactory"></a>13.4 创建DruidDataSourceFactory</h4><blockquote>
<p>MyDruidDataSourceFactory并继承PooledDataSourceFactory，并替换数据源。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.mybatis.part2.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDruidDataSourceFactory</span> <span class="keyword">extends</span> <span class="title class_">PooledDataSourceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDruidDataSourceFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataSource = <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();<span class="comment">//替换数据源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="13-5-修改mybatis-config-xml"><a href="#13-5-修改mybatis-config-xml" class="headerlink" title="13.5 修改mybatis-config.xml"></a>13.5 修改mybatis-config.xml</h4><blockquote>
<p>mybatis-config.xml中连接池相关配置。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;com.qf.mybatis.part2.utils.DruidDataSourceFactory&quot;</span>&gt;</span><span class="comment">&lt;!--数据源工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span> </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="">注意：&lt; property name&#x3D;”属性名” &#x2F;&gt;属性名必须与com.alibaba.druid.pool.DruidAbstractDataSource中一致。</a></p>
<h3 id="十四、PageHelper"><a href="#十四、PageHelper" class="headerlink" title="十四、PageHelper"></a>十四、PageHelper</h3><hr>
<h4 id="14-1-概念"><a href="#14-1-概念" class="headerlink" title="14.1 概念"></a>14.1 概念</h4><blockquote>
<p>PageHelper是适用于MyBatis框架的一个分页插件，使用方式极为便捷，支持任何复杂的单表、多表分页查询操作。</p>
</blockquote>
<h4 id="14-2-访问与下载"><a href="#14-2-访问与下载" class="headerlink" title="14.2 访问与下载"></a>14.2 访问与下载</h4><blockquote>
<p>官方网站：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p>
<p>下载地址：<a href="https://github.com/pagehelper/Mybatis-PageHelper">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
</blockquote>
<h4 id="14-3-开发步骤"><a href="#14-3-开发步骤" class="headerlink" title="14.3 开发步骤"></a>14.3 开发步骤</h4><blockquote>
<p>PageHelper中提供了多个分页操作的静态方法入口。</p>
</blockquote>
<h5 id="14-3-1-引入依赖"><a href="#14-3-1-引入依赖" class="headerlink" title="14.3.1 引入依赖"></a>14.3.1 引入依赖</h5><blockquote>
<p>pom.xml中引入PageHelper依赖。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="14-3-2-配置MyBatis-config-xml"><a href="#14-3-2-配置MyBatis-config-xml" class="headerlink" title="14.3.2 配置MyBatis-config.xml"></a>14.3.2 配置MyBatis-config.xml</h5><blockquote>
<p>在MyBatis-config.xml中添加&lt; plugins &gt;。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="tag">&lt;<span class="name">environments</span>&gt;</span>...<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="14-3-3-PageHelper应用方式"><a href="#14-3-3-PageHelper应用方式" class="headerlink" title="14.3.3 PageHelper应用方式"></a>14.3.3 PageHelper应用方式</h5><blockquote>
<p>使用PageHelper提供的静态方法设置分页查询条件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPagehelper</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> MyBatisUtils.getMapper(UserDao.class);</span><br><span class="line">		PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//使用PageHelper设置分页条件</span></span><br><span class="line">		List&lt;User&gt; users = userDao.selectAllUsers();</span><br><span class="line">		<span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">				System.out.println(user);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="14-4-PageInfo对象"><a href="#14-4-PageInfo对象" class="headerlink" title="14.4 PageInfo对象"></a>14.4 PageInfo对象</h4><blockquote>
<p>PageInfo对象中包含了分页操作中的所有相关数据。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">PageInfo结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/image-20200116145234073.png" alt="image-20200116145234073"></td>
</tr>
</tbody></table>
<h5 id="14-4-1-PageInfo应用方式"><a href="#14-4-1-PageInfo应用方式" class="headerlink" title="14.4.1 PageInfo应用方式"></a>14.4.1 PageInfo应用方式</h5><blockquote>
<p>使用PageInfo保存分页查询结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageInfo</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> MyBatisUtils.getMapper(UserDao.class);</span><br><span class="line">		PageHelper.startPage(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">		List&lt;User&gt; users = userDao.selectAllUsers();</span><br><span class="line">		PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;User&gt;(users);<span class="comment">//将分页查询的结果集保存在PageInfo对象中</span></span><br><span class="line">		System.out.println(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="14-4-2-注意事项"><a href="#14-4-2-注意事项" class="headerlink" title="14.4.2 注意事项"></a>14.4.2 注意事项</h5><blockquote>
<ul>
<li>只有在PageHelper.startPage()方法之后的<a href="">第一个查询会有执行分页</a>。</li>
<li>分页插件<a href="">不支持带有“for update”</a>的查询语句。</li>
<li>分页插件不支持<a href="">“嵌套查询”</a>，由于嵌套结果方式会导致结果集被折叠，所以无法保证分页结果数量正确。。</li>
</ul>
</blockquote>
<h5 id="14-4-3-分页练习"><a href="#14-4-3-分页练习" class="headerlink" title="14.4.3 分页练习"></a>14.4.3 分页练习</h5><blockquote>
<p>使用Servlet+JSP+MyBatis+分页插件，完成分页查询功能。</p>
</blockquote>
<h3 id="十五、补充【了解】"><a href="#十五、补充【了解】" class="headerlink" title="十五、补充【了解】"></a>十五、补充【了解】</h3><hr>
<blockquote>
<p><a href="">以下内容并非必备知识，了解即可。</a></p>
</blockquote>
<h4 id="15-1-MyBatis注解操作"><a href="#15-1-MyBatis注解操作" class="headerlink" title="15.1 MyBatis注解操作"></a>15.1 MyBatis注解操作</h4><blockquote>
<p>通过在接口中直接添加MyBatis注解，完成CRUD。</p>
</blockquote>
<ul>
<li><a href="">注意：接口注解定义完毕后，需将接口全限定名注册到mybatis-config.xml的&lt; mappers &gt;中。</a></li>
<li><a href="">经验：注解模式属于硬编码到.java文件中，失去了使用配置文件外部修改的优势，可结合需求选用。</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.mybatis.part1.annotations.UserMapper&quot;</span> /&gt;</span><span class="comment">&lt;!-- class=&quot;接口全限定名&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-1-1-查询"><a href="#15-1-1-查询" class="headerlink" title="15.1.1 查询"></a>15.1.1 查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM t_users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM t_users WHERE id = #&#123;id&#125; AND password = #&#123;pwd&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserByIdAndPwd_annotation</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;pwd&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="15-1-2-删除"><a href="#15-1-2-删除" class="headerlink" title="15.1.2 删除"></a>15.1.2 删除</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(value = &quot;DELETE FROM t_users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>



<h5 id="15-1-3-修改"><a href="#15-1-3-修改" class="headerlink" title="15.1.3 修改"></a>15.1.3 修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;UPDATE t_users SET name = #&#123;name&#125; , password = #&#123;password&#125; , salary = #&#123;salary&#125; , birthday = #&#123;birthday&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>



<h5 id="15-1-4-插入"><a href="#15-1-4-插入" class="headerlink" title="15.1.4 插入"></a>15.1.4 插入</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO t_users VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;,#&#123;salary&#125;,#&#123;birthday&#125;,null)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true , keyProperty = &quot;id&quot;)</span> <span class="comment">// 自增key，主键为id</span></span><br><span class="line"><span class="meta">@Insert(&quot;INSERT INTO t_users VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;,#&#123;salary&#125;,#&#123;birthday&#125;,null)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUserGeneratedKeys</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>



<h4 id="15-2-符号的应用场景"><a href="#15-2-符号的应用场景" class="headerlink" title="15.2 $符号的应用场景"></a>15.2 $符号的应用场景</h4><blockquote>
<p>${attribute} 属于字符串拼接SQL，而非预编译占位符，会有注入攻击问题，不建议在常规SQL中使用，常用于可解决动态生降序问题。</p>
</blockquote>
<h5 id="15-2-1-符号参数绑定"><a href="#15-2-1-符号参数绑定" class="headerlink" title="15.2.1 $符号参数绑定"></a>15.2.1 $符号参数绑定</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers1</span><span class="params">(User user)</span>; <span class="comment">// $&#123;name&#125; $&#123;id&#125; 可获取user中的属性值</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers2</span><span class="params">(<span class="meta">@Param(&quot;rule&quot;)</span> String rule)</span>; <span class="comment">//必须使用@Param否则会作为属性解析</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM t_users </span><br><span class="line">    WHERE name = &#x27;$&#123;name&#125;&#x27; or id = $&#123;id&#125; <span class="comment">&lt;!-- 拼接name和id，如果是字符类型需要用单引号：&#x27;$&#123;name&#125;&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM t_users </span><br><span class="line">  	ORDER BY id $&#123;rule&#125; <span class="comment">&lt;!-- 拼接 asc | desc --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(....);</span><br><span class="line">List&lt;User&gt; ulist1 = userDAO.selectAllUsers1(user); <span class="comment">//调用时传入user对象</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; ulist2 = userDao.selectAllUsers2(<span class="string">&quot;desc&quot;</span>); <span class="comment">//调用时传入asc | desc</span></span><br></pre></td></tr></table></figure>



<h5 id="15-2-2-符号注入攻击"><a href="#15-2-2-符号注入攻击" class="headerlink" title="15.2.2 $符号注入攻击"></a>15.2.2 $符号注入攻击</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsersByKeyword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM t_user</span><br><span class="line">  	WHERE name = &#x27;$&#123;name&#125;&#x27; <span class="comment">&lt;!-- 会存在注入攻击  比如传入参数是 【String name = &quot;tom&#x27; or &#x27;1&#x27;=&#x27;1&quot;;】--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">注入攻击，拼接的内容，改变了原sql语义，被攻击！</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/Pictures/%E6%B3%A8%E5%85%A5.jpg" alt="注入"></td>
</tr>
</tbody></table>
<h4 id="15-3-MyBatis处理关联关系-嵌套查询【了解】"><a href="#15-3-MyBatis处理关联关系-嵌套查询【了解】" class="headerlink" title="15.3 MyBatis处理关联关系-嵌套查询【了解】"></a>15.3 MyBatis处理关联关系-嵌套查询【了解】</h4><blockquote>
<p>思路：查询部门信息时，及联查询所属的员工信息。</p>
<ul>
<li>DepartmentDao接口中定义selectDepartmentById，并实现Mapper。</li>
<li>EmployeeDao接口中定义selectEmployeesByDeptId，并实现Mapper，</li>
<li>当selectDepartmentById被执行时，通过&lt; collection &gt;调用selectEmployeesByDeptId方法，并传入条件参数。</li>
</ul>
</blockquote>
<h5 id="15-3-1-主表查询"><a href="#15-3-1-主表查询" class="headerlink" title="15.3.1 主表查询"></a>15.3.1 主表查询</h5><blockquote>
<p>定义selectEmployeesByDeptId，并书写Mapper，实现根据部门ID查询员工信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据部门编号查询员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> did 部门编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 该部门中的所有员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">selectEmployeeByDeptId</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> String did)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.EmployeeDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据部门编号查询所有员工 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span> &gt;</span></span><br><span class="line">        SELECT id,name,salary,dept_id </span><br><span class="line">      	FROM t_employees </span><br><span class="line">      	WHERE dept_id = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-3-2-及联调用"><a href="#15-3-2-及联调用" class="headerlink" title="15.3.2 及联调用"></a>15.3.2 及联调用</h5><blockquote>
<h5 id="定义selectDepartmentById，并书写Mapper，实现根据部门ID查询部门信息，并及联查询该部门员工信息"><a href="#定义selectDepartmentById，并书写Mapper，实现根据部门ID查询部门信息，并及联查询该部门员工信息" class="headerlink" title="定义selectDepartmentById，并书写Mapper，实现根据部门ID查询部门信息，并及联查询该部门员工信息"></a>定义selectDepartmentById，并书写Mapper，实现根据部门ID查询部门信息，并及联查询该部门员工信息</h5></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">selectDepartmentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.DepartmentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;departmentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;location&quot;</span> <span class="attr">column</span>=<span class="string">&quot;location&quot;</span> /&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- column=&quot;传入目标方法的条件参数&quot;  select=&quot;及联调用的查询目标&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com.qf.mybatis.part2.one2many.EmployeeDao.selectEmployeeByDeptId&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllDepartments&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;departmentResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT id , name , location</span><br><span class="line">        FROM t_departments</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-3-3-延迟加载"><a href="#15-3-3-延迟加载" class="headerlink" title="15.3.3 延迟加载"></a>15.3.3 延迟加载</h5><blockquote>
<h5 id="mybatis-config-xml中开启延迟加载"><a href="#mybatis-config-xml中开启延迟加载" class="headerlink" title="mybatis-config.xml中开启延迟加载"></a>mybatis-config.xml中开启延迟加载</h5></blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 开启延迟加载（默认false） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="">注意：开启延迟加载后，如果不使用及联数据，则不会触发及联查询操作，有利于加快查询速度、节省内存资源。</a></li>
</ul>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2023/04/13/Spring/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-RTVGqmUd" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130834108.png" alt="LOGO"></p>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-原生web开发中存在哪些问题？"><a href="#1-1-原生web开发中存在哪些问题？" class="headerlink" title="1.1 原生web开发中存在哪些问题？"></a>1.1 原生web开发中存在哪些问题？</h4><blockquote>
<ul>
<li><p>传统Web开发存在硬编码所造成的过度程序耦合（例如：Service中作为属性Dao对象）。</p>
</li>
<li><p>部分Java EE API较为复杂，使用效率低（例如：JDBC开发步骤）。</p>
</li>
<li><p>侵入性强，移植性差（例如：DAO实现的更换，从Connection到SqlSession）。</p>
</li>
</ul>
</blockquote>
<h3 id="二、Spring框架"><a href="#二、Spring框架" class="headerlink" title="二、Spring框架"></a>二、Spring框架</h3><hr>
<h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><blockquote>
<ul>
<li><p>Spring是一个项目管理框架，同时也是一套Java EE解决方案。</p>
</li>
<li><p>Spring是众多优秀设计模式的组合（工厂、单例、代理、适配器、包装器、观察者、模板、策略）。</p>
</li>
<li><p>Spring并未替代现有框架产品，而是将众多框架进行有机整合，简化企业级开发，俗称”胶水框架”。</p>
</li>
</ul>
</blockquote>
<h4 id="2-2-访问与下载"><a href="#2-2-访问与下载" class="headerlink" title="2.2 访问与下载"></a>2.2 访问与下载</h4><blockquote>
<p>官方网站：<a href="https://spring.io/">https://spring.io/</a></p>
<p>下载地址：<a href="http://repo.spring.io/release/org/springframework/spring/">http://repo.spring.io/release/org/springframework/spring/</a></p>
</blockquote>
<h3 id="三、Spring架构组成"><a href="#三、Spring架构组成" class="headerlink" title="三、Spring架构组成"></a>三、Spring架构组成</h3><hr>
<blockquote>
<p>Spring架构由诸多模块组成，可分类为</p>
<ul>
<li>核心技术：<a href="">依赖注入</a>，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，<a href="">AOP</a>。</li>
<li>测试：模拟对象，TestContext框架，Spring MVC测试，WebTestClient。</li>
<li>数据访问：<a href="">事务</a>，DAO支持，JDBC，ORM，封送XML。</li>
<li>Spring MVC和 Spring WebFlux Web框架。</li>
<li>集成：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。</li>
<li>语言：Kotlin，Groovy，动态语言。</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Spring架构组成</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130834358.png" alt="001"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>GroupId</strong></th>
<th><strong>ArtifactId</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>org.springframework</td>
<td><a href="">spring-beans</a></td>
<td><a href="">Beans 支持，包含 Groovy</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-aop</a></td>
<td><a href="">基于代理的AOP支持</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-aspects</a></td>
<td><a href="">基于AspectJ 的切面</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-context</a></td>
<td><a href="">应用上下文运行时，包括调度和远程抽象</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-context-support</a></td>
<td><a href="">支持将常见的第三方类库集成到 Spring 应用上下文</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-core</a></td>
<td><a href="">其他模块所依赖的核心模块</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-expression</a></td>
<td><a href="">Spring 表达式语言，SpEL</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument</td>
<td>JVM 引导的仪表（监测器）代理</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument-tomcat</td>
<td>Tomcat 的仪表（监测器）代理</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jdbc</td>
<td>支持包括数据源设置和 JDBC 访问支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jms</td>
<td>支持包括发送&#x2F;接收JMS消息的助手类</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-messaging</td>
<td>对消息架构和协议的支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-orm</td>
<td>对象&#x2F;关系映射，包括对 JPA 和 Hibernate 的支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-oxm</td>
<td>对象&#x2F;XML 映射（Object&#x2F;XML Mapping，OXM）</td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-test</a></td>
<td><a href="">单元测试和集成测试支持组件</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-tx</a></td>
<td><a href="">事务基础组件，包括对 DAO 的支持及 JCA 的集成</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-web</a></td>
<td><a href="">web支持包，包括客户端及web远程调用</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-webmvc</a></td>
<td><a href="">REST web 服务及 web 应用的 MVC 实现</a></td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-webmvc-portlet</td>
<td>用于 Portlet 环境的MVC实现</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-websocket</td>
<td>WebSocket 和 SockJS 实现，包括对 STOMP 的支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td><a href="">spring-jcl</a></td>
<td><a href="">Jakarta Commons Logging 日志系统</a></td>
</tr>
</tbody></table>
<h3 id="四、自定义工厂"><a href="#四、自定义工厂" class="headerlink" title="四、自定义工厂"></a>四、自定义工厂</h3><hr>
<h4 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1 配置文件"></a>4.1 配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userDAO=com.qf.dao.UserDAOImpl</span><br><span class="line">userService=com.qf.service.UserServiceImpl</span><br></pre></td></tr></table></figure>

<h4 id="4-2-工厂类"><a href="#4-2-工厂类" class="headerlink" title="4.2 工厂类"></a>4.2 工厂类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFactory</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFactory</span><span class="params">(String config)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        properties.load(MyFactory.class.getResourceAsStream(config));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">// 获得类路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> properties.getProperty(beanName);</span><br><span class="line">        <span class="keyword">if</span>(classPath!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">claz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 反射：加载类对象</span></span><br><span class="line">            claz = Class.forName(classPath);</span><br><span class="line">            <span class="comment">// 反射：获得对象</span></span><br><span class="line">            <span class="keyword">return</span> claz.newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、构建Maven项目"><a href="#五、构建Maven项目" class="headerlink" title="五、构建Maven项目"></a>五、构建Maven项目</h3><hr>
<h4 id="5-1-新建项目"><a href="#5-1-新建项目" class="headerlink" title="5.1 新建项目"></a>5.1 新建项目</h4><table>
<thead>
<tr>
<th align="center">使用IDEA打开已创建的文件夹目录<img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130834643.png" alt="002"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="5-2-选择Maven目录"><a href="#5-2-选择Maven目录" class="headerlink" title="5.2 选择Maven目录"></a>5.2 选择Maven目录</h4><table>
<thead>
<tr>
<th align="center">选择Maven项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130834123.png" alt="003"></td>
</tr>
</tbody></table>
<h4 id="5-3-GAV坐标"><a href="#5-3-GAV坐标" class="headerlink" title="5.3 GAV坐标"></a>5.3 GAV坐标</h4><table>
<thead>
<tr>
<th align="center">GAV坐标</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130834485.png" alt="004"></td>
</tr>
</tbody></table>
<h3 id="六、Spring环境搭建"><a href="#六、Spring环境搭建" class="headerlink" title="六、Spring环境搭建"></a>六、Spring环境搭建</h3><hr>
<h4 id="6-1-pom-xml中引入Spring常用依赖"><a href="#6-1-pom-xml中引入Spring常用依赖" class="headerlink" title="6.1 pom.xml中引入Spring常用依赖"></a>6.1 pom.xml中引入Spring常用依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">         <span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">          http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring常用依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="6-2-创建Spring配置文件"><a href="#6-2-创建Spring配置文件" class="headerlink" title="6.2 创建Spring配置文件"></a>6.2 创建Spring配置文件</h4><blockquote>
<p>命名无限制，约定俗成命名有：spring-context.xml、applicationContext.xml、beans.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="七、Spring工厂编码"><a href="#七、Spring工厂编码" class="headerlink" title="七、Spring工厂编码"></a>七、Spring工厂编码</h3><hr>
<blockquote>
<p>定义目标Bean类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>spring-context.xml中的&lt; beans &gt;内部配置bean标签</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例（id:“唯一标识”  class=&quot;需要被创建的目标对象全限定名&quot;） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.factory.MyClass&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用Spring工厂API（ApplicationContext接口）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFactory</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序中的对象都交由Spring的ApplicationContext工厂进行创建。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件中所需创建的bean对象，并获得工厂对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-context.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过id获取bean对象</span></span><br><span class="line">		<span class="type">MyClass</span> <span class="variable">mc</span> <span class="operator">=</span> (MyClass) ctx.getBean(<span class="string">&quot;mc&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 使用对象</span></span><br><span class="line">		mc.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="八、依赖与配置文件详解"><a href="#八、依赖与配置文件详解" class="headerlink" title="八、依赖与配置文件详解"></a>八、依赖与配置文件详解</h3><hr>
<blockquote>
<p>Spring框架包含多个模块，每个模块各司其职，可结合需求引入相关依赖Jar包实现功能。</p>
</blockquote>
<h4 id="8-1-Spring依赖关系"><a href="#8-1-Spring依赖关系" class="headerlink" title="8.1 Spring依赖关系"></a>8.1 Spring依赖关系</h4><table>
<thead>
<tr>
<th align="center">Spring常用功能的Jar包依赖关系</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130835071.png" alt="image-20191230164517693"></td>
</tr>
</tbody></table>
<ul>
<li><a href="">注意：Jar包彼此存在依赖，只需引入最外层Jar即可由Maven自动将相关依赖Jar引入到项目中。</a></li>
</ul>
<h4 id="8-2-schema"><a href="#8-2-schema" class="headerlink" title="8.2 schema"></a>8.2 schema</h4><blockquote>
<p>配置文件中的顶级标签中包含了语义化标签的相关信息</p>
<ul>
<li>xmlns：语义化标签所在的命名空间。</li>
<li>xmlns:xsi：XMLSchema-instance 标签遵循Schema标签标准。</li>
<li>xsi:schemaLocation：xsd文件位置，用以描述标签语义、属性、取值范围等。</li>
</ul>
</blockquote>
<h3 id="九、IoC（Inversion-of-Control-）控制反转【重点】"><a href="#九、IoC（Inversion-of-Control-）控制反转【重点】" class="headerlink" title="九、IoC（Inversion of Control ）控制反转【重点】"></a>九、IoC（Inversion of Control ）控制反转【<code>重点</code>】</h3><hr>
<blockquote>
<p><strong>Inverse Of Controll：控制反转</strong></p>
<p><strong>反转了依赖关系的满足方式，由之前的自己创建依赖对象，变为由工厂推送。(变主动为被动，即反转)</strong></p>
<p><strong>解决了具有依赖关系的组件之间的强耦合，使得项目形态更加稳健</strong></p>
</blockquote>
<h4 id="9-1-项目中强耦合问题"><a href="#9-1-项目中强耦合问题" class="headerlink" title="9.1 项目中强耦合问题"></a>9.1 项目中强耦合问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDAOImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDAO</span>&#123;....&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// !!!强耦合了UserDAOImpl!!!,使得UserServiceImpl变得不稳健!!</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO= <span class="keyword">new</span> <span class="title class_">UserDAOImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.queryUser();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-2-解决方案"><a href="#9-2-解决方案" class="headerlink" title="9.2 解决方案"></a>9.2 解决方案</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不引用任何一个具体的组件(实现类)，在需要其他组件的位置预留存取值入口(set/get)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// !!!不再耦合任何DAO实现!!!,消除不稳健因素!!</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO；</span><br><span class="line">    <span class="comment">// 为userDAO定义set/get,允许userDAO属性接收spring赋值</span></span><br><span class="line">    <span class="comment">//Getters And Setters</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.queryUser();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UserServiceImpl组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 由spring为userDAO属性赋值，值为id=&quot;userDAO&quot;的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时，如果需要更换其他UserDAO实现类，则UserServiceImpl不用任何改动！</p>
<p>则此时的UserServiceImpl组件变得更加稳健！</p>
</blockquote>
<h3 id="十、DI（Dependency-Injection）依赖注入【重点】"><a href="#十、DI（Dependency-Injection）依赖注入【重点】" class="headerlink" title="十、DI（Dependency Injection）依赖注入【重点】"></a>十、DI（Dependency Injection）依赖注入【<code>重点</code>】</h3><hr>
<h4 id="10-1-概念"><a href="#10-1-概念" class="headerlink" title="10.1 概念"></a>10.1 概念</h4><blockquote>
<p>在Spring创建对象的同时，为其属性赋值，称之为依赖注入。</p>
</blockquote>
<h4 id="10-2-Set注入"><a href="#10-2-Set注入" class="headerlink" title="10.2 Set注入"></a>10.2 Set注入</h4><blockquote>
<p>创建对象时，Spring工厂会通过Set方法为对象的属性赋值。</p>
</blockquote>
<h5 id="10-2-1-定义目标Bean类型"><a href="#10-2-1-定义目标Bean类型" class="headerlink" title="10.2.1 定义目标Bean类型"></a>10.2.1 定义目标Bean类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bornDate;</span><br><span class="line">    <span class="keyword">private</span> String[] hobbys;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; phones;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; names;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; countries;</span><br><span class="line">    <span class="keyword">private</span> Properties files;</span><br><span class="line">    <span class="comment">//Getters And Setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="10-2-2-基本类型-字符串类型-日期类型"><a href="#10-2-2-基本类型-字符串类型-日期类型" class="headerlink" title="10.2.2 基本类型 + 字符串类型 + 日期类型"></a>10.2.2 基本类型 + 字符串类型 + 日期类型</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--base field--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bornDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1990/1/1&quot;</span> /&gt;</span><span class="comment">&lt;!--注意格式&quot;/&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="10-2-3-容器类型"><a href="#10-2-3-容器类型" class="headerlink" title="10.2.3 容器类型"></a>10.2.3 容器类型</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.User&quot;</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!--Array--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Run<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Swim<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Climb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Set--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phones&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>13777777777<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>13888888888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>13999999999<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>marry<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;CN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;US&quot;</span> <span class="attr">value</span>=<span class="string">&quot;America&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;KR&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Korea&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;first&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;second&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;third&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="10-2-4-自建类型"><a href="#10-2-4-自建类型" class="headerlink" title="10.2.4 自建类型"></a>10.2.4 自建类型</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--次要bean，被作为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;position&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京市海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;zipCode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100001&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主要bean，操作的主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span> /&gt;</span><span class="comment">&lt;!--address属性引用addr对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--次要bean，被作为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主要bean，操作的主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ud&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span> /&gt;</span><span class="comment">&lt;!--ud属性引用userDao对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="10-3-构造注入【了解】"><a href="#10-3-构造注入【了解】" class="headerlink" title="10.3 构造注入【了解】"></a>10.3 构造注入【了解】</h4><blockquote>
<p>创建对象时，Spring工厂会通过构造方法为对象的属性赋值。</p>
</blockquote>
<h5 id="10-3-1-定义目标Bean类型"><a href="#10-3-1-定义目标Bean类型" class="headerlink" title="10.3.1 定义目标Bean类型"></a>10.3.1 定义目标Bean类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Constructors</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id , String name , String sex , Integer age)</span>&#123;</span><br><span class="line">      	<span class="built_in">this</span>.id = id;</span><br><span class="line">    	<span class="built_in">this</span>.name = name;</span><br><span class="line">  	    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">	    <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="10-3-2-注入"><a href="#10-3-2-注入" class="headerlink" title="10.3.2 注入"></a>10.3.2 注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.zcg.spring.day1.t2.ioc.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 除标签名称有变化，其他均和Set注入一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="10-4-自动注入【了解】"><a href="#10-4-自动注入【了解】" class="headerlink" title="10.4 自动注入【了解】"></a>10.4 自动注入【了解】</h4><blockquote>
<p>不用在配置中 指定为哪个属性赋值，及赋什么值.</p>
<p>由spring自动根据某个 “原则” ，在工厂中查找一个bean，为属性注入属性值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO；</span><br><span class="line">    <span class="comment">//Getters And Setters</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为UserServiceImpl中的属性基于类型自动注入值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为UserServiceImpl中的属性基于类型自动注入值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.part1.injection.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十一、Bean细节"><a href="#十一、Bean细节" class="headerlink" title="十一、Bean细节"></a>十一、Bean细节</h3><hr>
<h4 id="11-1-控·制简单对象的单例、多例模式"><a href="#11-1-控·制简单对象的单例、多例模式" class="headerlink" title="11.1 控·制简单对象的单例、多例模式"></a>11.1 控·制简单对象的单例、多例模式</h4><blockquote>
<p>配置&lt; bean scope&#x3D;”singleton | prototype” &#x2F;&gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	singleton（默认）：每次调用工厂，得到的都是同一个对象。</span></span><br><span class="line"><span class="comment">	prototype：每次调用工厂，都会创建新的对象。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.zcg.spring.day1.t1.basic.MyClass&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>注意：需要根据场景决定对象的单例、多例模式。</li>
<li>可以共用：Service、DAO、SqlSessionFactory（或者是所有的工厂）。</li>
<li>不可共用：Connection、SqlSession、ShoppingCart。</li>
</ul>
<h4 id="11-2-FactoryBean创建复杂对象【了解】"><a href="#11-2-FactoryBean创建复杂对象【了解】" class="headerlink" title="11.2 FactoryBean创建复杂对象【了解】"></a>11.2 FactoryBean创建复杂对象【了解】</h4><blockquote>
<p>作用：让Spring可以创建复杂对象、或者无法直接通过反射创建的对象。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">FactoryBean解决复杂对象创建</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130835268.png" alt="image-20190419235128663"></td>
</tr>
</tbody></table>
<h5 id="11-2-1-实现FactoryBean接口"><a href="#11-2-1-实现FactoryBean接口" class="headerlink" title="11.2.1 实现FactoryBean接口"></a>11.2.1 实现FactoryBean接口</h5><table>
<thead>
<tr>
<th align="center">接口方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130835371.png" alt="image-20190419234550731"></td>
</tr>
</tbody></table>
<ul>
<li>注意：isSingleton方法的返回值，需根据所创建对象的特点决定返回true&#x2F;false。</li>
<li>例如：Connection 不应该被多个用户共享，返回false。</li>
<li>例如：SqlSessionFactory 重量级资源，不该过多创建，返回true。</li>
</ul>
<h5 id="11-2-2-配置spring-context-xml"><a href="#11-2-2-配置spring-context-xml" class="headerlink" title="11.2.2 配置spring-context.xml"></a>11.2.2 配置spring-context.xml</h5><table>
<thead>
<tr>
<th align="center">配置与获取方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130835289.png" alt="image-20190419235939298"></td>
</tr>
</tbody></table>
<h5 id="11-2-3-特例"><a href="#11-2-3-特例" class="headerlink" title="11.2.3 特例"></a>11.2.3 特例</h5><table>
<thead>
<tr>
<th align="center">获取FactoryBean接口的实现类对象，而非getObject()所生产的对象。</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130836326.png" alt="image-20190420000713143"></td>
</tr>
</tbody></table>
<h3 id="十二、Spring工厂特性"><a href="#十二、Spring工厂特性" class="headerlink" title="十二、Spring工厂特性"></a>十二、Spring工厂特性</h3><hr>
<h4 id="12-1-饿汉式创建优势"><a href="#12-1-饿汉式创建优势" class="headerlink" title="12.1 饿汉式创建优势"></a>12.1 饿汉式创建优势</h4><blockquote>
<p>工厂创建之后，会将Spring配置文件中的所有对象都创建完成（饿汉式）。</p>
<p>提高程序运行效率。避免多次IO，减少对象创建时间。（概念接近连接池，一次性创建好，使用时直接获取）</p>
</blockquote>
<h4 id="12-2-生命周期方法"><a href="#12-2-生命周期方法" class="headerlink" title="12.2 生命周期方法"></a>12.2 生命周期方法</h4><blockquote>
<ul>
<li><p>自定义初始化方法：添加“init-method”属性，Spring则会在创建对象之后，调用此方法。</p>
</li>
<li><p>自定义销毁方法：添加“destroy-method”属性，Spring则会在销毁对象之前，调用此方法。</p>
</li>
<li><p>销毁：工厂的close()方法被调用之后，Spring会毁掉所有已创建的单例对象。</p>
</li>
<li><p>分类：Singleton对象由Spring容器销毁、Prototype对象由JVM销毁。</p>
</li>
</ul>
</blockquote>
<h4 id="12-3-生命周期注解"><a href="#12-3-生命周期注解" class="headerlink" title="12.3 生命周期注解"></a>12.3 生命周期注解</h4><blockquote>
<p>初始化注解、销毁注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span> <span class="comment">//初始化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init method executed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span> <span class="comment">//销毁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;destroy method executed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="12-4-生命周期阶段"><a href="#12-4-生命周期阶段" class="headerlink" title="12.4 生命周期阶段"></a>12.4 生命周期阶段</h4><blockquote>
<p><strong>单例bean：</strong>singleton</p>
<p>随工厂启动<a href="">创建</a> &#x3D;&#x3D;》  <a href="">构造方法</a>  &#x3D;&#x3D;》 <a href="">set方法(注入值)</a>  &#x3D;&#x3D;》 <a href="">init(初始化)</a>  &#x3D;&#x3D;》 <a href="">构建完成</a> &#x3D;&#x3D;》<a href="">随工厂关闭销毁</a></p>
</blockquote>
<blockquote>
<p><strong>多例bean：</strong>prototype</p>
<p>被使用时<a href="">创建</a> &#x3D;&#x3D;》  <a href="">构造方法</a>  &#x3D;&#x3D;》 <a href="">set方法(注入值)</a>  &#x3D;&#x3D;》 <a href="">init(初始化)</a>  &#x3D;&#x3D;》 <a href="">构建完成</a> &#x3D;&#x3D;》<a href="">JVM垃圾回收销毁</a></p>
</blockquote>
<h3 id="十三、代理设计模式"><a href="#十三、代理设计模式" class="headerlink" title="十三、代理设计模式"></a>十三、代理设计模式</h3><hr>
<h4 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h4><blockquote>
<p>将核心功能与辅助功能（事务、日志、性能监控代码）分离，达到核心业务功能更纯粹、辅助业务功能可复用。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">功能分离</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130836912.png" alt="image-20190420002535800"></td>
</tr>
</tbody></table>
<h4 id="13-2-静态代理设计模式"><a href="#13-2-静态代理设计模式" class="headerlink" title="13.2 静态代理设计模式"></a>13.2 静态代理设计模式</h4><blockquote>
<p>通过代理类的对象，为原始类的对象（目标类的对象）添加辅助功能，更容易更换代理实现类、利于维护。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">静态代理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130836848.png" alt="image-20190420004330551"></td>
</tr>
</tbody></table>
<ul>
<li>代理类 &#x3D; 实现原始类相同接口 + 添加辅助功能 + 调用原始类的业务方法。</li>
<li>静态代理的问题<ul>
<li>代理类数量过多，不利于项目的管理。</li>
<li>多个代理类的辅助功能代码冗余，修改时，维护性差。</li>
</ul>
</li>
</ul>
<h4 id="13-3-动态代理设计模式"><a href="#13-3-动态代理设计模式" class="headerlink" title="13.3 动态代理设计模式"></a>13.3 动态代理设计模式</h4><blockquote>
<p>动态创建代理类的对象，为原始类的对象添加辅助功能。</p>
</blockquote>
<h5 id="13-3-1-JDK动态代理实现（基于接口）"><a href="#13-3-1-JDK动态代理实现（基于接口）" class="headerlink" title="13.3.1 JDK动态代理实现（基于接口）"></a>13.3.1 JDK动态代理实现（基于接口）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">OrderService</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderServiceImpl</span>();</span><br><span class="line"><span class="comment">//额外功能</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>()&#123;<span class="comment">//1.设置回调函数（额外功能代码）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        method.invoke(os, args);</span><br><span class="line">         System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2.创建动态代理类</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxyObj</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader , Interfaces , InvocationHandler);</span><br></pre></td></tr></table></figure>



<h5 id="13-3-2-CGlib动态代理实现（基于继承）"><a href="#13-3-2-CGlib动态代理实现（基于继承）" class="headerlink" title="13.3.2 CGlib动态代理实现（基于继承）"></a>13.3.2 CGlib动态代理实现（基于继承）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">OrderService</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderServiceImpl</span>();</span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">cnh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();<span class="comment">//1.创建字节码曾强对象</span></span><br><span class="line">enh.setSuperclass(os.getClass());<span class="comment">//2.设置父类（等价于实现原始类接口）</span></span><br><span class="line">enh.setCallback(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>()&#123;<span class="comment">//3.设置回调函数（额外功能代码）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy , Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> method.invoke(os,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">OrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (OrderService)enh.create();<span class="comment">//4.创建动态代理类</span></span><br><span class="line">proxy,createOrder();</span><br></pre></td></tr></table></figure>



<h3 id="十四、面向切面编程【重点】"><a href="#十四、面向切面编程【重点】" class="headerlink" title="十四、面向切面编程【重点】"></a>十四、面向切面编程【<code>重点</code>】</h3><hr>
<h4 id="14-1-概念"><a href="#14-1-概念" class="headerlink" title="14.1 概念"></a>14.1 概念</h4><blockquote>
<p>AOP（Aspect Oriented Programming），即面向切面编程，利用一种称为”横切”的技术，剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>
</blockquote>
<h4 id="14-2-AOP开发术语"><a href="#14-2-AOP开发术语" class="headerlink" title="14.2 AOP开发术语"></a>14.2 AOP开发术语</h4><blockquote>
<p>*<br>    连接点(Joinpoint)：连接点是程序类中客观存在的方法，可被Spring拦截并切入内容。</p>
<p>*<br>    切入点(Pointcut)：被Spring切入连接点。</p>
<p>*<br>    通知、增强(Advice)：可以为切入点添加额外功能，分为：前置通知、后置通知、异常通知、环绕通知等。</p>
<p>*<br>    目标对象(Target)：代理的目标对象</p>
<ul>
<li><p>引介(Introduction)：一种特殊的增强，可在运行期为类动态添加Field和Method。</p>
</li>
<li><p>  织入(Weaving)：把通知应用到具体的类，进而创建新的代理类的过程。</p>
</li>
<li><p>  代理(Proxy)：被AOP织入通知后，产生的结果类。</p>
</li>
<li><p>  切面(Aspect)：由切点和通知组成，将横切逻辑织入切面所指定的连接点中。</p>
</li>
</ul>
</blockquote>
<h4 id="14-3-作用"><a href="#14-3-作用" class="headerlink" title="14.3 作用"></a>14.3 作用</h4><blockquote>
<p>Spring的AOP编程即是通过动态代理类为原始类的方法添加辅助功能。</p>
</blockquote>
<h4 id="14-4-环境搭建"><a href="#14-4-环境搭建" class="headerlink" title="14.4 环境搭建"></a>14.4 环境搭建</h4><blockquote>
<p>引入AOP相关依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>spring-context.xml引入AOP命名空间</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       &quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="14-5-开发流程"><a href="#14-5-开发流程" class="headerlink" title="14.5 开发流程"></a>14.5 开发流程</h4><blockquote>
<p>定义原始类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.aaron.aop.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.aaron.aop.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save method executed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>定义通知类（添加额外功能）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.aaron.aop.basic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123; <span class="comment">//实现前置通知接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice executed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>定义bean标签</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--原始对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;us&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.aaron.aop.basic.UserServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--辅助对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.aaron.aop.basic.MyAdvice&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>定义切入点（PointCut）</p>
<p>形成切面（Aspect）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* save())&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组装切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="14-6-AOP小结"><a href="#14-6-AOP小结" class="headerlink" title="14.6 AOP小结"></a>14.6 AOP小结</h4><blockquote>
<ul>
<li><p>通过AOP提供的编码流程，更便利的定制切面，更方便的定制了动态代理。</p>
</li>
<li><p>进而彻底解决了辅助功能冗余的问题；</p>
</li>
<li><p>业务类中职责单一性得到更好保障；</p>
</li>
<li><p>辅助功能也有很好的复用性。</p>
</li>
</ul>
</blockquote>
<h4 id="14-7-通知类【可选】"><a href="#14-7-通知类【可选】" class="headerlink" title="14.7 通知类【可选】"></a>14.7 通知类【可选】</h4><blockquote>
<p>定义通知类，达到通知效果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">前置通知：MethodBeforeAdvice</span><br><span class="line"></span><br><span class="line">后置通知：AfterAdvice</span><br><span class="line"></span><br><span class="line">后置通知：AfterReturningAdvice <span class="comment">//有异常不执行，方法会因异常而结束，无返回值</span></span><br><span class="line"></span><br><span class="line">异常通知：ThrowsAdvice</span><br><span class="line"></span><br><span class="line">环绕通知：MethodInterceptor</span><br></pre></td></tr></table></figure>



<h4 id="14-8-通配切入点"><a href="#14-8-通配切入点" class="headerlink" title="14.8 通配切入点"></a>14.8 通配切入点</h4><blockquote>
<p>根据表达式通配切入点</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--匹配参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *(com.qf.aaron.aop.basic.User))&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配方法名（无参）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* save())&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配方法名（任意参数）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* save(..))&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配返回值类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(com.qf.aaron.aop.basic.User *(..))&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qf.aaron.aop.basic.UserServiceImpl.*(..))&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qf.aaron.aop.basic.*.*(..))&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--匹配包名、以及子包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qf.aaron.aop..*.*(..))&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="14-9-JDK和CGLIB选择"><a href="#14-9-JDK和CGLIB选择" class="headerlink" title="14.9 JDK和CGLIB选择"></a>14.9 JDK和CGLIB选择</h4><blockquote>
<ul>
<li><p>spring底层，包含了jdk代理和cglib代理两种动态代理生成机制</p>
</li>
<li><p>基本规则是：目标业务类如果有接口则用JDK代理，没有接口则用CGLib代理</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultAopProxyFactory</span>&#123;</span><br><span class="line">    <span class="comment">// 该方法中明确定义了 JDK代理和CGLib代理的选取规则</span></span><br><span class="line">    <span class="comment">// 基本规则是：目标业务类如果有接口则用JDK代理，没有接口则用CGLib代理</span></span><br><span class="line">    <span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">()</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="14-10-后处理器"><a href="#14-10-后处理器" class="headerlink" title="14.10 后处理器"></a>14.10 后处理器</h4><blockquote>
<ul>
<li><p>spring中定义了很多后处理器；</p>
</li>
<li><p>每个bean在创建完成之前 ，都会有一个后处理过程，即再加工，对bean做出相关改变和调整；</p>
</li>
<li><p>spring-AOP中，就有一个专门的后处理器，负责通过原始业务组件(Service),再加工得到一个代理组件。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">常用后处理器</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130836124.jpg" alt="系统后处理器"></td>
</tr>
</tbody></table>
<h5 id="14-10-1-后处理器定义"><a href="#14-10-1-后处理器定义" class="headerlink" title="14.10.1 后处理器定义"></a>14.10.1 后处理器定义</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义bean后处理器</span></span><br><span class="line"><span class="comment"> * 作用：在bean的创建之后，进行再加工</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在bean的init方法之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean  原始的bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后处理器 在init之前执行~~~&quot;</span>+bean.getClass());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在bean的init方法之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean  postProcessBeforeInitialization返回的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后处理器 在init之后执行~~~&quot;</span>+bean.getClass());</span><br><span class="line">        <span class="keyword">return</span> bean;<span class="comment">// 此处的返回是 getBean() 最终的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="14-10-2-配置后处理器"><a href="#14-10-2-配置后处理器" class="headerlink" title="14.10.2 配置后处理器"></a>14.10.2 配置后处理器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置后处理器,将对工厂中所有的bean声明周期进行干预 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qianfeng.beanpostprocessor.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="14-10-3-bean生命周期"><a href="#14-10-3-bean生命周期" class="headerlink" title="14.10.3 bean生命周期"></a>14.10.3 bean生命周期</h5><blockquote>
<p>构造 》 注入属性 满足依赖 》 后处理器前置过程   》 初始化  》后处理器后置过程 》 返回 》 销毁</p>
</blockquote>
<h5 id="14-10-4-动态代理源码-了解"><a href="#14-10-4-动态代理源码-了解" class="headerlink" title="14.10.4 动态代理源码(了解)"></a>14.10.4 动态代理源码(了解)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractAutoProxyCreator是 AspectJAwareAdvisorAutoProxyCreator的父类</span></span><br><span class="line"><span class="comment">// 该后处理器类中的 wrapIfNecessary方法即动态代理生成过程</span></span><br><span class="line">AbstractAutoProxyCreator#postProcessAfterInitialization(Object bean, String beanName)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">        <span class="comment">// 开始动态定制代理</span></span><br><span class="line">        <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十五、Spring-MyBatis【重点】"><a href="#十五、Spring-MyBatis【重点】" class="headerlink" title="十五、Spring + MyBatis【重点】"></a>十五、Spring + MyBatis【<code>重点</code>】</h3><hr>
<h4 id="15-1-配置数据源"><a href="#15-1-配置数据源" class="headerlink" title="15.1 配置数据源"></a>15.1 配置数据源</h4><blockquote>
<p>将数据源配置到项目中</p>
</blockquote>
<h5 id="15-1-1-引入jdbc-properties配置文件"><a href="#15-1-1-引入jdbc-properties配置文件" class="headerlink" title="15.1.1 引入jdbc.properties配置文件"></a>15.1.1 引入jdbc.properties配置文件</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jdbc.properties</span></span><br><span class="line"><span class="attr">jdbc.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<h5 id="15-1-2-整合Spring配置文件和properties配置文件"><a href="#15-1-2-整合Spring配置文件和properties配置文件" class="headerlink" title="15.1.2 整合Spring配置文件和properties配置文件"></a>15.1.2 整合Spring配置文件和properties配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-context.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件参数化（参数占位符）--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--与PooledDataSource集成（二选一）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.datasource.pooled.PooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--与DruidDataSource集成（二选一）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基本配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-1-3-Druid连接池可选参数"><a href="#15-1-3-Druid连接池可选参数" class="headerlink" title="15.1.3 Druid连接池可选参数"></a>15.1.3 Druid连接池可选参数</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基本配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-1-4-Druid监控中心"><a href="#15-1-4-Druid监控中心" class="headerlink" title="15.1.4 Druid监控中心"></a>15.1.4 Druid监控中心</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="15-1-5-测试监控中心"><a href="#15-1-5-测试监控中心" class="headerlink" title="15.1.5 测试监控中心"></a>15.1.5 测试监控中心</h5><blockquote>
<p>配置tomcat，并访问protocol:&#x2F;&#x2F;ip:port&#x2F;project&#x2F;druid&#x2F;index.html</p>
</blockquote>
<h4 id="15-2-整合MyBatis"><a href="#15-2-整合MyBatis" class="headerlink" title="15.2 整合MyBatis"></a>15.2 整合MyBatis</h4><blockquote>
<p>将 SqlSessionFactory、DAO、Service 配置到项目中</p>
</blockquote>
<h5 id="15-2-1-导入依赖"><a href="#15-2-1-导入依赖" class="headerlink" title="15.2.1 导入依赖"></a>15.2.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring+mybatis集成依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="15-2-2-配置SqlSessionFactory"><a href="#15-2-2-配置SqlSessionFactory" class="headerlink" title="15.2.2 配置SqlSessionFactory"></a>15.2.2 配置SqlSessionFactory</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 工厂bean：生成SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao-mapper文件信息 ,如果映射文件和dao接口 同包且同名，则此配置可省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/qf/spring/dao/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 dao-mapper文件中的实体 定义缺省包路径 </span></span><br><span class="line"><span class="comment">		如：&lt;select id=&quot;queryAll&quot; resultType=&quot;User&quot;&gt; 中 User类可以不定义包</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qf.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="15-2-3-配置MapperScannerConfigurer"><a href="#15-2-3-配置MapperScannerConfigurer" class="headerlink" title="15.2.3 配置MapperScannerConfigurer"></a>15.2.3 配置MapperScannerConfigurer</h5><blockquote>
<p>管理DAO实现类的创建，并创建DAO对象，存入工厂管理</p>
<ul>
<li><p>扫描所有DAO接口,去构建DAO实现</p>
</li>
<li><p>将DAO实现存入工厂管理 </p>
</li>
<li><p>DAO实现对象在工厂中的id是：“首字母小写的-接口的类名”，   </p>
<p>例如：UserDAO&#x3D;&#x3D;&gt;userDAO , OrderDAO&#x3D;&#x3D;&gt;orderDAO</p>
</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapperScannerConfigurer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer9&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">   	<span class="comment">&lt;!-- dao接口所在的包  如果有多个包，可以用逗号或分号分隔 </span></span><br><span class="line"><span class="comment">  		&lt;property name=&quot;basePackage&quot; value=&quot;com.a.dao,com.b.dao&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">   	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.qf.spring.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果工厂中只有一个SqlSessionFactory的bean，此配置可省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="15-2-4-配置Service"><a href="#15-2-4-配置Service" class="headerlink" title="15.2.4 配置Service"></a>15.2.4 配置Service</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qf.spring.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意ref中的值是对应DAO接口的首字母小写的接口名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDAO&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDAO&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十六、事务【重点】"><a href="#十六、事务【重点】" class="headerlink" title="十六、事务【重点】"></a>十六、事务【<code>重点</code>】</h3><h4 id="spring-xml文件中-tx-method-的各个属性"><a href="#spring-xml文件中-tx-method-的各个属性" class="headerlink" title="spring xml文件中 tx:method 的各个属性"></a>spring xml文件中 tx:method 的各个属性</h4><p>在Spring中，tx:method是用于定义事务管理的XML元素。它可以用于指定某个方法或一组方法的事务属性。tx:method有以下属性：</p>
<ol>
<li>name：必需属性，指定方法名或方法名的通配符表达式。</li>
<li>propagation：指定事务的传播行为，支持以下常量值：</li>
</ol>
<ul>
<li>PROPAGATION_REQUIRED（默认）：当前方法必须在一个事务内执行，如果当前没有事务，则创建一个新事务。</li>
<li>PROPAGATION_REQUIRES_NEW：当前方法必须在一个新事务内执行，如果当前存在事务，则挂起当前事务。</li>
<li>PROPAGATION_SUPPORTS：当前方法不需要在事务内执行，但如果当前存在事务，则加入该事务。</li>
<li>PROPAGATION_NOT_SUPPORTED：当前方法不应该在事务内执行，如果当前存在事务，则挂起该事务。</li>
<li>PROPAGATION_NEVER：当前方法不应该在事务内执行，如果当前存在事务，则抛出异常。</li>
<li>PROPAGATION_MANDATORY：当前方法必须在事务内执行，如果当前不存在事务，则抛出异常。</li>
<li>PROPAGATION_NESTED：当前方法必须在当前事务的嵌套事务内执行，如果当前不存在事务，则创建一个新事务。</li>
</ul>
<ol>
<li>isolation：指定事务的隔离级别，支持以下常量值：</li>
</ol>
<ul>
<li>ISOLATION_DEFAULT（默认）：使用默认的隔离级别。</li>
<li>ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取未提交的数据。</li>
<li>ISOLATION_READ_COMMITTED：允许读取已提交的数据，避免了脏读，但仍允许不可重复读和幻读。</li>
<li>ISOLATION_REPEATABLE_READ：允许读取一致性的数据，避免了脏读和不可重复读，但仍允许幻读。</li>
<li>ISOLATION_SERIALIZABLE：最高的隔离级别，完全避免了脏读、不可重复读和幻读。</li>
</ul>
<ol>
<li>timeout：指定事务的超时时间（单位：秒）。</li>
<li>read-only：指定事务是否为只读事务。</li>
<li>rollback-for：指定哪些异常会触发事务回滚，支持指定一个或多个异常类。</li>
<li>no-rollback-for：指定哪些异常不会触发事务回滚，支持指定一个或多个异常类。</li>
</ol>
<hr>
<h4 id="16-1-配置DataSourceTransactionManager"><a href="#16-1-配置DataSourceTransactionManager" class="headerlink" title="16.1 配置DataSourceTransactionManager"></a>16.1 配置DataSourceTransactionManager</h4><blockquote>
<p>事务管理器，其中持有DataSource，可以控制事务功能（commit,rollback等）。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 引入一个事务管理器，其中依赖DataSource,借以获得连接，进而控制事务逻辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：DataSourceTransactionManager 和 SqlSessionFactoryBean 要注入同一个DataSource的Bean，否则事务控制失败!!!</p>
</blockquote>
<p>####16.2 配置事务通知</p>
<blockquote>
<p>基于事务管理器，进一步定制，生成一个额外功能：Advice。</p>
<p>此Advice可以切入任何需要事务的方法，通过事务管理器为方法控制事务。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;tx&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;insertUser&quot; rollback-for=&quot;Exception&quot; isolation=&quot;DEFAULT&quot;    </span></span><br><span class="line"><span class="comment">              	propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以User结尾的方法，切入此方法时，采用对应事务实行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*User&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以query开头的方法，切入此方法时，采用对应事务实行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 剩余所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="16-3-事务属性"><a href="#16-3-事务属性" class="headerlink" title="16.3 事务属性"></a>16.3 事务属性</h4><h5 id="16-3-1-隔离级别"><a href="#16-3-1-隔离级别" class="headerlink" title="16.3.1 隔离级别"></a>16.3.1 隔离级别</h5><h6 id="16-3-1-1-概念"><a href="#16-3-1-1-概念" class="headerlink" title="16.3.1.1 概念"></a>16.3.1.1 概念</h6><blockquote>
<p><code>isolation</code>  隔离级别</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>(默认值）（采用数据库的默认的设置) （建议）</td>
</tr>
<tr>
<td>read-uncommited</td>
<td>读未提交</td>
</tr>
<tr>
<td>read-commited</td>
<td>读提交 （Oracle数据库默认的隔离级别）</td>
</tr>
<tr>
<td>repeatable-read</td>
<td>可重复读	（MySQL数据库默认的隔离级别）</td>
</tr>
<tr>
<td>serialized-read</td>
<td>序列化读</td>
</tr>
</tbody></table>
<blockquote>
<p>隔离级别由低到高为：read-uncommited &lt; read-commited &lt; repeatable-read &lt; serialized-read</p>
</blockquote>
<h6 id="16-3-1-2-特性"><a href="#16-3-1-2-特性" class="headerlink" title="16.3.1.2 特性"></a>16.3.1.2 特性</h6><blockquote>
<ul>
<li><p>安全性：级别越高，多事务并发时，越安全。因为共享的数据越来越少，事务间彼此干扰减少。</p>
</li>
<li><p>并发性：级别越高，多事务并发时，并发越差。因为共享的数据越来越少，事务间阻塞情况增多。</p>
</li>
</ul>
</blockquote>
<h6 id="16-3-1-3-并发问题"><a href="#16-3-1-3-并发问题" class="headerlink" title="16.3.1.3 并发问题"></a>16.3.1.3 并发问题</h6><blockquote>
<p>事务并发时的安全问题</p>
</blockquote>
<table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读取到另一个事务还未提交的数据。大于等于 read-commited 可防止</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务内多次读取一行数据的相同内容，其结果不一致。大于等于 repeatable-read 可防止</td>
</tr>
<tr>
<td>幻影读</td>
<td>一个事务内多次读取一张表中的相同内容，其结果不一致。serialized-read 可防止</td>
</tr>
</tbody></table>
<h5 id="16-3-2-传播行为"><a href="#16-3-2-传播行为" class="headerlink" title="16.3.2 传播行为"></a>16.3.2 传播行为</h5><blockquote>
<p><code>propagation</code>传播行为</p>
</blockquote>
<blockquote>
<p>当涉及到事务嵌套（Service调用Service）时，可以设置：</p>
<ul>
<li><p>SUPPORTS &#x3D; 不存在外部事务，则不开启新事务；存在外部事务，则合并到外部事务中。（适合查询）</p>
</li>
<li><p>REQUIRED &#x3D; 不存在外部事务，则开启新事务；存在外部事务，则合并到外部事务中。 (默认值)（适合增删改）</p>
</li>
</ul>
</blockquote>
<h5 id="16-3-3-读写性"><a href="#16-3-3-读写性" class="headerlink" title="16.3.3 读写性"></a>16.3.3 读写性</h5><blockquote>
<p><code>readonly</code> 读写性</p>
</blockquote>
<blockquote>
<ul>
<li><p>true：只读，可提高查询效率。(适合查询)</p>
</li>
<li><p>false：可读可写。 (默认值)（适合增删改）</p>
</li>
</ul>
</blockquote>
<h5 id="16-3-4-事务超时"><a href="#16-3-4-事务超时" class="headerlink" title="16.3.4 事务超时"></a>16.3.4 事务超时</h5><blockquote>
<p><code>timeout</code>事务超时时间 </p>
</blockquote>
<blockquote>
<p>当前事务所需操作的数据被其他事务占用，则等待。</p>
<ul>
<li>100：自定义等待时间100（秒）。</li>
<li>-1：由数据库指定等待时间，默认值。（建议）</li>
</ul>
</blockquote>
<h5 id="16-3-5-事务回滚"><a href="#16-3-5-事务回滚" class="headerlink" title="16.3.5 事务回滚"></a>16.3.5 事务回滚</h5><blockquote>
<p><code>rollback-for</code>  回滚属性</p>
</blockquote>
<blockquote>
<ul>
<li><p>如果事务中抛出 RuntimeException,则自动回滚</p>
</li>
<li><p>如果事务中抛出 CheckException(非运行时异常 Exception)，不会自动回滚，而是默认提交事务</p>
</li>
<li><p>处理方案 : 将CheckException转换成RuntimException上抛，或 设置 rollback-for&#x3D;”Exception”</p>
</li>
</ul>
</blockquote>
<h4 id="16-4-编织"><a href="#16-4-编织" class="headerlink" title="16.4 编织"></a>16.4 编织</h4><blockquote>
<p>将事务管理的Advice 切入需要事务的业务方法中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.qf.spring.service.UserServiceImpl.*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组织切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="十七、注解开发"><a href="#十七、注解开发" class="headerlink" title="十七、注解开发"></a>十七、注解开发</h3><hr>
<h4 id="17-1-声明bean"><a href="#17-1-声明bean" class="headerlink" title="17.1 声明bean"></a>17.1 声明bean</h4><blockquote>
<p>用于替换自建类型组件的 &lt;bean…&gt;标签；可以更快速的声明bean</p>
</blockquote>
<blockquote>
<ul>
<li><p>@Service  业务类专用<br>@Repository  dao实现类专用<br> @Controller  web层专用</p>
</li>
<li><p>@Component  通用</p>
</li>
<li><p>@Scope  用户控制bean的创建模式</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Service说明 此类是一个业务类，需要将此类纳入工厂  等价替换掉 &lt;bean class=&quot;xxx.UserServiceImpl&quot;&gt;</span></span><br><span class="line"><span class="comment">// @Service默认beanId == 首字母小写的类名&quot;userServiceImpl&quot;</span></span><br><span class="line"><span class="comment">// @Service(&quot;userService&quot;) 自定义beanId为&quot;userService&quot;</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//声明bean，且id=&quot;userServiceImpl&quot;</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">//声明创建模式，默认为单例模式 ；@Scope(&quot;prototype&quot;)即可设置为多例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> 	...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17-2-注入-DI"><a href="#17-2-注入-DI" class="headerlink" title="17.2 注入(DI)"></a>17.2 注入(DI)</h4><blockquote>
<p>用于完成bean中属性值的注入</p>
</blockquote>
<blockquote>
<ul>
<li>@Autowired  基于类型自动注入</li>
<li>@Resource    基于名称自动注入</li>
<li>@Qualifier(“userDAO”) 限定要自动注入的bean的id，一般和@Autowired联用 </li>
<li>@Value 注入简单类型数据 (jdk8种+String),</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//注入类型为UserDAO的bean</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDAO2&quot;)</span> <span class="comment">//如果有多个类型为UserDAO的bean，可以用此注解从中挑选一个</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Resource(&quot;userDAO3&quot;)</span> <span class="comment">//注入id=“userDAO3”的bean</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Resource //注入id=“userDAO”的bean</span></span><br><span class="line"><span class="comment">    private UserDAO userDAO;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XX</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;100&quot;)</span> <span class="comment">//注入数字</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value(&quot;shine&quot;)</span> <span class="comment">//注入String</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17-3-事务控制"><a href="#17-3-事务控制" class="headerlink" title="17.3 事务控制"></a>17.3 事务控制</h4><blockquote>
<p>用于控制事务切入</p>
<ul>
<li><p>@Transactional</p>
</li>
<li><p>工厂配置中的 &lt;tx:advice…. 和 &lt;aop:config… 可以省略 !!</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类中的每个方法都切入事务(有自己的事务控制的方法除外)</span></span><br><span class="line"><span class="meta">@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRED,readOnly=false,rollbackFor=Exception.class,timeout = -1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">//该方法自己的事务控制，仅对此方法有效</span></span><br><span class="line">	<span class="meta">@Transactional(propagation=Propagation.SUPPORTS)</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.queryAll();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17-4-注解所需配置"><a href="#17-4-注解所需配置" class="headerlink" title="17.4 注解所需配置"></a>17.4 注解所需配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知spring，哪些包中 有被注解的类、方法、属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:component-scan base-package=&quot;com.qf.a,com.xx.b&quot;&gt;&lt;/context:component-scan&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qf&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- 告知spring，@Transactional在定制事务时，基于txManager=DataSourceTransactionManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="17-5-AOP开发"><a href="#17-5-AOP开发" class="headerlink" title="17.5 AOP开发"></a>17.5 AOP开发</h4><h5 id="17-5-1-注解使用"><a href="#17-5-1-注解使用" class="headerlink" title="17.5.1 注解使用"></a>17.5.1 注解使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明此类是一个切面类：会包含切入点(pointcut)和通知(advice)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明组件，进入工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.qf.spring.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;pc()&quot;)</span> <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mybefore</span><span class="params">(JoinPoint a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target:&quot;</span>+a.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;args:&quot;</span>+a.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;method&#x27;s name:&quot;</span>+a.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;before~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value=&quot;pc()&quot;,returning=&quot;ret&quot;)</span> <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint a,Object ret)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after~~~~:&quot;</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;pc()&quot;)</span> <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myInterceptor</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;interceptor1~~~~&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> p.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;interceptor2~~~~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterThrowing(value=&quot;pc()&quot;,throwing=&quot;ex&quot;)</span> <span class="comment">// 异常通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myThrows</span><span class="params">(JoinPoint jp,Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;throws&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>+ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="17-5-2-配置"><a href="#17-5-2-配置" class="headerlink" title="17.5.2 配置"></a>17.5.2 配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下配置,启用aop注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十八、集成JUnit"><a href="#十八、集成JUnit" class="headerlink" title="十八、集成JUnit"></a>十八、集成JUnit</h3><hr>
<h4 id="18-1-导入依赖"><a href="#18-1-导入依赖" class="headerlink" title="18.1 导入依赖"></a>18.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="18-2-编码"><a href="#18-2-编码" class="headerlink" title="18.2 编码"></a>18.2 编码</h4><blockquote>
<p>可以免去工厂的创建过程；</p>
<p>可以直接将要测试的组件注入到测试类。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//由SpringJUnit4ClassRunner启动测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span> <span class="comment">//spring的配置文件位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span>&#123;<span class="comment">//当前测试类也会被纳入工厂中，所以其中属性可以注入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注入要测试的组件</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDAO&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 测试使用userDAO</span></span><br><span class="line">        userDAO.queryUser();</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMvc</title>
    <url>/2023/04/13/springMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-TObsstNP" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>



<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130847328.jpg" alt="logo"></p>
<p>[TOC]</p>
<h3 id="一、SpringMVC"><a href="#一、SpringMVC" class="headerlink" title="一、SpringMVC"></a>一、SpringMVC</h3><hr>
<h4 id="1-0-Spring-MVC执行流程如下："><a href="#1-0-Spring-MVC执行流程如下：" class="headerlink" title="1.0 Spring MVC执行流程如下："></a>1.0 Spring MVC执行流程如下：</h4><ol>
<li>客户端发送请求到DispatcherServlet</li>
</ol>
<p>DispatcherServlet是Spring MVC中的控制器，是整个请求处理的入口点。所有的请求都是通过DispatcherServlet进行分派和处理的。</p>
<ol>
<li>DispatcherServlet调用HandlerMapping</li>
</ol>
<p>HandlerMapping根据请求的URL解析出当前请求所对应的Handler(控制器)。这一步需要根据请求的URL映射规则匹配到Handler。</p>
<ol>
<li>HandlerMapping返回Handler给DispatcherServlet</li>
</ol>
<p>一旦找到当前请求所对应的Handler，HandlerMapping会将结果返回给DispatcherServlet。</p>
<ol>
<li>DispatcherServlet调用HandlerAdapter和Handler执行请求</li>
</ol>
<p>找到当前请求对应的控制器后，DispatcherServlet将调用对应的HandlerAdapter和Handler来执行请求。处理过程中，Handler可以访问一些对请求的信息，例如请求参数、请求头等。</p>
<ol>
<li>Handler执行请求并返回ModelAndView</li>
</ol>
<p>Handler会根据请求参数以及业务逻辑完成请求的处理，并返回一个ModelAndView对象，这里的ModelAndView实际上就是返回视图和数据的Map。</p>
<ol>
<li>HandlerAdapter将ModelAndView返回给DispatcherServlet</li>
</ol>
<p>HandlerAdapter负责将Handler执行后返回的ModelAndView对象返回给DispatcherServlet。</p>
<ol>
<li>DispatcherServlet使用ViewResolver解析ModelAndView中的View</li>
</ol>
<p>DispatcherServlet将从ModelAndView中获取到视图，然后使用ViewResolver来将视图解析为具体的页面。ViewResolver非常重要，它能够根据不同的页面请求返回对应的视图，从而实现了视图层的解耦合。</p>
<ol>
<li>返回给客户端</li>
</ol>
<p>DispatcherServlet将解析后的视图返回给客户端，视图最终被渲染为HTML格式，供客户端浏览器显示。至此，整个Spring MVC的请求处理过程完成。</p>
<h4 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h4><blockquote>
<p><strong>java开源框架，Spring Framework的一个独立模块。</strong></p>
<p><strong>MVC框架,在项目中开辟MVC层次架构</strong>    </p>
<p><strong>对控制器中的功能 包装 简化 扩展践行工厂模式，功能架构在工厂之上</strong></p>
</blockquote>
<h4 id="1-2-MVC架构"><a href="#1-2-MVC架构" class="headerlink" title="1.2 MVC架构"></a>1.2 MVC架构</h4><h5 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h5><table>
<thead>
<tr>
<th>名称</th>
<th>职责</th>
</tr>
</thead>
<tbody><tr>
<td>Model</td>
<td>模型：即业务模型，负责完成业务中的数据通信处理，对应项目中的 service和dao</td>
</tr>
<tr>
<td>View</td>
<td>视图：渲染数据，生成页面。对应项目中的Jsp</td>
</tr>
<tr>
<td>Controller</td>
<td>控制器：直接对接请求，控制MVC流程，调度模型，选择视图。对应项目中的Servlet</td>
</tr>
</tbody></table>
<h5 id="1-2-2-好处"><a href="#1-2-2-好处" class="headerlink" title="1.2.2 好处"></a>1.2.2 好处</h5><blockquote>
<ul>
<li><p>MVC是现下软件开发中的最流行的代码结构形态;</p>
</li>
<li><p>人们根据负责的不同逻辑，将项目中的代码分成 M V C 3个层次;</p>
</li>
<li><p>层次内部职责单一，层次之间耦合度低;</p>
</li>
<li><p>符合低耦合 高内聚的设计理念。也实际有利于项目的长期维护。</p>
</li>
</ul>
</blockquote>
<h3 id="二、开发流程"><a href="#二、开发流程" class="headerlink" title="二、开发流程"></a>二、开发流程</h3><hr>
<h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-配置核心-前端-控制器"><a href="#2-2-配置核心-前端-控制器" class="headerlink" title="2.2 配置核心(前端)控制器"></a>2.2 配置核心(前端)控制器</h4><blockquote>
<p>作为一个MVC框架，首先要解决的是：如何能够收到请求！</p>
<p>所以MVC框架大都会设计一款前端控制器，选型在 Servlet 或 Filter两者之一,在框架最前沿率先工作，接收所有请求。</p>
<p>此控制器在接收到请求后，还会负责springMVC的核心的调度管理，所以既是前端又是核心。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 局部参数：声明配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet启动时刻：可选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-后端控制器"><a href="#2-3-后端控制器" class="headerlink" title="2.3 后端控制器"></a>2.3 后端控制器</h4><blockquote>
<p>等价于之前定义的Servlet</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//声明这是一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span>  <span class="comment">//访问路径 ，等价于url-pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test1&quot;)</span>  <span class="comment">//访问路径</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>; <span class="comment">// 跳转:/index.jsp  </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test2&quot;)</span> <span class="comment">//访问路径</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello c9&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;views/users&quot;</span>;<span class="comment">//  跳转:/views/user.jsp</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-配置文件"><a href="#2-4-配置文件" class="headerlink" title="2.4 配置文件"></a>2.4 配置文件</h4><blockquote>
<p>默认名称：核心控制器名-servet.xml     默认位置：WEB-INF</p>
<p>随意名称：mvc.xml           随意位置：resources    但需要配置在核心控制器中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> 	<span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">							http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 告知springmvc  哪些包中 存在 被注解的类 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qf.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注册注解开发驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">	     作用：1.捕获后端控制器的返回值=&quot;index&quot;</span></span><br><span class="line"><span class="comment">	          2.解析： 在返回值的前后 拼接 ==&gt; &quot;/index.jsp&quot;</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-访问"><a href="#2-5-访问" class="headerlink" title="2.5 访问"></a>2.5 访问</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://localhost：8989/hello/test1</span><br><span class="line">http://localhost：8989/hello/test2</span><br></pre></td></tr></table></figure>



<h3 id="三、接收请求参数"><a href="#三、接收请求参数" class="headerlink" title="三、接收请求参数"></a>三、接收请求参数</h3><hr>
<h4 id="3-1-基本类型参数"><a href="#3-1-基本类型参数" class="headerlink" title="3.1 基本类型参数"></a>3.1 基本类型参数</h4><blockquote>
<p>请求参数和方法的形参 同名即可</p>
</blockquote>
<blockquote>
<p>springMVC默认可以识别的日期字符串格式为： YYYY&#x2F;MM&#x2F;dd HH:mm:ss<br>通过@DateTimeFormat可以修改默认日志格式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id  name gender</span></span><br><span class="line"><span class="comment">// http://localhost:8989/xxx/../test1?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam1</span><span class="params">(Integer id,</span></span><br><span class="line"><span class="params">                         String name,</span></span><br><span class="line"><span class="params">                         Boolean gender,</span></span><br><span class="line"><span class="params">                         <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>Date birth)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test param1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-实体收参【重点】"><a href="#3-2-实体收参【重点】" class="headerlink" title="3.2 实体收参【重点】"></a>3.2 实体收参【<code>重点</code>】</h4><blockquote>
<p>请求参数和实体的属性 同名即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">	<span class="keyword">private</span> Boolean gender;</span><br><span class="line">	<span class="comment">//set/get ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//http://localhost:8989/.../test2?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam2</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test param2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user:&quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-数组收参"><a href="#3-3-数组收参" class="headerlink" title="3.3 数组收参"></a>3.3 数组收参</h4><blockquote>
<p>简单类型的 数组</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fb&quot;</span>/&gt;</span>足球 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span>/&gt;</span>篮球 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;vb&quot;</span>/&gt;</span>排球</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://localhost:8989/.../test3?hobby=football&amp;hobby=basketball</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam3</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(String h:hobby)&#123;</span><br><span class="line">        System.out.print(h+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-集合收参-【了解】"><a href="#3-4-集合收参-【了解】" class="headerlink" title="3.4 集合收参 【了解】"></a>3.4 集合收参 【了解】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserList</span> &#123;</span><br><span class="line">	<span class="comment">//private User[] users;</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">	<span class="comment">//set/get..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;input type=&quot;text&quot; name=&quot;users[0].id&quot;/&gt;</span></span><br><span class="line"><span class="comment">// post请求：http://...?users[0].id=1&amp;users[0].name=zhangsan&amp;users[0].birth=2018-12-12&amp;users[1].id=2&amp;....</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam4</span><span class="params">(UserList userList)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-路径参数"><a href="#3-5-路径参数" class="headerlink" title="3.5 路径参数"></a>3.5 路径参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;id&#125; 定义名为id的路径；【/hello/&#123;id&#125;】的匹配能力和【/hello/*】等价</span></span><br><span class="line"><span class="comment">// http://localhost:8989/.../hello/10   &#123;id&#125;匹配到10</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">// @PathVariable将&#123;id&#125;路径匹配到值赋给id参数</span></span><br><span class="line"><span class="comment">// 路径名和参数名相同则@PathVariable(&quot;id&quot;)可简写为 @PathVariable</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam5</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id);            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8989/.../hello/tom   &#123;username&#125;匹配到tom</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam6</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String name)</span>&#123;<span class="comment">//将&#123;username&#125;路径匹配到的值赋给name参数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-中文乱码"><a href="#3-6-中文乱码" class="headerlink" title="3.6 中文乱码"></a>3.6 中文乱码</h4><blockquote>
<p>首先，页面中字符集统一</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">JSP : &lt;%<span class="meta">@page</span>  pageEncoding=<span class="string">&quot;utf-8&quot;</span> %&gt;</span><br><span class="line">HTML : &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次，tomcat中字符集设置，对get请求中，中文参数乱码有效</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Tomcat配置：URIEncoding=utf-8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后，设置此filter，对post请求中，中文参数乱码有效</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此过滤器会进行：request.setCharactorEncoding(&quot;utf-8&quot;); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="四、跳转"><a href="#四、跳转" class="headerlink" title="四、跳转"></a>四、跳转</h3><hr>
<h4 id="4-1-转发"><a href="#4-1-转发" class="headerlink" title="4.1 转发"></a>4.1 转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/forw&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForwardController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test forward1&quot;</span>);</span><br><span class="line">        <span class="comment">// 转发跳转 /views/users.jsp</span></span><br><span class="line">        <span class="comment">// return &quot;views/users&quot;;//和下一行等价</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/views/users.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testForward2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test forward2&quot;</span>);</span><br><span class="line">        <span class="comment">//转发到  /forw/test1</span></span><br><span class="line">        <span class="comment">//return &quot;forward:test1&quot;;//相对路径(转发到本类中的test1)</span></span><br><span class="line">        <span class="comment">//转发到  /forw/test1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/forw/test1&quot;</span>; <span class="comment">//绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-重定向"><a href="#4-2-重定向" class="headerlink" title="4.2 重定向"></a>4.2 重定向</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redir&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test redirect1&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向到 /redir/test1</span></span><br><span class="line">        <span class="comment">//return &quot;redirect:test1&quot;; //相对路径(转发到本类中的test1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/redir/test1&quot;</span>;<span class="comment">//绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test redirect2&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向到 /views/users.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/view/user.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-跳转细节"><a href="#4-3-跳转细节" class="headerlink" title="4.3 跳转细节"></a>4.3 跳转细节</h4><blockquote>
<ul>
<li><p>在增删改之后，为了防止请求重复提交，重定向跳转</p>
</li>
<li><p>在查询之后，可以做转发跳转</p>
</li>
</ul>
</blockquote>
<h3 id="五、传值"><a href="#五、传值" class="headerlink" title="五、传值"></a>五、传值</h3><hr>
<blockquote>
<p>C得到数据后，跳转到V，并向V传递数据。进而V中可以渲染数据，让用户看到含有数据的页面</p>
<p>转发跳转：Request作用域</p>
<p>重定向跳转：Session作用域</p>
</blockquote>
<h4 id="5-1-Request和Session"><a href="#5-1-Request和Session" class="headerlink" title="5.1 Request和Session"></a>5.1 Request和Session</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形参中 即可获得 request 和 session对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testData</span><span class="params">(HttpSession session,HttpServletRequest req，Integer id)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    req.setAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;users&quot;</span>,Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>()));</span><br><span class="line">    <span class="comment">//return &quot;test2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/test2.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-JSP中取值"><a href="#5-2-JSP中取值" class="headerlink" title="5.2 JSP中取值"></a>5.2 JSP中取值</h4><blockquote>
<p>建议：重点复习 EL  JSTL</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">&lt;fmt:formatDate value=<span class="string">&quot;$&#123;sessionScope.user.birth&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt; &lt;br/&gt;</span><br><span class="line">$&#123;sessionScope.user.birth&#125; &lt;br&gt;</span><br><span class="line">$&#123;requestScope.age&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-Model"><a href="#5-3-Model" class="headerlink" title="5.3 Model"></a>5.3 Model</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//model中的数据，会在V渲染之前，将数据复制一份给request</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testData</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">$&#123;requestScope.name&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-4-ModelAndView"><a href="#5-4-ModelAndView" class="headerlink" title="5.4 ModelAndView"></a>5.4 ModelAndView</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//modelandview 可以集中管理 跳转和数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testData</span><span class="params">()</span>&#123;<span class="comment">//返回值类型为ModelAndView</span></span><br><span class="line">    <span class="comment">//新建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 设置视图名，即如何跳转</span></span><br><span class="line">    mv.setViewName(<span class="string">&quot;forward:/index.jsp&quot;</span>);</span><br><span class="line">    <span class="comment">// 增加数据</span></span><br><span class="line">    mv.addObject(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsp中用EL表达式 取值即可</span></span><br><span class="line">$&#123;requestScope.age&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-5-SessionAttributes"><a href="#5-5-SessionAttributes" class="headerlink" title="5.5 @SessionAttributes"></a>5.5 @SessionAttributes</h4><blockquote>
<ul>
<li><p>@SessionAttributes({“gender”,”name”})  ：model中的 name和gender 会存入session中</p>
</li>
<li><p>SessionStatus 移除session</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes(&#123;&quot;gender&quot;,&quot;name&quot;&#125;)</span> <span class="comment">// model中的 name和gender 会存入session中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model m)</span>&#123;</span><br><span class="line">        m.addAttribute(<span class="string">&quot;gender&quot;</span>,<span class="literal">true</span>); <span class="comment">// 会存入session</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhj&quot;</span>); <span class="comment">// 会存入session</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(SessionStatus status)</span>&#123;</span><br><span class="line">        <span class="comment">// 移除通过SessionAttributes存入的session</span></span><br><span class="line">        status.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、静态资源"><a href="#六、静态资源" class="headerlink" title="六、静态资源"></a>六、静态资源</h3><hr>
<h4 id="6-1-静态资源问题"><a href="#6-1-静态资源问题" class="headerlink" title="6.1 静态资源问题"></a>6.1 静态资源问题</h4><blockquote>
<p>静态资源：html，js文件，css文件，图片文件</p>
</blockquote>
<blockquote>
<p>静态文件没有url-pattern,所以默认是访问不到的，之所以可以访问，是因为，tomcat中有一个全局的servlet：org.apache.catalina.servlets.DefaultServlet，它的url-pattern是 “&#x2F;“,是全局默认的Servlet.  所以每个项目中不能匹配的静态资源的请求，有这个Servlet来处理即可。</p>
</blockquote>
<blockquote>
<p>但，在SpringMVC中DispatcherServlet也采用了 “&#x2F;” 作为url-pattern, 则项目中不会再使用全局的Serlvet，则静态资源不能完成访问。</p>
</blockquote>
<h4 id="6-2-解决方案1"><a href="#6-2-解决方案1" class="headerlink" title="6.2 解决方案1"></a>6.2 解决方案1</h4><blockquote>
<p>DispathcerServlet采用其他的url-pattern</p>
<p>此时，所有访问handler的路径都要以 action结尾！！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc9<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc9<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-解决方案2"><a href="#6-3-解决方案2" class="headerlink" title="6.3 解决方案2"></a>6.3 解决方案2</h4><blockquote>
<p>DispathcerServlet的url-pattern依然采用 “&#x2F;“,但追加配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  额外的增加一个handler，且其requestMapping:  &quot;/**&quot; 可以匹配所有请求，但是优先级最低</span></span><br><span class="line"><span class="comment">  所以如果其他所有的handler都匹配不上，请求会转向 &quot;/**&quot; ,恰好，这个handler就是处理静态资源的</span></span><br><span class="line"><span class="comment">  处理方式：将请求转会到tomcat中名为default的Servlet</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-解决方案3"><a href="#6-4-解决方案3" class="headerlink" title="6.4 解决方案3"></a>6.4 解决方案3</h4><blockquote>
<ul>
<li>mapping是访问路径，location是静态资源存放的路径</li>
<li>将&#x2F;html&#x2F;** 中 &#x2F;**匹配到的内容，拼接到 &#x2F;hhh&#x2F;后<br>http:&#x2F;&#x2F;….&#x2F;html&#x2F;a.html  访问 &#x2F;hhh&#x2F;a.html</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/hhh/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="七、Json处理"><a href="#七、Json处理" class="headerlink" title="七、Json处理"></a>七、Json处理</h3><hr>
<h4 id="7-1-导入依赖"><a href="#7-1-导入依赖" class="headerlink" title="7.1 导入依赖"></a>7.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson springMVC默认的Json解决方案选择是 Jackson，所以只需要导入jackson的jar，即可使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-2-使用-ResponseBody"><a href="#7-2-使用-ResponseBody" class="headerlink" title="7.2 使用@ResponseBody"></a>7.2 使用@ResponseBody</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span>&#123;    </span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//将handler的返回值，转换成json(jackson),并将json响应给客户端。</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @ResponseBody还可以用在handler的返回值上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> List&lt;User&gt; <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果返回值已经是字符串，则不需要转json，直接将字符串响应给客户端 </span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/test3&quot;,produces = &quot;text/html;charset=utf-8&quot;)</span> <span class="comment">//produces 防止中文乱码</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-3-使用-RestController"><a href="#7-3-使用-RestController" class="headerlink" title="7.3 使用@RestController"></a>7.3 使用@RestController</h4><blockquote>
<p>Controller类上加了@RestController注解，等价于在类中的每个方法上都加了@ResponseBody</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@ResponseBody还可以用在handler的返回值上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">hello2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(),<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-使用-RequestBody"><a href="#7-4-使用-RequestBody" class="headerlink" title="7.4 使用@RequestBody"></a>7.4 使用@RequestBody</h4><blockquote>
<h4 id="RequestBody-接收Json参数"><a href="#RequestBody-接收Json参数" class="headerlink" title="@RequestBody, 接收Json参数"></a><strong>@RequestBody</strong>, 接收Json参数</h4></blockquote>
<h5 id="7-4-1-定义Handler"><a href="#7-4-1-定义Handler" class="headerlink" title="7.4.1 定义Handler"></a>7.4.1 定义Handler</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line">    <span class="comment">//set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;<span class="comment">//@RequestBody将请求体中的json数据转换为java对象</span></span><br><span class="line">    System.out.println(<span class="string">&quot;cap2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Post user :&quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-4-2-Ajax发送json"><a href="#7-4-2-Ajax发送json" class="headerlink" title="7.4.2 Ajax发送json"></a>7.4.2 Ajax发送json</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/users?&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>());</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);<span class="comment">//设置请求头</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;shine&quot;,&quot;gender&quot;:&quot;true&quot;&#125;&#x27;</span>);<span class="comment">//传递json串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;shine&quot;</span>&#125;;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/json2/test4&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,<span class="comment">//声明请求参数类型为 json</span></span><br><span class="line">    <span class="attr">data</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user),<span class="comment">// 转换js对象成json</span></span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="7-5-Jackson常用注解"><a href="#7-5-Jackson常用注解" class="headerlink" title="7.5 Jackson常用注解"></a>7.5 Jackson常用注解</h4><h5 id="7-5-1-日期格式化"><a href="#7-5-1-日期格式化" class="headerlink" title="7.5.1 日期格式化"></a>7.5.1 日期格式化</h5><blockquote>
<p>@JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”,timezone &#x3D; “GMT+8”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-2-属性名修改"><a href="#7-5-2-属性名修改" class="headerlink" title="7.5.2 属性名修改"></a>7.5.2 属性名修改</h5><blockquote>
<p>@JsonProperty(“new_name”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="meta">@JsonProperty(&quot;new_id&quot;)</span> <span class="comment">//不再使用原属性名，而是 &quot;new_id&quot;</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">输出的json：&#123;“new_id”:xx,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xx&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-3-属性忽略"><a href="#7-5-3-属性忽略" class="headerlink" title="7.5.3 属性忽略"></a>7.5.3 属性忽略</h5><blockquote>
<p>@JsonIgnore</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JsonIgnore</span> <span class="comment">// 生成json时，忽略此属性</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">输出json时: &#123;<span class="string">&quot;id&quot;</span>:xx&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-4-null和empty属性排除"><a href="#7-5-4-null和empty属性排除" class="headerlink" title="7.5.4 null和empty属性排除"></a>7.5.4 null和empty属性排除</h5><blockquote>
<p>Jackson 默认会输出null值的属性，如果不需要，可以排除。</p>
<p>@JsonInclude(JsonInclude.Include.NON_NULL) &#x2F;&#x2F;null值 属性不输出<br>@JsonInclude(value&#x3D; JsonInclude.Include.NON_EMPTY) &#x2F;&#x2F; empty属性不输出( 空串，长度为0的集合，null值)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span> <span class="comment">// 若&quot;name==null&quot; 忽略此属性</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonInclude(value= JsonInclude.Include.NON_EMPTY)</span>  <span class="comment">// 若hobby长度为0或==null 忽略此属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">如果name=<span class="literal">null</span>,且 hobby长度为<span class="number">0</span>，则输出json时：&#123;<span class="string">&quot;id&quot;</span>:xx&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-5-自定义序列化"><a href="#7-5-5-自定义序列化" class="headerlink" title="7.5.5 自定义序列化"></a>7.5.5 自定义序列化</h5><blockquote>
<p>@JsonSerialize(using &#x3D; MySerializer.class) &#x2F;&#x2F; 使用MySerializer输出某属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonSerialize(using = MySerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">10000.126</span>;<span class="comment">//在输出此属性时，使用MySerializer输出</span></span><br><span class="line">    ....</span><br><span class="line">    get/set</span><br><span class="line">&#125;</span><br><span class="line">则输出json时：&#123;<span class="string">&quot;id&quot;</span>:xx,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;salary&quot;</span>:<span class="number">10000.13</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Double&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value即 Double salary的值</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Double value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将Double salary的值 四舍五入</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> BigDecimal.valueOf(value).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">        <span class="comment">// 输出 四舍五入后的值</span></span><br><span class="line">        gen.writeNumber(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-6-FastJson"><a href="#7-6-FastJson" class="headerlink" title="7.6 FastJson"></a>7.6 FastJson</h4><h5 id="7-6-1-导入依赖"><a href="#7-6-1-导入依赖" class="headerlink" title="7.6.1 导入依赖"></a>7.6.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FastJson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-6-2-安装FastJson"><a href="#7-6-2-安装FastJson" class="headerlink" title="7.6.2 安装FastJson"></a>7.6.2 安装FastJson</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 安装FastJson,转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明转换类型:json --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-6-3-使用"><a href="#7-6-3-使用" class="headerlink" title="7.6.3 使用"></a>7.6.3 使用</h5><blockquote>
<p>@ResponseBody  @RequestBody @RestController 使用方法不变</p>
</blockquote>
<h5 id="7-6-4-常用注解"><a href="#7-6-4-常用注解" class="headerlink" title="7.6.4 常用注解"></a>7.6.4 常用注解</h5><blockquote>
<ul>
<li>日期格式化：@JSONField(format&#x3D;”yyyy&#x2F;MM&#x2F;dd”)</li>
<li>属性名修改：@JSONField(name&#x3D;”birth”）</li>
<li>忽略属性：@JSONField(serialize &#x3D; false)</li>
<li>包含null值：@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteMapNullValue)  默认会忽略所有null值,有此注解会输出null<ul>
<li>@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteNullStringAsEmpty)  null的String输出为””</li>
</ul>
</li>
<li>自定义序列化：@JSONField(serializeUsing &#x3D; MySerializer2.class)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">	<span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@JSONField(name=&quot;NAME&quot;,serialzeFeatures = SerializerFeature.WriteNullStringAsEmpty)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JSONField(serialzeFeatures = SerializerFeature.WriteMapNullValue)</span> </span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">	<span class="meta">@JSONField(format=&quot;yyyy/MM/dd&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="meta">@JSONField(serializeUsing = MySerializer2.class)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySerializer2</span> <span class="keyword">implements</span> <span class="title class_">ObjectSerializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span><br><span class="line"><span class="params">                      <span class="type">int</span> features)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> (Double) object; <span class="comment">// salary属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> value + <span class="string">&quot;元&quot;</span>;<span class="comment">// 在salary后拼接 “元”</span></span><br><span class="line">        serializer.write(text); <span class="comment">// 输出拼接后的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>，<span class="literal">null</span>，<span class="literal">null</span>，<span class="keyword">new</span> <span class="title class_">Date</span>()，<span class="number">100.5</span>);</span><br><span class="line"><span class="comment">// 如上对象，转换json：</span></span><br><span class="line">&#123;NAME:<span class="string">&quot;&quot;</span>，city:<span class="literal">null</span>，<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;2020/12/12&quot;</span>，<span class="string">&quot;salary&quot;</span>:<span class="string">&quot;100.5元&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="八、异常解析器"><a href="#八、异常解析器" class="headerlink" title="八、异常解析器"></a>八、异常解析器</h3><hr>
<h4 id="8-1-现有方案，分散处理"><a href="#8-1-现有方案，分散处理" class="headerlink" title="8.1 现有方案，分散处理"></a>8.1 现有方案，分散处理</h4><blockquote>
<p>Controller中的每个Handler自己处理异常</p>
<p>此种处理方案，异常处理逻辑，分散在各个handler中，不利于集中管理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">xxx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    	...</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception1 e)&#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/xx/error1&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/xx/error2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-2-异常解析器，统一处理"><a href="#8-2-异常解析器，统一处理" class="headerlink" title="8.2 异常解析器，统一处理"></a>8.2 异常解析器，统一处理</h4><blockquote>
<p>Controller中的每个Handler不再自己处理异常，而是直接throws所有异常。</p>
<p>定义一个“异常解析器” 集中捕获处理 所有异常</p>
<p>此种方案，在集中管理异常方面，更有优势！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 异常解析器：主体逻辑</span></span><br><span class="line"><span class="comment">	 * 执行时刻：当handler中抛出异常时，会执行：捕获异常，并可以跳到错误页面</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">		ex.printStackTrace();<span class="comment">//打印异常栈</span></span><br><span class="line">		<span class="comment">//创建一个ModelAndView</span></span><br><span class="line">		<span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">		<span class="comment">//识别异常</span></span><br><span class="line">		<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> Exception1) &#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error1&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> Exception2)&#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error2&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			mv.setViewName(<span class="string">&quot;redirect:/xxx/error&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明异常解析器 --&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baizhi.exception.resolver.MyExResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="九、拦截器"><a href="#九、拦截器" class="headerlink" title="九、拦截器"></a>九、拦截器</h3><hr>
<h4 id="9-1-作用"><a href="#9-1-作用" class="headerlink" title="9.1 作用"></a>9.1 作用</h4><blockquote>
<p>作用：抽取handler中的冗余功能</p>
</blockquote>
<h4 id="9-2-定义拦截器"><a href="#9-2-定义拦截器" class="headerlink" title="9.2 定义拦截器"></a>9.2 定义拦截器</h4><blockquote>
<p>执行顺序： preHandle–postHandle–afterCompletion</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInter1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">	<span class="comment">//主要逻辑：在handler之前执行：抽取handler中的冗余代码</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;pre~~~&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        response.sendRedirect(&quot;/springMVC_day2/index.jsp&quot;);//响应</span></span><br><span class="line"><span class="comment">        return false;//中断请求</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行，后续的拦截器或handler就会执行</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在handler之后执行:进一步的响应定制</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">			ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;post~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在页面渲染完毕之后，执行：资源回收</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;after~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-3-配置拦截路径"><a href="#9-3-配置拦截路径" class="headerlink" title="9.3 配置拦截路径"></a>9.3 配置拦截路径</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/test*&quot;</span>/&gt;</span> <span class="comment">&lt;!-- test开头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/**&quot;</span>/&gt;</span> <span class="comment">&lt;!-- /** 任意多级任意路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/inter/a/**&quot;</span>/&gt;</span>   <span class="comment">&lt;!--不拦截此路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baizhi.interceptor.MyInter1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   <span class="comment">&lt;!--拦截器类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十、上传"><a href="#十、上传" class="headerlink" title="十、上传"></a>十、上传</h3><hr>
<h4 id="10-1-导入jar"><a href="#10-1-导入jar" class="headerlink" title="10.1 导入jar"></a>10.1 导入jar</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-2-表单"><a href="#10-2-表单" class="headerlink" title="10.2 表单"></a>10.2 表单</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/upload/test1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-3-上传解析器"><a href="#10-3-上传解析器" class="headerlink" title="10.3 上传解析器"></a>10.3 上传解析器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传解析器 </span></span><br><span class="line"><span class="comment">	     id必须是：“multipartResolver”</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大可上传的文件大小  单位：byte  超出后会抛出MaxUploadSizeExceededException异常，可以异常解析器捕获 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-4-Handler"><a href="#10-4-Handler" class="headerlink" title="10.4 Handler"></a>10.4 Handler</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">(String username,MultipartFile source,HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//文件的原始名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> source.getOriginalFilename();</span><br><span class="line">    <span class="comment">//定制全局唯一的命名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">unique</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">//获得文件的后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> FilenameUtils.getExtension(filename);<span class="comment">//abc.txt   txt    hello.html  html</span></span><br><span class="line">    <span class="comment">//定制全局唯一的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uniqueFileName</span> <span class="operator">=</span> unique+<span class="string">&quot;.&quot;</span>+ext;</span><br><span class="line">    System.out.println(<span class="string">&quot;唯一的文件名:&quot;</span>+uniqueFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件的类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> source.getContentType();</span><br><span class="line">    System.out.println(<span class="string">&quot;filename:&quot;</span>+filename+<span class="string">&quot; type:&quot;</span>+type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得 upload_file的磁盘路径 ==&gt; 在webapp目录下创建一个目录&quot;upload_file&quot;,且此目录初始不要为空，否则编译时被忽略</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">real_path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/upload_file&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;real_path:&quot;</span>+real_path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将上传的文件，存入磁盘路径中</span></span><br><span class="line">    <span class="comment">//source.transferTo(new File(&quot;d:/xxxx/xxxx/xx.jpg&quot;))</span></span><br><span class="line">    source.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(real_path+<span class="string">&quot;\\&quot;</span>+uniqueFileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十一、下载"><a href="#十一、下载" class="headerlink" title="十一、下载"></a>十一、下载</h3><hr>
<h4 id="11-1-超链"><a href="#11-1-超链" class="headerlink" title="11.1 超链"></a>11.1 超链</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download/test1?name=Koala.jpg&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="11-2-Handler"><a href="#11-2-Handler" class="headerlink" title="11.2 Handler"></a>11.2 Handler</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello1</span><span class="params">(String name,HttpSession session,HttpServletResponse response)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">    <span class="comment">//获得要下载文件的绝对路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;/upload_file&quot;</span>);</span><br><span class="line">    <span class="comment">//文件的完整路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">real_path</span> <span class="operator">=</span> path+<span class="string">&quot;\\&quot;</span>+name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应头  告知浏览器，要以附件的形式保存内容   filename=浏览器显示的下载文件名</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取目标文件，写出给客户端</span></span><br><span class="line">    IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(real_path), response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上一步，已经是响应了,所以此handler直接是void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="十二、验证码"><a href="#十二、验证码" class="headerlink" title="十二、验证码"></a>十二、验证码</h3><hr>
<h4 id="12-1-作用"><a href="#12-1-作用" class="headerlink" title="12.1 作用"></a>12.1 作用</h4><blockquote>
<p>防止暴力攻击，前端安全保障</p>
</blockquote>
<h4 id="12-2-导入jar"><a href="#12-2-导入jar" class="headerlink" title="12.2 导入jar"></a>12.2 导入jar</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Kaptcha --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-3-声明验证码组件"><a href="#12-3-声明验证码组件" class="headerlink" title="12.3 声明验证码组件"></a>12.3 声明验证码组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cap<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.border<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>no<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.textproducer.char.length<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.textproducer.char.string<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.background.clear.to<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>211,229,237<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- session.setAttribute(&quot;captcha&quot;,&quot;验证码&quot;) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.session.key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>captcha<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cap<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/captcha<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-4-Page"><a href="#12-4-Page" class="headerlink" title="12.4 Page"></a>12.4 Page</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/captcha&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:85px&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#cap&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//刷新验证码</span></span></span><br><span class="line"><span class="language-javascript">            path = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)+<span class="string">&quot;?&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,path);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="十三、REST"><a href="#十三、REST" class="headerlink" title="十三、REST"></a>十三、REST</h3><hr>
<h4 id="13-1-开发风格"><a href="#13-1-开发风格" class="headerlink" title="13.1 开发风格"></a>13.1 开发风格</h4><blockquote>
<p>是一种开发风格，遵从此风格开发软件，符合REST风格，则RESTFUL。</p>
</blockquote>
<blockquote>
<p>两个核心要求：</p>
<ul>
<li>每个资源都有唯一的标识(URL)</li>
<li>不同的行为，使用对应的http-method</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>访问标识</th>
<th>资源</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>所有用户</td>
</tr>
<tr>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>用户1</td>
</tr>
<tr>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>用户1的所有订单</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>标识</th>
<th>意图</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>查询所有用户</td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>在所有用户中增加一个</td>
</tr>
<tr>
<td>PUT</td>
<td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td>
<td>在所有用户中修改一个</td>
</tr>
<tr>
<td>DELETE</td>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>删除用户1</td>
</tr>
<tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td>
<td>查询用户1</td>
</tr>
<tr>
<td>GET</td>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>查询用户1的所有订单</td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td>
<td>在用户1的所有订单中增加一个</td>
</tr>
</tbody></table>
<h4 id="13-2-优点"><a href="#13-2-优点" class="headerlink" title="13.2 优点"></a>13.2 优点</h4><blockquote>
<ul>
<li>**输出json：</li>
</ul>
</blockquote>
<h4 id="13-3-使用"><a href="#13-3-使用" class="headerlink" title="13.3 使用"></a>13.3 使用</h4><h5 id="13-3-1-定义Rest风格的-Controller"><a href="#13-3-1-定义Rest风格的-Controller" class="headerlink" title="13.3.1 定义Rest风格的 Controller"></a>13.3.1 定义Rest风格的 Controller</h5><blockquote>
<p>@RequestMapping(value&#x3D;”&#x2F;users”,method &#x3D; RequestMethod.GET)</p>
<p>等价</p>
<p>@GetMapping(“&#x2F;users”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = ....</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Post user :&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;status:1&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Put user&quot;</span> user:<span class="string">&quot;+user);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @GetMapping(&quot;</span>/users/&#123;id&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public String queryOneUser(@PathVariable Integer id)&#123;//@PathVariable 接收路径中的值</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>Get user id:<span class="string">&quot;+id);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @DeleteMapping(&quot;</span>/users/&#123;id&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public String deleteOneUser(@PathVariable Integer id)&#123;//@PathVariable 接收路径中的值</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>delete user id:<span class="string">&quot;+id);</span></span><br><span class="line"><span class="string">        return &quot;</span>&#123;status:<span class="number">1</span>&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="13-3-2-Ajax请求"><a href="#13-3-2-Ajax请求" class="headerlink" title="13.3.2 Ajax请求"></a>13.3.2 Ajax请求</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">putUser</span>(<span class="params"></span>)&#123; <span class="comment">// 发送更新请求 （增加请求发送方式也是如此）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">//定义 put，delete,get,post方式 即可，不用定义_method</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;put&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/rest04/users&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)；</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置请求参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>，<span class="attr">NAME</span>:<span class="string">&quot;shine&quot;</span>，<span class="attr">city</span>:<span class="string">&quot;bj&quot;</span>，<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;2020/12/12&quot;</span>，<span class="string">&quot;salary&quot;</span>:<span class="number">100.5</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ret = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 解析json，并输出</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(ret));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">/*$.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            url:&#x27;$&#123;pageContext.request.contextPath&#125;/rest04/users&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            type:&#x27;put&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            contentType:&quot;application/json&quot;,//声明请求参数类型为 json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            data:JSON.stringify(user),// 转换js对象成json</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            success:function(ret)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                console.log(JSON.parse(ret));</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;);*/</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">delUser</span>(<span class="params"></span>)&#123;  <span class="comment">// 发送删除请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义 put，delete,get,post方式 即可，不用定义_method</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;delete&quot;</span>,<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/rest04/users/1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ret = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(ret));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="十四、跨域请求"><a href="#十四、跨域请求" class="headerlink" title="十四、跨域请求"></a>十四、跨域请求</h3><hr>
<h4 id="14-1-域"><a href="#14-1-域" class="headerlink" title="14.1 域"></a>14.1 域</h4><blockquote>
<p>域：协议+IP+端口</p>
<ul>
<li><p><a href="http://localhost:8989/">http://localhost:8989</a></p>
</li>
<li><p><a href="http://localhost:8080/">http://localhost:8080</a></p>
</li>
<li><p><a href="http://www.baidu.com/">http://www.baidu.com:80</a></p>
</li>
</ul>
</blockquote>
<h4 id="14-2-Ajax跨域问题"><a href="#14-2-Ajax跨域问题" class="headerlink" title="14.2 Ajax跨域问题"></a>14.2 Ajax跨域问题</h4><blockquote>
<ul>
<li><p>Ajax发送请求时，不允许跨域，以防用户信息泄露。</p>
</li>
<li><p>当Ajax跨域请求时，响应会被浏览器拦截(同源策略)，并报错。即浏览器默认不允许ajax跨域得到响应内容。</p>
</li>
<li><p>互相信任的域之间如果需要ajax访问，(比如前后端分离项目中，前端项目和后端项目之间)，则需要额外的设置才可正常请求。</p>
</li>
</ul>
</blockquote>
<h4 id="14-3-解决方案"><a href="#14-3-解决方案" class="headerlink" title="14.3 解决方案"></a>14.3 解决方案</h4><blockquote>
<ul>
<li><p>允许其他域访问</p>
</li>
<li><p>在被访问方的Controller类上，添加注解</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span> <span class="comment">//允许此域发请求访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span> &#123;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>携带对方cookie，使得session可用</p>
</li>
<li><p>在访问方，ajax中添加属性：withCredentials: true</p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://localhost:8989/web/sys/login&quot;</span>,</span><br><span class="line">     ...,</span><br><span class="line">     <span class="attr">xhrFields</span>: &#123;</span><br><span class="line">       <span class="comment">// 跨域携带cookie</span></span><br><span class="line">       <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 跨域携带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span>=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h3 id="十五、SpringMVC执行流程"><a href="#十五、SpringMVC执行流程" class="headerlink" title="十五、SpringMVC执行流程"></a>十五、SpringMVC执行流程</h3><hr>
<table>
<thead>
<tr>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304130847054.jpg" alt="springMVC执行流程"></td>
</tr>
</tbody></table>
<h3 id="十六、Spring整合"><a href="#十六、Spring整合" class="headerlink" title="十六、Spring整合"></a>十六、Spring整合</h3><hr>
<h4 id="16-1-整合思路"><a href="#16-1-整合思路" class="headerlink" title="16.1 整合思路"></a>16.1 整合思路</h4><blockquote>
<p>此时项目中有两个工厂</p>
<ul>
<li>DispatcherServlet 启动的springMVC工厂&#x3D;&#x3D;负责生产C及springMVC自己的系统组件</li>
<li>ContextLoaderListener 启动的spring工厂&#x3D;&#x3D;负责生产其他所有组件</li>
<li>springMVC的工厂会被设置为spring工厂的子工厂，可以随意获取spring工厂中的组件</li>
<li>整合过程，就是累加：代码+依赖+配置。然后将service注入给controller即可</li>
</ul>
</blockquote>
<h4 id="16-2-整合技巧"><a href="#16-2-整合技巧" class="headerlink" title="16.2 整合技巧"></a>16.2 整合技巧</h4><blockquote>
<p>两个工厂不能有彼此侵入，即，生产的组件不能有重合。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知SpringMVC  哪些包中 存在 被注解的类</span></span><br><span class="line"><span class="comment">	use-default-filters=true 凡是被 @Controller @Service  @Repository注解的类，都会被扫描</span></span><br><span class="line"><span class="comment">	use-default-filters=false 默认不扫描包内的任何类, 只扫描include-filter中指定的类</span></span><br><span class="line"><span class="comment">	只扫描被@Controller注解的类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhj&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知Spring</span></span><br><span class="line"><span class="comment">     唯独不扫描@Controller注解的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhj&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMvc</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2023/04/12/Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-kGKvsebb" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>









<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131413799.jpg" alt="logo"> <code>everything-is-local</code> </p>
<blockquote>
<p>Author：Shine</p>
<p>Version：9.0.2</p>
</blockquote>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<blockquote>
<ul>
<li><p>在单人开发过程中，需要进行版本管理，以利于开发进度的控制。</p>
</li>
<li><p>在多人开发过程中，不仅需要版本管理，还需要进行多人协同控制。</p>
</li>
</ul>
</blockquote>
<h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><hr>
<blockquote>
<ul>
<li>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li>
</ul>
</blockquote>
<h3 id="三、Git安装"><a href="#三、Git安装" class="headerlink" title="三、Git安装"></a>三、Git安装</h3><hr>
<h4 id="3-1-下载Git"><a href="#3-1-下载Git" class="headerlink" title="3.1 下载Git"></a>3.1 下载Git</h4><blockquote>
<p>下载Git <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">下载git</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131413806.jpg" alt="install1"></td>
</tr>
</tbody></table>
<h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><blockquote>
<p>安装，除了安装位置外，其他一直下一步即可</p>
</blockquote>
<h4 id="3-3-基本配置"><a href="#3-3-基本配置" class="headerlink" title="3.3 基本配置"></a>3.3 基本配置</h4><blockquote>
<ul>
<li><p>安装后，打开cmd ，自报家门</p>
</li>
<li><p>如下信息会在提交代码时要使用，记录在你的每次提交中。以后才知道哪次提交是谁做的。</p>
</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;  #用户名</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;  #邮箱</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看信息</span></span><br><span class="line">git config -l </span><br></pre></td></tr></table></figure>

<h4 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h4><blockquote>
<p>测试：cmd中执行 ,查看git版本</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git version  </span><br></pre></td></tr></table></figure>

<h3 id="四、架构"><a href="#四、架构" class="headerlink" title="四、架构"></a>四、架构</h3><hr>
<blockquote>
<ul>
<li><p>版本库：工作区中有一个隐藏目录 <code>.git</code>，这个目录不属于工作区，而是git的 <code>版本库</code>，是git管理的所有内容 </p>
</li>
<li><p>暂存区：版本库中包含一个临时区域，保存下一步要提交的文件。</p>
</li>
<li><p>分支：版本库中包含若干分支，提交的文件存储在分支中</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">架构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131413065.jpg" alt="暂存区"></td>
</tr>
</tbody></table>
<h3 id="五、仓库"><a href="#五、仓库" class="headerlink" title="五、仓库"></a>五、仓库</h3><hr>
<blockquote>
<p>对应的就是一个<a href="">目录</a>，这个目录中的所有文件被git管理起来。</p>
<p>以后会将一个<a href="">项目的根目录</a>，作为仓库。</p>
<p>仓库中的每个文件的改动 都由git跟踪。</p>
</blockquote>
<h4 id="5-1-新建仓库"><a href="#5-1-新建仓库" class="headerlink" title="5.1 新建仓库"></a>5.1 新建仓库</h4><blockquote>
<p>选择一个目录，执行指令：<a href="">git init</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">新建仓库</th>
<th align="center">仓库目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131413049.jpg" alt="新建仓库"></td>
<td align="center"><img src="/Pictures/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%932.jpg" alt="新建仓库2"></td>
</tr>
</tbody></table>
<h4 id="5-2-工作区"><a href="#5-2-工作区" class="headerlink" title="5.2 工作区"></a>5.2 工作区</h4><blockquote>
<p>执行<a href="">git init</a>的目录即为工作区，如上例，<a href="">D:\repo1</a>目录即为工作区【不包含<a href="">.git</a>目录】</p>
</blockquote>
<blockquote>
<p>所有文件，都首先在工作区新建，然后可以存入仓库(版本库)，进行版本控制。</p>
</blockquote>
<h4 id="5-3-暂存区"><a href="#5-3-暂存区" class="headerlink" title="5.3 暂存区"></a>5.3 暂存区</h4><blockquote>
<p>暂存区也在 <a href="">.git</a> 目录内，工作区的文件进入仓库时，要先进入暂存区。</p>
</blockquote>
<h4 id="5-4-分支"><a href="#5-4-分支" class="headerlink" title="5.4 分支"></a>5.4 分支</h4><blockquote>
<p>版本控制，简单说，就是记录文件的诸多版本，分支就是这些版本的最终记录位置。</p>
</blockquote>
<h3 id="六、基本操作"><a href="#六、基本操作" class="headerlink" title="六、基本操作"></a>六、基本操作</h3><hr>
<h4 id="6-1-查看仓库状态"><a href="#6-1-查看仓库状态" class="headerlink" title="6.1 查看仓库状态"></a>6.1 查看仓库状态</h4><blockquote>
<p>执行 <a href="">git  status</a> 可以看到工作区中文件的状态</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">未记录过的文件，是未跟踪状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131413791.jpg" alt="查看状态1"></td>
</tr>
</tbody></table>
<h4 id="6-2-暂存文件"><a href="#6-2-暂存文件" class="headerlink" title="6.2 暂存文件"></a>6.2 暂存文件</h4><blockquote>
<p>执行 <a href="">git add .</a> 将工作区中的文件全部<a href="">存入暂存区</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">将工作区中的文件存入暂存区</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414426.jpg" alt="暂存文件"></td>
</tr>
</tbody></table>
<h4 id="6-3-提交文件"><a href="#6-3-提交文件" class="headerlink" title="6.3 提交文件"></a>6.3 提交文件</h4><blockquote>
<p>执行 <a href="">git commit -m “这里写提交的描述信息”</a> 作用是将暂存区的文件存入分支，形成一个版本</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">提交文件，形成一个版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414780.jpg" alt="提交文件"></td>
</tr>
</tbody></table>
<h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><hr>
<blockquote>
<p>第5章中的仓库，其实是本地仓库。</p>
<p>当多人协同开发时，每人都在自己的本地仓库维护版本。</p>
<p>但很重要的一点是，多人之间需要共享代码、合并代码，此时就需要一个<a href="">远程仓库</a>。</p>
</blockquote>
<h4 id="7-1-远程仓库工作模式"><a href="#7-1-远程仓库工作模式" class="headerlink" title="7.1 远程仓库工作模式"></a>7.1 远程仓库工作模式</h4><table>
<thead>
<tr>
<th align="center">远程仓库工作模式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414863.jpg" alt="远程仓库"></td>
</tr>
</tbody></table>
<h4 id="7-2-远程仓库选型"><a href="#7-2-远程仓库选型" class="headerlink" title="7.2 远程仓库选型"></a>7.2 远程仓库选型</h4><blockquote>
<ul>
<li><p>有很多远程仓库可以选择，比如 github(<a href="https://github.com/">https://github.com/</a>),码云(<a href="https://gitee.com/">https://gitee.com/</a>)；</p>
<p> 此两种可以注册自己测试使用，但如果是商业项目，需要更多支持需要付费。</p>
</li>
<li><p>公司内部也可以有自己构建的远程仓库(<a href="http://qianfeng.qfjava.cn:8087/users/sign_in">http://qianfeng.qfjava.cn:8087/users/sign_in</a>)。</p>
</li>
</ul>
</blockquote>
<h4 id="7-3-基本操作"><a href="#7-3-基本操作" class="headerlink" title="7.3 基本操作"></a>7.3 基本操作</h4><blockquote>
<p>每个开发人员，在面对远程仓库时，会面临的一些基本操作。</p>
</blockquote>
<h5 id="7-3-1-注册git服务器账号"><a href="#7-3-1-注册git服务器账号" class="headerlink" title="7.3.1 注册git服务器账号"></a>7.3.1 注册git服务器账号</h5><blockquote>
<p>在 <a href="https://gitee.com/">码云</a> 注册账号，并登录。</p>
<p>进入公司后，很可能会使用公司自己搭建的git服务器，则账号向领导索要即可</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">点击注册，完成注册过程</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414833.jpg" alt="码云注册"></td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">登录后显示主页</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414209.jpg" alt="码云登录"></td>
</tr>
</tbody></table>
<h5 id="7-3-2-新建远程仓库"><a href="#7-3-2-新建远程仓库" class="headerlink" title="7.3.2 新建远程仓库"></a>7.3.2 新建远程仓库</h5><table>
<thead>
<tr>
<th align="center">创建远程私有仓库-01</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414101.jpg" alt="创建远程仓库1"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">创建远程私有仓库-02</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414003.jpg" alt="创建远程仓库2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">创建远程私有仓库-03</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414582.jpg" alt="创建远程仓库3"></td>
</tr>
</tbody></table>
<h5 id="7-3-3-本地关联远程仓库"><a href="#7-3-3-本地关联远程仓库" class="headerlink" title="7.3.3 本地关联远程仓库"></a>7.3.3 本地关联远程仓库</h5><blockquote>
<p>本文档中选用仓库的 https协议的地址，将此地址关联到本地git中</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">如此后，本地即可用“origin” 代指远程仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131414035.jpg" alt="关联远程仓库"></td>
</tr>
</tbody></table>
<h5 id="7-3-4-推送文件到远程仓库"><a href="#7-3-4-推送文件到远程仓库" class="headerlink" title="7.3.4 推送文件到远程仓库"></a>7.3.4 推送文件到远程仓库</h5><blockquote>
<p>将本地仓库中已经commit的内容push到远程仓库，以共享自己的代码。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">push</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415193.jpg" alt="push到远程"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">输入凭证，如此码云才能接受此次上传的内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415068.jpg" alt="push到远程_输入凭证"></td>
</tr>
</tbody></table>
<h5 id="7-3-5-克隆远程仓库"><a href="#7-3-5-克隆远程仓库" class="headerlink" title="7.3.5 克隆远程仓库"></a>7.3.5 克隆远程仓库</h5><blockquote>
<p>如果仓库已经由别人创建完毕，我们需要其中的内容，则可以通过 <a href="">git clone</a> 将其复制到本地。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">新建目录“repo2”，然后在其中执行 git clone</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415037.jpg" alt="clone远程仓库"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">远程仓库，复制到本地，并自动初始化为一个本地仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415079.jpg" alt="clone远程仓库2"></td>
</tr>
</tbody></table>
<h5 id="7-3-6-代码共享"><a href="#7-3-6-代码共享" class="headerlink" title="7.3.6 代码共享"></a>7.3.6 代码共享</h5><blockquote>
<p>多人协同开发时，写好代码的<a href="">git push</a> 上传到远程仓库；需要代码的 <a href="">git pull</a> 拉取代码即可。 </p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">有人再次将本地仓库内容，上传到了远程仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415816.jpg" alt="pull远程仓库1"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">重点：此时另一方如果想获得更新，则需要做一次拉取 git pull</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415718.jpg" alt="pull远程仓库2"></td>
</tr>
</tbody></table>
<h5 id="7-3-7-命令汇总"><a href="#7-3-7-命令汇总" class="headerlink" title="7.3.7 命令汇总"></a>7.3.7 命令汇总</h5><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>git   remote   add  标识名(master)  远程地址</td>
<td>本地关联远程仓库</td>
</tr>
<tr>
<td>git   push  标识名  master</td>
<td>将本地仓库内容上传到远程仓库</td>
</tr>
<tr>
<td>git   pull  标识名   master</td>
<td>从远程仓库下载内容到本地仓库</td>
</tr>
<tr>
<td>git   clone  远程地址</td>
<td>将远程仓库复制到本地，并自动形成一个本地仓库</td>
</tr>
</tbody></table>
<h3 id="八、分支"><a href="#八、分支" class="headerlink" title="八、分支"></a>八、分支</h3><hr>
<h4 id="8-1-分支简介"><a href="#8-1-分支简介" class="headerlink" title="8.1 分支简介"></a>8.1 分支简介</h4><blockquote>
<ul>
<li><p>分支，是一个个版本最终存储的位置。</p>
</li>
<li><p>分支，就是一条时间线，每次<a href="">git commit</a>形成一个个版本，一个个版本依次存储在分支的一个个提交点上。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">分支由多个提交点组成，分支上会有一个指针，默认总是指向最新的提交点</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415356.jpg" alt="分支图例1"></td>
</tr>
</tbody></table>
<h4 id="8-2-分支操作"><a href="#8-2-分支操作" class="headerlink" title="8.2 分支操作"></a>8.2 分支操作</h4><h5 id="8-2-1-查看分支"><a href="#8-2-1-查看分支" class="headerlink" title="8.2.1 查看分支"></a>8.2.1 查看分支</h5><blockquote>
<ul>
<li><p>查看当前仓库的分支 <a href="">git branch</a></p>
</li>
<li><p>仓库中默认只有 master 分支</p>
</li>
<li><p>执行<a href="">git commit</a>时，默认是在master分支上保存版本。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">默认只有master分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415013.jpg" alt="查看分支-master"></td>
</tr>
</tbody></table>
<h5 id="8-2-2-创建分支"><a href="#8-2-2-创建分支" class="headerlink" title="8.2.2 创建分支"></a>8.2.2 创建分支</h5><blockquote>
<ul>
<li><p>在商业项目开发过程中，我们不会轻易的在<a href="">master</a>分支上做操作。</p>
</li>
<li><p>我们会新建一个<a href="">开发用的分支</a>，在此分支上做版本的记录。</p>
<p>当代码确实没有问题时，才会将开发分支上成熟的代码版本添加到<a href="">master</a>分支上。</p>
</li>
<li><p>保证开发过程中，可以及时记录版本，又保证<a href="">master</a>分支上每个提交点都是稳健版本。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">创建分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415240.jpg" alt="新建分支"></td>
</tr>
</tbody></table>
<h5 id="8-2-3-切换分支"><a href="#8-2-3-切换分支" class="headerlink" title="8.2.3 切换分支"></a>8.2.3 切换分支</h5><blockquote>
<ul>
<li><p>默认情况下，当前使用的分支是 master分支</p>
</li>
<li><p>可以切换到 dev分支，则后续的<a href="">git commit</a> 便会在dev分支上新建版本(提交点)</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">切换分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131415858.jpg" alt="切换分支"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">再次查看分支情况</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416942.jpg" alt="查看分支"></td>
</tr>
</tbody></table>
<h4 id="8-3-新建分支细节"><a href="#8-3-新建分支细节" class="headerlink" title="8.3 新建分支细节"></a>8.3 新建分支细节</h4><blockquote>
<p>新建分支时，新分支，默认有哪些内容？分支中包含了哪些次提交？</p>
</blockquote>
<h5 id="8-3-1-新分支初始内容"><a href="#8-3-1-新分支初始内容" class="headerlink" title="8.3.1 新分支初始内容"></a>8.3.1 新分支初始内容</h5><blockquote>
<p>每个分支都有一个<a href="">指针</a>，新建一个分支，首先是新建一个<a href="">指针</a>。</p>
<p>而且新分支的指针会和当前分支指向<a href="">同一个提交点</a>。</p>
<p>新分支包含的提交点就是从第一个提交点到分支指针指向的提交点。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">每个分支都有一个指针，新建一个分支，首先是新建一个指针</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416024.jpg" alt="新建分支细节1"></td>
</tr>
</tbody></table>
<h5 id="8-3-2-多分支走向"><a href="#8-3-2-多分支走向" class="headerlink" title="8.3.2 多分支走向"></a>8.3.2 多分支走向</h5><blockquote>
<p>在master分支和新分支，分别进行 <a href="">git add</a> 和 <a href="">git commit</a></p>
<p>分支情况如下图：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">master分支未动，在dev分支增加一次commit</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416186.jpg" alt="新建分支细节2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">master分支增加一个commit，dev分支再增加一个commit</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416050.jpg" alt="新建分支细节3"></td>
</tr>
</tbody></table>
<h5 id="8-3-3-分支提交日志"><a href="#8-3-3-分支提交日志" class="headerlink" title="8.3.3 分支提交日志"></a>8.3.3 分支提交日志</h5><blockquote>
<p>查看分支的提交日志，进而看到分支中提交点的详细情况。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">提交情况如下</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416582.jpg" alt="提交日志"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">查看当前分支的提交日志</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416875.jpg" alt="提交日志2"></td>
</tr>
</tbody></table>
<h4 id="8-4-分支合并"><a href="#8-4-分支合并" class="headerlink" title="8.4 分支合并"></a>8.4 分支合并</h4><blockquote>
<p>两个分支内容的合并</p>
</blockquote>
<blockquote>
<p><a href="">git merge 分支a</a>  合并分支a</p>
</blockquote>
<blockquote>
<p>合并的方式有两种：快速合并 和  三方合并。</p>
</blockquote>
<h5 id="8-4-1-快速合并"><a href="#8-4-1-快速合并" class="headerlink" title="8.4.1 快速合并"></a>8.4.1 快速合并</h5><blockquote>
<p>如果分支A当前的修改，是完全基于分支B的修改而来，则B分支合并A分支，就是移动指针即可。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">合并前分支状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416015.jpg" alt="新建分支细节2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">快速合并效果（master 合并 dev）</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416448.jpg" alt="快速分支合并"></td>
</tr>
</tbody></table>
<h5 id="8-4-2-三方合并"><a href="#8-4-2-三方合并" class="headerlink" title="8.4.2 三方合并"></a>8.4.2 三方合并</h5><blockquote>
<p>在不具备快速合并的条件下，会采用三方合并。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">合并前，分支状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416473.jpg" alt="新建分支细节3"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">三方合并，将<code>2</code>和<code>3</code>的更改都累加在<code>1</code>上，形成新的提交点</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416878.jpg" alt="三方合并"></td>
</tr>
</tbody></table>
<h5 id="8-4-3-合并冲突"><a href="#8-4-3-合并冲突" class="headerlink" title="8.4.3 合并冲突"></a>8.4.3 合并冲突</h5><blockquote>
<p>两个分支进行合并，但它们含有对同一个文件的修改，则在合并时出现冲突，git无法决断该保留改文件哪个分支的修改。</p>
</blockquote>
<h6 id="8-4-3-1-冲突演示"><a href="#8-4-3-1-冲突演示" class="headerlink" title="8.4.3.1 冲突演示"></a>8.4.3.1 冲突演示</h6><blockquote>
<p>场景模拟如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">master分支修改hig.txt文件</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416010.jpg" alt="冲突1"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">dev分支修改hig.txt</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131416437.jpg" alt="冲突2"></td>
</tr>
</tbody></table>
<blockquote>
<p>在master分支 合并 dev分支</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">合并dev分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417014.jpg" alt="冲突3"></td>
</tr>
</tbody></table>
<blockquote>
<p>此时，打开hig.txt 文件：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">冲突后，git会将两个分支的内容都展示在文件中</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417492.jpg" alt="冲突4"></td>
</tr>
</tbody></table>
<h6 id="8-4-3-2-冲突解决"><a href="#8-4-3-2-冲突解决" class="headerlink" title="8.4.3.2 冲突解决"></a>8.4.3.2 冲突解决</h6><blockquote>
<p>出现冲突后，如要由两个开发人员当面协商，该如何取舍，为冲突文件定义最终内容。</p>
<p>解决方案：</p>
<ol>
<li>保留某一方的，删除另一方的</li>
<li>保留双方的</li>
<li>但无论如何，要记得删除  <a href="">&lt;&lt;&lt;&lt;  &#x3D;&#x3D;&#x3D;&#x3D;  &gt;&gt;&gt;&gt;</a> 这些</li>
<li>本质是两人协商为冲突的内容，定制出合理的内容。</li>
</ol>
</blockquote>
<table>
<thead>
<tr>
<th align="center">根据协商，再次编辑文件</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417693.jpg" alt="冲突5"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">提交 再次编辑后的文件</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417495.jpg" alt="冲突6"></td>
</tr>
</tbody></table>
<h3 id="九、Idea关联Git"><a href="#九、Idea关联Git" class="headerlink" title="九、Idea关联Git"></a>九、Idea关联Git</h3><hr>
<h4 id="9-1-关联Git"><a href="#9-1-关联Git" class="headerlink" title="9.1 关联Git"></a>9.1 关联Git</h4><blockquote>
<p><a href="">File &gt; Settings</a>  关联过程是自动的</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">此处关联是Idea可以自动完成的</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417802.jpg" alt="idea-关联git"></td>
</tr>
</tbody></table>
<h4 id="9-2-创建仓库"><a href="#9-2-创建仓库" class="headerlink" title="9.2 创建仓库"></a>9.2 创建仓库</h4><blockquote>
<ul>
<li><p>新建项目后，将项目目录创建为git仓库</p>
</li>
<li><p>注意： 要在建仓库前，设置<a href="">忽略文件 “.gitignore”</a></p>
<p>作用：被忽略的文件会被版本记录忽略，版本中不包含它们。</p>
<p>范围：不需要和其他开发共享的文件，具体见下图。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">创建仓库前，先添加忽略文件</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417038.jpg" alt="idea-创建仓库0"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">将项目目录初始化为一个仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417399.jpg" alt="idea-创建仓库1"></td>
</tr>
<tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417001.jpg" alt="idea-创建仓库2"></td>
</tr>
</tbody></table>
<h4 id="9-3-提交-commit"><a href="#9-3-提交-commit" class="headerlink" title="9.3 提交-commit"></a>9.3 提交-commit</h4><blockquote>
<p>创建好仓库后，做第一次提交。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择提交菜单</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417460.jpg" alt="idea-commit"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">选择提交文件，定义提交信息</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131417146.jpg" alt="idea-commit2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">之后会有些友好提示，可以忽略，点击<code>“commit”</code>即可</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131418623.jpg" alt="idea-commit3"></td>
</tr>
</tbody></table>
<h4 id="9-4-创建分支"><a href="#9-4-创建分支" class="headerlink" title="9.4 创建分支"></a>9.4 创建分支</h4><blockquote>
<p>新建开发分支</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">点击右下角链接，即可</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131418794.jpg" alt="idea-新建分支"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">新建分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131418853.jpg" alt="idea-新建分支2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">查看当前分支</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131418762.jpg" alt="idea-新建分支3"></td>
</tr>
</tbody></table>
<h4 id="9-5-上传到远程仓库-push"><a href="#9-5-上传到远程仓库-push" class="headerlink" title="9.5 上传到远程仓库(push)"></a>9.5 上传到远程仓库(push)</h4><blockquote>
<ul>
<li><p>请首先参照第7章，创建一个远程仓库。</p>
</li>
<li><p>要求是裸库，且建议库名和项目名同名。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择<code>push</code>菜单</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419064.jpg" alt="idea-push"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">定义远程仓库地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419300.jpg" alt="idea-push3"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">执行，push操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419128.jpg" alt="idea-push4"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">push成功后 ，弹窗提示</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419138.jpg" alt="idea-push5"></td>
</tr>
</tbody></table>
<h4 id="9-6-复制到本地仓库-clone"><a href="#9-6-复制到本地仓库-clone" class="headerlink" title="9.6 复制到本地仓库(clone)"></a>9.6 复制到本地仓库(clone)</h4><blockquote>
<p>如果有建好的远程仓库，比如公司内已经在用的仓库，或者github，码云上的一些公开仓库，</p>
<p>可以将远程仓库的项目复制到本地使用。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">点击克隆菜单</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419674.jpg" alt="idea-clone"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">输入如远程仓库地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419374.jpg" alt="idea-clone2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">打开项目</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419467.jpg" alt="idea-clone3"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">打开项目，选项</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419420.jpg" alt="idea-clone4"></td>
</tr>
</tbody></table>
<h4 id="9-7-更新本地项目"><a href="#9-7-更新本地项目" class="headerlink" title="9.7 更新本地项目"></a>9.7 更新本地项目</h4><blockquote>
<p>如果远程仓库有更新，则你的本地项目也需要一起更新。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">选择pull菜单</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419280.jpg" alt="idea-pull1"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">执行 pull操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419776.jpg" alt="idea-pull2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">更新日志显示</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131419366.jpg" alt="idea-pull3"></td>
</tr>
</tbody></table>
<h4 id="9-8-冲突解决"><a href="#9-8-冲突解决" class="headerlink" title="9.8 冲突解决"></a>9.8 冲突解决</h4><blockquote>
<p>合并分支时，如果出现冲突，则需要解决冲突。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">冲突出现，弹窗中可以选择如下</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420111.jpg" alt="idea-冲突"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">也可以直接修改冲突文件，然后commit即可</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420430.jpg" alt="idea-冲突2"></td>
</tr>
</tbody></table>
<h3 id="十、多人协同开发"><a href="#十、多人协同开发" class="headerlink" title="十、多人协同开发"></a>十、多人协同开发</h3><hr>
<blockquote>
<p>多人开发协同，git操作</p>
</blockquote>
<h4 id="10-1-项目管理员-项目经理"><a href="#10-1-项目管理员-项目经理" class="headerlink" title="10.1 项目管理员( 项目经理 )"></a>10.1 项目管理员( 项目经理 )</h4><blockquote>
<p>1&gt; 由管理员负责创建一个远程库，初始的库中什么也没有，为裸库。库的名称建议和项目同名</p>
</blockquote>
<blockquote>
<p>2&gt; 管理员会在idea中创建一个初始项目,其中包含.gitignore文件。                                                                                          	 并在项目根目录下 建立本地库。并建立 dev分支。</p>
</blockquote>
<blockquote>
<p>3&gt; 管理员将本地库上传到远程库</p>
</blockquote>
<blockquote>
<p>4&gt; 将其他开发人员拉入远程库的 <a href="">开发成员列表中</a> ，使得其他开发人员可以访问该远程库。</p>
<p>流程如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">点击添加成员</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420660.jpg" alt="添加开发成员"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">选择直接添加</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420832.jpg" alt="添加开发成员2"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">提交</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420469.jpg" alt="添加开发成员3"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">查看已添加的开发成员</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420417.jpg" alt="添加开发成员4"></td>
</tr>
</tbody></table>
<blockquote>
<p>5&gt; master分支设置为 <a href="">protected分支</a>，只有管理员有权限将代码合并到其中。dev分支设置为 <a href="">常规分支</a>所有开发人员  	  都可以其中合并代码</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">进入分支设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420544.jpg" alt="保护分支1"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">设置保护分支，让master分支不能被随更改</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131420298.jpg" alt="保护分支2"></td>
</tr>
</tbody></table>
<h4 id="10-2-开发人员"><a href="#10-2-开发人员" class="headerlink" title="10.2 开发人员"></a>10.2 开发人员</h4><blockquote>
<ul>
<li><p>初始化：在idea中clone 远程库，获得项目。会建立本地库</p>
</li>
<li><p>后续的开发中，都要在dev分支上进行。开发完一个功能并测试通过后就commit 	 提交到本地的dev分支中，然后 上传(push)到远程dev分支中。	</p>
</li>
<li><p>需要更新项目内容时，通过 pull 从远程仓库拉取内容。																   	</p>
</li>
<li><p>注意：多人协同时，每次在 push 到远程库前，都先做一次pull，一来是把远程最新内容合并到本地，二来是核实本地内容是否和远程内容有冲突。</p>
</li>
<li><p>后续的开发，会接到一个个的功能任务，往复操作 2&gt;、3&gt;、4&gt; 而已。</p>
</li>
</ul>
</blockquote>
<h3 id="十一、经典问题"><a href="#十一、经典问题" class="headerlink" title="十一、经典问题"></a>十一、经典问题</h3><hr>
<blockquote>
<p>在使用https协议做push时，如果曾经使用过码云，但密码有过改动，此时会报错</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">使用https协议报错</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131421052.jpg" alt="坑1"></td>
</tr>
</tbody></table>
<blockquote>
<p>解决方案:  <a href="">控制面板  》 凭据管理器 》</a> 删除对应凭证，再次使用时会提示重新输入密码。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">删除之前的码云凭证，然后重新push即可</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304131421978.jpg" alt="坑2"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>i18n</title>
    <url>/2023/04/14/i18n/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" />


    <div id="aplayer-OJMQTrKG" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2121130123" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"
    ></div>

<h1 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h1><ol>
<li>在resources下面建立i18n文件夹</li>
<li>建立各国语言对照的properties文件</li>
</ol>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304140850005.png" alt="image-20230414085027275"></p>
<p><img src="https://gitee.com/lan-xiaodong/myblog/raw/master/img/202304140850775.png" alt="image-20230414085052283"></p>
<ol start="3">
<li><p>建立一个类实现LocaleResolver 本地化解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title class_">LocaleResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Locale <span class="title function_">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">l</span> <span class="operator">=</span> httpServletRequest.getParameter(<span class="string">&quot;l&quot;</span>);   <span class="comment">// l 用来接受前端传过来的参数</span></span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(l))&#123;   <span class="comment">//  由于传过来的为类似zh_CN这种文件,需要将其解析后给到本地组</span></span><br><span class="line">            locale = <span class="keyword">new</span> <span class="title class_">Locale</span>(l.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>], l.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>建立一个配置类,该配置类实现WebMvcConfigurer接口</p>
<ol>
<li><p>把本地化解析器注册到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LocaleResolver <span class="title function_">localeResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLocaleResolver</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现接口addViewControllers,该接口用来访问网页资源,由于templates下的资源必须去后端返回,才能找到页面,所以采用该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">     registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">     registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>前端的编写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-container sign-in-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;tip&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">               </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;remember&#125;&quot;</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;btn&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;index.html(l=&#x27;ja_JP&#x27;)&#125;&quot;</span>&gt;</span>日本语<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
